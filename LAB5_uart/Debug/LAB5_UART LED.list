
LAB5_UART LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004bb0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000037c  08004d50  08004d50  00014d50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080050cc  080050cc  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  080050cc  080050cc  000150cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080050d4  080050d4  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080050d4  080050d4  000150d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080050d8  080050d8  000150d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080050dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003a0  2000007c  08005158  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000041c  08005158  0002041c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008d4a  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001722  00000000  00000000  00028df6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006f8  00000000  00000000  0002a518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000670  00000000  00000000  0002ac10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015973  00000000  00000000  0002b280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008e3f  00000000  00000000  00040bf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085e3d  00000000  00000000  00049a32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cf86f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002060  00000000  00000000  000cf8c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000007c 	.word	0x2000007c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004d38 	.word	0x08004d38

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000080 	.word	0x20000080
 80001dc:	08004d38 	.word	0x08004d38

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2f>:
 8000a2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a30:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a34:	bf24      	itt	cs
 8000a36:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a3a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a3e:	d90d      	bls.n	8000a5c <__aeabi_d2f+0x30>
 8000a40:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a44:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a48:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a4c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a50:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a54:	bf08      	it	eq
 8000a56:	f020 0001 	biceq.w	r0, r0, #1
 8000a5a:	4770      	bx	lr
 8000a5c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a60:	d121      	bne.n	8000aa6 <__aeabi_d2f+0x7a>
 8000a62:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a66:	bfbc      	itt	lt
 8000a68:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a6c:	4770      	bxlt	lr
 8000a6e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a72:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a76:	f1c2 0218 	rsb	r2, r2, #24
 8000a7a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a7e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a82:	fa20 f002 	lsr.w	r0, r0, r2
 8000a86:	bf18      	it	ne
 8000a88:	f040 0001 	orrne.w	r0, r0, #1
 8000a8c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a90:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a94:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a98:	ea40 000c 	orr.w	r0, r0, ip
 8000a9c:	fa23 f302 	lsr.w	r3, r3, r2
 8000aa0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aa4:	e7cc      	b.n	8000a40 <__aeabi_d2f+0x14>
 8000aa6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aaa:	d107      	bne.n	8000abc <__aeabi_d2f+0x90>
 8000aac:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ab0:	bf1e      	ittt	ne
 8000ab2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ab6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aba:	4770      	bxne	lr
 8000abc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ac0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ac4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <__aeabi_uldivmod>:
 8000acc:	b953      	cbnz	r3, 8000ae4 <__aeabi_uldivmod+0x18>
 8000ace:	b94a      	cbnz	r2, 8000ae4 <__aeabi_uldivmod+0x18>
 8000ad0:	2900      	cmp	r1, #0
 8000ad2:	bf08      	it	eq
 8000ad4:	2800      	cmpeq	r0, #0
 8000ad6:	bf1c      	itt	ne
 8000ad8:	f04f 31ff 	movne.w	r1, #4294967295
 8000adc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ae0:	f000 b974 	b.w	8000dcc <__aeabi_idiv0>
 8000ae4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ae8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aec:	f000 f806 	bl	8000afc <__udivmoddi4>
 8000af0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000af4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000af8:	b004      	add	sp, #16
 8000afa:	4770      	bx	lr

08000afc <__udivmoddi4>:
 8000afc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b00:	9d08      	ldr	r5, [sp, #32]
 8000b02:	4604      	mov	r4, r0
 8000b04:	468e      	mov	lr, r1
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d14d      	bne.n	8000ba6 <__udivmoddi4+0xaa>
 8000b0a:	428a      	cmp	r2, r1
 8000b0c:	4694      	mov	ip, r2
 8000b0e:	d969      	bls.n	8000be4 <__udivmoddi4+0xe8>
 8000b10:	fab2 f282 	clz	r2, r2
 8000b14:	b152      	cbz	r2, 8000b2c <__udivmoddi4+0x30>
 8000b16:	fa01 f302 	lsl.w	r3, r1, r2
 8000b1a:	f1c2 0120 	rsb	r1, r2, #32
 8000b1e:	fa20 f101 	lsr.w	r1, r0, r1
 8000b22:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b26:	ea41 0e03 	orr.w	lr, r1, r3
 8000b2a:	4094      	lsls	r4, r2
 8000b2c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b30:	0c21      	lsrs	r1, r4, #16
 8000b32:	fbbe f6f8 	udiv	r6, lr, r8
 8000b36:	fa1f f78c 	uxth.w	r7, ip
 8000b3a:	fb08 e316 	mls	r3, r8, r6, lr
 8000b3e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b42:	fb06 f107 	mul.w	r1, r6, r7
 8000b46:	4299      	cmp	r1, r3
 8000b48:	d90a      	bls.n	8000b60 <__udivmoddi4+0x64>
 8000b4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b4e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b52:	f080 811f 	bcs.w	8000d94 <__udivmoddi4+0x298>
 8000b56:	4299      	cmp	r1, r3
 8000b58:	f240 811c 	bls.w	8000d94 <__udivmoddi4+0x298>
 8000b5c:	3e02      	subs	r6, #2
 8000b5e:	4463      	add	r3, ip
 8000b60:	1a5b      	subs	r3, r3, r1
 8000b62:	b2a4      	uxth	r4, r4
 8000b64:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b68:	fb08 3310 	mls	r3, r8, r0, r3
 8000b6c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b70:	fb00 f707 	mul.w	r7, r0, r7
 8000b74:	42a7      	cmp	r7, r4
 8000b76:	d90a      	bls.n	8000b8e <__udivmoddi4+0x92>
 8000b78:	eb1c 0404 	adds.w	r4, ip, r4
 8000b7c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b80:	f080 810a 	bcs.w	8000d98 <__udivmoddi4+0x29c>
 8000b84:	42a7      	cmp	r7, r4
 8000b86:	f240 8107 	bls.w	8000d98 <__udivmoddi4+0x29c>
 8000b8a:	4464      	add	r4, ip
 8000b8c:	3802      	subs	r0, #2
 8000b8e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b92:	1be4      	subs	r4, r4, r7
 8000b94:	2600      	movs	r6, #0
 8000b96:	b11d      	cbz	r5, 8000ba0 <__udivmoddi4+0xa4>
 8000b98:	40d4      	lsrs	r4, r2
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	e9c5 4300 	strd	r4, r3, [r5]
 8000ba0:	4631      	mov	r1, r6
 8000ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ba6:	428b      	cmp	r3, r1
 8000ba8:	d909      	bls.n	8000bbe <__udivmoddi4+0xc2>
 8000baa:	2d00      	cmp	r5, #0
 8000bac:	f000 80ef 	beq.w	8000d8e <__udivmoddi4+0x292>
 8000bb0:	2600      	movs	r6, #0
 8000bb2:	e9c5 0100 	strd	r0, r1, [r5]
 8000bb6:	4630      	mov	r0, r6
 8000bb8:	4631      	mov	r1, r6
 8000bba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bbe:	fab3 f683 	clz	r6, r3
 8000bc2:	2e00      	cmp	r6, #0
 8000bc4:	d14a      	bne.n	8000c5c <__udivmoddi4+0x160>
 8000bc6:	428b      	cmp	r3, r1
 8000bc8:	d302      	bcc.n	8000bd0 <__udivmoddi4+0xd4>
 8000bca:	4282      	cmp	r2, r0
 8000bcc:	f200 80f9 	bhi.w	8000dc2 <__udivmoddi4+0x2c6>
 8000bd0:	1a84      	subs	r4, r0, r2
 8000bd2:	eb61 0303 	sbc.w	r3, r1, r3
 8000bd6:	2001      	movs	r0, #1
 8000bd8:	469e      	mov	lr, r3
 8000bda:	2d00      	cmp	r5, #0
 8000bdc:	d0e0      	beq.n	8000ba0 <__udivmoddi4+0xa4>
 8000bde:	e9c5 4e00 	strd	r4, lr, [r5]
 8000be2:	e7dd      	b.n	8000ba0 <__udivmoddi4+0xa4>
 8000be4:	b902      	cbnz	r2, 8000be8 <__udivmoddi4+0xec>
 8000be6:	deff      	udf	#255	; 0xff
 8000be8:	fab2 f282 	clz	r2, r2
 8000bec:	2a00      	cmp	r2, #0
 8000bee:	f040 8092 	bne.w	8000d16 <__udivmoddi4+0x21a>
 8000bf2:	eba1 010c 	sub.w	r1, r1, ip
 8000bf6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bfa:	fa1f fe8c 	uxth.w	lr, ip
 8000bfe:	2601      	movs	r6, #1
 8000c00:	0c20      	lsrs	r0, r4, #16
 8000c02:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c06:	fb07 1113 	mls	r1, r7, r3, r1
 8000c0a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c0e:	fb0e f003 	mul.w	r0, lr, r3
 8000c12:	4288      	cmp	r0, r1
 8000c14:	d908      	bls.n	8000c28 <__udivmoddi4+0x12c>
 8000c16:	eb1c 0101 	adds.w	r1, ip, r1
 8000c1a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c1e:	d202      	bcs.n	8000c26 <__udivmoddi4+0x12a>
 8000c20:	4288      	cmp	r0, r1
 8000c22:	f200 80cb 	bhi.w	8000dbc <__udivmoddi4+0x2c0>
 8000c26:	4643      	mov	r3, r8
 8000c28:	1a09      	subs	r1, r1, r0
 8000c2a:	b2a4      	uxth	r4, r4
 8000c2c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c30:	fb07 1110 	mls	r1, r7, r0, r1
 8000c34:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c38:	fb0e fe00 	mul.w	lr, lr, r0
 8000c3c:	45a6      	cmp	lr, r4
 8000c3e:	d908      	bls.n	8000c52 <__udivmoddi4+0x156>
 8000c40:	eb1c 0404 	adds.w	r4, ip, r4
 8000c44:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c48:	d202      	bcs.n	8000c50 <__udivmoddi4+0x154>
 8000c4a:	45a6      	cmp	lr, r4
 8000c4c:	f200 80bb 	bhi.w	8000dc6 <__udivmoddi4+0x2ca>
 8000c50:	4608      	mov	r0, r1
 8000c52:	eba4 040e 	sub.w	r4, r4, lr
 8000c56:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c5a:	e79c      	b.n	8000b96 <__udivmoddi4+0x9a>
 8000c5c:	f1c6 0720 	rsb	r7, r6, #32
 8000c60:	40b3      	lsls	r3, r6
 8000c62:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c66:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c6a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c6e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c72:	431c      	orrs	r4, r3
 8000c74:	40f9      	lsrs	r1, r7
 8000c76:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c7a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c7e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c82:	0c20      	lsrs	r0, r4, #16
 8000c84:	fa1f fe8c 	uxth.w	lr, ip
 8000c88:	fb09 1118 	mls	r1, r9, r8, r1
 8000c8c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c90:	fb08 f00e 	mul.w	r0, r8, lr
 8000c94:	4288      	cmp	r0, r1
 8000c96:	fa02 f206 	lsl.w	r2, r2, r6
 8000c9a:	d90b      	bls.n	8000cb4 <__udivmoddi4+0x1b8>
 8000c9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000ca0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ca4:	f080 8088 	bcs.w	8000db8 <__udivmoddi4+0x2bc>
 8000ca8:	4288      	cmp	r0, r1
 8000caa:	f240 8085 	bls.w	8000db8 <__udivmoddi4+0x2bc>
 8000cae:	f1a8 0802 	sub.w	r8, r8, #2
 8000cb2:	4461      	add	r1, ip
 8000cb4:	1a09      	subs	r1, r1, r0
 8000cb6:	b2a4      	uxth	r4, r4
 8000cb8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000cbc:	fb09 1110 	mls	r1, r9, r0, r1
 8000cc0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000cc4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cc8:	458e      	cmp	lr, r1
 8000cca:	d908      	bls.n	8000cde <__udivmoddi4+0x1e2>
 8000ccc:	eb1c 0101 	adds.w	r1, ip, r1
 8000cd0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cd4:	d26c      	bcs.n	8000db0 <__udivmoddi4+0x2b4>
 8000cd6:	458e      	cmp	lr, r1
 8000cd8:	d96a      	bls.n	8000db0 <__udivmoddi4+0x2b4>
 8000cda:	3802      	subs	r0, #2
 8000cdc:	4461      	add	r1, ip
 8000cde:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ce2:	fba0 9402 	umull	r9, r4, r0, r2
 8000ce6:	eba1 010e 	sub.w	r1, r1, lr
 8000cea:	42a1      	cmp	r1, r4
 8000cec:	46c8      	mov	r8, r9
 8000cee:	46a6      	mov	lr, r4
 8000cf0:	d356      	bcc.n	8000da0 <__udivmoddi4+0x2a4>
 8000cf2:	d053      	beq.n	8000d9c <__udivmoddi4+0x2a0>
 8000cf4:	b15d      	cbz	r5, 8000d0e <__udivmoddi4+0x212>
 8000cf6:	ebb3 0208 	subs.w	r2, r3, r8
 8000cfa:	eb61 010e 	sbc.w	r1, r1, lr
 8000cfe:	fa01 f707 	lsl.w	r7, r1, r7
 8000d02:	fa22 f306 	lsr.w	r3, r2, r6
 8000d06:	40f1      	lsrs	r1, r6
 8000d08:	431f      	orrs	r7, r3
 8000d0a:	e9c5 7100 	strd	r7, r1, [r5]
 8000d0e:	2600      	movs	r6, #0
 8000d10:	4631      	mov	r1, r6
 8000d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d16:	f1c2 0320 	rsb	r3, r2, #32
 8000d1a:	40d8      	lsrs	r0, r3
 8000d1c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d20:	fa21 f303 	lsr.w	r3, r1, r3
 8000d24:	4091      	lsls	r1, r2
 8000d26:	4301      	orrs	r1, r0
 8000d28:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d2c:	fa1f fe8c 	uxth.w	lr, ip
 8000d30:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d34:	fb07 3610 	mls	r6, r7, r0, r3
 8000d38:	0c0b      	lsrs	r3, r1, #16
 8000d3a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d3e:	fb00 f60e 	mul.w	r6, r0, lr
 8000d42:	429e      	cmp	r6, r3
 8000d44:	fa04 f402 	lsl.w	r4, r4, r2
 8000d48:	d908      	bls.n	8000d5c <__udivmoddi4+0x260>
 8000d4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d52:	d22f      	bcs.n	8000db4 <__udivmoddi4+0x2b8>
 8000d54:	429e      	cmp	r6, r3
 8000d56:	d92d      	bls.n	8000db4 <__udivmoddi4+0x2b8>
 8000d58:	3802      	subs	r0, #2
 8000d5a:	4463      	add	r3, ip
 8000d5c:	1b9b      	subs	r3, r3, r6
 8000d5e:	b289      	uxth	r1, r1
 8000d60:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d64:	fb07 3316 	mls	r3, r7, r6, r3
 8000d68:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d6c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d70:	428b      	cmp	r3, r1
 8000d72:	d908      	bls.n	8000d86 <__udivmoddi4+0x28a>
 8000d74:	eb1c 0101 	adds.w	r1, ip, r1
 8000d78:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d7c:	d216      	bcs.n	8000dac <__udivmoddi4+0x2b0>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d914      	bls.n	8000dac <__udivmoddi4+0x2b0>
 8000d82:	3e02      	subs	r6, #2
 8000d84:	4461      	add	r1, ip
 8000d86:	1ac9      	subs	r1, r1, r3
 8000d88:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d8c:	e738      	b.n	8000c00 <__udivmoddi4+0x104>
 8000d8e:	462e      	mov	r6, r5
 8000d90:	4628      	mov	r0, r5
 8000d92:	e705      	b.n	8000ba0 <__udivmoddi4+0xa4>
 8000d94:	4606      	mov	r6, r0
 8000d96:	e6e3      	b.n	8000b60 <__udivmoddi4+0x64>
 8000d98:	4618      	mov	r0, r3
 8000d9a:	e6f8      	b.n	8000b8e <__udivmoddi4+0x92>
 8000d9c:	454b      	cmp	r3, r9
 8000d9e:	d2a9      	bcs.n	8000cf4 <__udivmoddi4+0x1f8>
 8000da0:	ebb9 0802 	subs.w	r8, r9, r2
 8000da4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000da8:	3801      	subs	r0, #1
 8000daa:	e7a3      	b.n	8000cf4 <__udivmoddi4+0x1f8>
 8000dac:	4646      	mov	r6, r8
 8000dae:	e7ea      	b.n	8000d86 <__udivmoddi4+0x28a>
 8000db0:	4620      	mov	r0, r4
 8000db2:	e794      	b.n	8000cde <__udivmoddi4+0x1e2>
 8000db4:	4640      	mov	r0, r8
 8000db6:	e7d1      	b.n	8000d5c <__udivmoddi4+0x260>
 8000db8:	46d0      	mov	r8, sl
 8000dba:	e77b      	b.n	8000cb4 <__udivmoddi4+0x1b8>
 8000dbc:	3b02      	subs	r3, #2
 8000dbe:	4461      	add	r1, ip
 8000dc0:	e732      	b.n	8000c28 <__udivmoddi4+0x12c>
 8000dc2:	4630      	mov	r0, r6
 8000dc4:	e709      	b.n	8000bda <__udivmoddi4+0xde>
 8000dc6:	4464      	add	r4, ip
 8000dc8:	3802      	subs	r0, #2
 8000dca:	e742      	b.n	8000c52 <__udivmoddi4+0x156>

08000dcc <__aeabi_idiv0>:
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop

08000dd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dd0:	b5b0      	push	{r4, r5, r7, lr}
 8000dd2:	b090      	sub	sp, #64	; 0x40
 8000dd4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dd6:	f000 fdc1 	bl	800195c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dda:	f000 f83f 	bl	8000e5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dde:	f000 f8f9 	bl	8000fd4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000de2:	f000 f8cf 	bl	8000f84 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000de6:	f000 f8a3 	bl	8000f30 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  uint8_t text[] = "if Press 0 : LED Control\r\nif Press 1 : Button Status   \r\n";
 8000dea:	4b16      	ldr	r3, [pc, #88]	; (8000e44 <main+0x74>)
 8000dec:	1d3c      	adds	r4, r7, #4
 8000dee:	461d      	mov	r5, r3
 8000df0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000df2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000df4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000df6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000df8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dfa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dfc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e00:	c403      	stmia	r4!, {r0, r1}
 8000e02:	8022      	strh	r2, [r4, #0]
  HAL_UART_Transmit(&huart2, text, 58, 10);
 8000e04:	1d39      	adds	r1, r7, #4
 8000e06:	230a      	movs	r3, #10
 8000e08:	223a      	movs	r2, #58	; 0x3a
 8000e0a:	480f      	ldr	r0, [pc, #60]	; (8000e48 <main+0x78>)
 8000e0c:	f002 f9e1 	bl	80031d2 <HAL_UART_Transmit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  statePin = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8000e10:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e14:	480d      	ldr	r0, [pc, #52]	; (8000e4c <main+0x7c>)
 8000e16:	f001 fcab 	bl	8002770 <HAL_GPIO_ReadPin>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	461a      	mov	r2, r3
 8000e1e:	4b0c      	ldr	r3, [pc, #48]	; (8000e50 <main+0x80>)
 8000e20:	601a      	str	r2, [r3, #0]
	  if (openclose == 1)
 8000e22:	4b0c      	ldr	r3, [pc, #48]	; (8000e54 <main+0x84>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	2b01      	cmp	r3, #1
 8000e28:	d102      	bne.n	8000e30 <main+0x60>
	  {
		  DummyTask();
 8000e2a:	f000 fbaf 	bl	800158c <DummyTask>
 8000e2e:	e7ef      	b.n	8000e10 <main+0x40>
	  }
	  else if (openclose == 0)
 8000e30:	4b08      	ldr	r3, [pc, #32]	; (8000e54 <main+0x84>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d1eb      	bne.n	8000e10 <main+0x40>
	  {
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5,0);
 8000e38:	2200      	movs	r2, #0
 8000e3a:	2120      	movs	r1, #32
 8000e3c:	4806      	ldr	r0, [pc, #24]	; (8000e58 <main+0x88>)
 8000e3e:	f001 fcaf 	bl	80027a0 <HAL_GPIO_WritePin>
	  statePin = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8000e42:	e7e5      	b.n	8000e10 <main+0x40>
 8000e44:	08004d50 	.word	0x08004d50
 8000e48:	20000098 	.word	0x20000098
 8000e4c:	40020800 	.word	0x40020800
 8000e50:	200003f8 	.word	0x200003f8
 8000e54:	20000008 	.word	0x20000008
 8000e58:	40020000 	.word	0x40020000

08000e5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b094      	sub	sp, #80	; 0x50
 8000e60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e62:	f107 0320 	add.w	r3, r7, #32
 8000e66:	2230      	movs	r2, #48	; 0x30
 8000e68:	2100      	movs	r1, #0
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f003 faee 	bl	800444c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e70:	f107 030c 	add.w	r3, r7, #12
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	605a      	str	r2, [r3, #4]
 8000e7a:	609a      	str	r2, [r3, #8]
 8000e7c:	60da      	str	r2, [r3, #12]
 8000e7e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e80:	2300      	movs	r3, #0
 8000e82:	60bb      	str	r3, [r7, #8]
 8000e84:	4b28      	ldr	r3, [pc, #160]	; (8000f28 <SystemClock_Config+0xcc>)
 8000e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e88:	4a27      	ldr	r2, [pc, #156]	; (8000f28 <SystemClock_Config+0xcc>)
 8000e8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e8e:	6413      	str	r3, [r2, #64]	; 0x40
 8000e90:	4b25      	ldr	r3, [pc, #148]	; (8000f28 <SystemClock_Config+0xcc>)
 8000e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e98:	60bb      	str	r3, [r7, #8]
 8000e9a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	607b      	str	r3, [r7, #4]
 8000ea0:	4b22      	ldr	r3, [pc, #136]	; (8000f2c <SystemClock_Config+0xd0>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a21      	ldr	r2, [pc, #132]	; (8000f2c <SystemClock_Config+0xd0>)
 8000ea6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000eaa:	6013      	str	r3, [r2, #0]
 8000eac:	4b1f      	ldr	r3, [pc, #124]	; (8000f2c <SystemClock_Config+0xd0>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000eb4:	607b      	str	r3, [r7, #4]
 8000eb6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000eb8:	2302      	movs	r3, #2
 8000eba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ec0:	2310      	movs	r3, #16
 8000ec2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ec4:	2302      	movs	r3, #2
 8000ec6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000ecc:	2310      	movs	r3, #16
 8000ece:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000ed0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000ed4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000ed6:	2304      	movs	r3, #4
 8000ed8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000eda:	2304      	movs	r3, #4
 8000edc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ede:	f107 0320 	add.w	r3, r7, #32
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f001 fc90 	bl	8002808 <HAL_RCC_OscConfig>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000eee:	f000 fb97 	bl	8001620 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ef2:	230f      	movs	r3, #15
 8000ef4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ef6:	2302      	movs	r3, #2
 8000ef8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000efa:	2300      	movs	r3, #0
 8000efc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000efe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f02:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f04:	2300      	movs	r3, #0
 8000f06:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f08:	f107 030c 	add.w	r3, r7, #12
 8000f0c:	2102      	movs	r1, #2
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f001 fef2 	bl	8002cf8 <HAL_RCC_ClockConfig>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000f1a:	f000 fb81 	bl	8001620 <Error_Handler>
  }
}
 8000f1e:	bf00      	nop
 8000f20:	3750      	adds	r7, #80	; 0x50
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	40023800 	.word	0x40023800
 8000f2c:	40007000 	.word	0x40007000

08000f30 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f34:	4b11      	ldr	r3, [pc, #68]	; (8000f7c <MX_USART2_UART_Init+0x4c>)
 8000f36:	4a12      	ldr	r2, [pc, #72]	; (8000f80 <MX_USART2_UART_Init+0x50>)
 8000f38:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f3a:	4b10      	ldr	r3, [pc, #64]	; (8000f7c <MX_USART2_UART_Init+0x4c>)
 8000f3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f40:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f42:	4b0e      	ldr	r3, [pc, #56]	; (8000f7c <MX_USART2_UART_Init+0x4c>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f48:	4b0c      	ldr	r3, [pc, #48]	; (8000f7c <MX_USART2_UART_Init+0x4c>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f4e:	4b0b      	ldr	r3, [pc, #44]	; (8000f7c <MX_USART2_UART_Init+0x4c>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f54:	4b09      	ldr	r3, [pc, #36]	; (8000f7c <MX_USART2_UART_Init+0x4c>)
 8000f56:	220c      	movs	r2, #12
 8000f58:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f5a:	4b08      	ldr	r3, [pc, #32]	; (8000f7c <MX_USART2_UART_Init+0x4c>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f60:	4b06      	ldr	r3, [pc, #24]	; (8000f7c <MX_USART2_UART_Init+0x4c>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f66:	4805      	ldr	r0, [pc, #20]	; (8000f7c <MX_USART2_UART_Init+0x4c>)
 8000f68:	f002 f8e6 	bl	8003138 <HAL_UART_Init>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f72:	f000 fb55 	bl	8001620 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f76:	bf00      	nop
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	20000098 	.word	0x20000098
 8000f80:	40004400 	.word	0x40004400

08000f84 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	607b      	str	r3, [r7, #4]
 8000f8e:	4b10      	ldr	r3, [pc, #64]	; (8000fd0 <MX_DMA_Init+0x4c>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f92:	4a0f      	ldr	r2, [pc, #60]	; (8000fd0 <MX_DMA_Init+0x4c>)
 8000f94:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f98:	6313      	str	r3, [r2, #48]	; 0x30
 8000f9a:	4b0d      	ldr	r3, [pc, #52]	; (8000fd0 <MX_DMA_Init+0x4c>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fa2:	607b      	str	r3, [r7, #4]
 8000fa4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	2100      	movs	r1, #0
 8000faa:	2010      	movs	r0, #16
 8000fac:	f000 fe23 	bl	8001bf6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000fb0:	2010      	movs	r0, #16
 8000fb2:	f000 fe3c 	bl	8001c2e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	2100      	movs	r1, #0
 8000fba:	2011      	movs	r0, #17
 8000fbc:	f000 fe1b 	bl	8001bf6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000fc0:	2011      	movs	r0, #17
 8000fc2:	f000 fe34 	bl	8001c2e <HAL_NVIC_EnableIRQ>

}
 8000fc6:	bf00      	nop
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	40023800 	.word	0x40023800

08000fd4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b08a      	sub	sp, #40	; 0x28
 8000fd8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fda:	f107 0314 	add.w	r3, r7, #20
 8000fde:	2200      	movs	r2, #0
 8000fe0:	601a      	str	r2, [r3, #0]
 8000fe2:	605a      	str	r2, [r3, #4]
 8000fe4:	609a      	str	r2, [r3, #8]
 8000fe6:	60da      	str	r2, [r3, #12]
 8000fe8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fea:	2300      	movs	r3, #0
 8000fec:	613b      	str	r3, [r7, #16]
 8000fee:	4b2d      	ldr	r3, [pc, #180]	; (80010a4 <MX_GPIO_Init+0xd0>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff2:	4a2c      	ldr	r2, [pc, #176]	; (80010a4 <MX_GPIO_Init+0xd0>)
 8000ff4:	f043 0304 	orr.w	r3, r3, #4
 8000ff8:	6313      	str	r3, [r2, #48]	; 0x30
 8000ffa:	4b2a      	ldr	r3, [pc, #168]	; (80010a4 <MX_GPIO_Init+0xd0>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffe:	f003 0304 	and.w	r3, r3, #4
 8001002:	613b      	str	r3, [r7, #16]
 8001004:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001006:	2300      	movs	r3, #0
 8001008:	60fb      	str	r3, [r7, #12]
 800100a:	4b26      	ldr	r3, [pc, #152]	; (80010a4 <MX_GPIO_Init+0xd0>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100e:	4a25      	ldr	r2, [pc, #148]	; (80010a4 <MX_GPIO_Init+0xd0>)
 8001010:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001014:	6313      	str	r3, [r2, #48]	; 0x30
 8001016:	4b23      	ldr	r3, [pc, #140]	; (80010a4 <MX_GPIO_Init+0xd0>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800101e:	60fb      	str	r3, [r7, #12]
 8001020:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001022:	2300      	movs	r3, #0
 8001024:	60bb      	str	r3, [r7, #8]
 8001026:	4b1f      	ldr	r3, [pc, #124]	; (80010a4 <MX_GPIO_Init+0xd0>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102a:	4a1e      	ldr	r2, [pc, #120]	; (80010a4 <MX_GPIO_Init+0xd0>)
 800102c:	f043 0301 	orr.w	r3, r3, #1
 8001030:	6313      	str	r3, [r2, #48]	; 0x30
 8001032:	4b1c      	ldr	r3, [pc, #112]	; (80010a4 <MX_GPIO_Init+0xd0>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001036:	f003 0301 	and.w	r3, r3, #1
 800103a:	60bb      	str	r3, [r7, #8]
 800103c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800103e:	2300      	movs	r3, #0
 8001040:	607b      	str	r3, [r7, #4]
 8001042:	4b18      	ldr	r3, [pc, #96]	; (80010a4 <MX_GPIO_Init+0xd0>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001046:	4a17      	ldr	r2, [pc, #92]	; (80010a4 <MX_GPIO_Init+0xd0>)
 8001048:	f043 0302 	orr.w	r3, r3, #2
 800104c:	6313      	str	r3, [r2, #48]	; 0x30
 800104e:	4b15      	ldr	r3, [pc, #84]	; (80010a4 <MX_GPIO_Init+0xd0>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001052:	f003 0302 	and.w	r3, r3, #2
 8001056:	607b      	str	r3, [r7, #4]
 8001058:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800105a:	2200      	movs	r2, #0
 800105c:	2120      	movs	r1, #32
 800105e:	4812      	ldr	r0, [pc, #72]	; (80010a8 <MX_GPIO_Init+0xd4>)
 8001060:	f001 fb9e 	bl	80027a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001064:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001068:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800106a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800106e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001070:	2300      	movs	r3, #0
 8001072:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001074:	f107 0314 	add.w	r3, r7, #20
 8001078:	4619      	mov	r1, r3
 800107a:	480c      	ldr	r0, [pc, #48]	; (80010ac <MX_GPIO_Init+0xd8>)
 800107c:	f001 f9f4 	bl	8002468 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001080:	2320      	movs	r3, #32
 8001082:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001084:	2301      	movs	r3, #1
 8001086:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001088:	2300      	movs	r3, #0
 800108a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800108c:	2300      	movs	r3, #0
 800108e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001090:	f107 0314 	add.w	r3, r7, #20
 8001094:	4619      	mov	r1, r3
 8001096:	4804      	ldr	r0, [pc, #16]	; (80010a8 <MX_GPIO_Init+0xd4>)
 8001098:	f001 f9e6 	bl	8002468 <HAL_GPIO_Init>

}
 800109c:	bf00      	nop
 800109e:	3728      	adds	r7, #40	; 0x28
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	40023800 	.word	0x40023800
 80010a8:	40020000 	.word	0x40020000
 80010ac:	40020800 	.word	0x40020800

080010b0 <HAL_UART_RxCpltCallback>:
	//start UART in DMA Mode
	HAL_UART_Receive_DMA(&huart2, RxBuffer, 1);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
	if(huart == &huart2)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	4a28      	ldr	r2, [pc, #160]	; (800115c <HAL_UART_RxCpltCallback+0xac>)
 80010bc:	4293      	cmp	r3, r2
 80010be:	d149      	bne.n	8001154 <HAL_UART_RxCpltCallback+0xa4>
	{
		RxBuffer[1] = '\0';
 80010c0:	4b27      	ldr	r3, [pc, #156]	; (8001160 <HAL_UART_RxCpltCallback+0xb0>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	705a      	strb	r2, [r3, #1]
		if(RxBuffer[0]=='x')button = 'x';
 80010c6:	4b26      	ldr	r3, [pc, #152]	; (8001160 <HAL_UART_RxCpltCallback+0xb0>)
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	2b78      	cmp	r3, #120	; 0x78
 80010cc:	d103      	bne.n	80010d6 <HAL_UART_RxCpltCallback+0x26>
 80010ce:	4b25      	ldr	r3, [pc, #148]	; (8001164 <HAL_UART_RxCpltCallback+0xb4>)
 80010d0:	2278      	movs	r2, #120	; 0x78
 80010d2:	601a      	str	r2, [r3, #0]
 80010d4:	e039      	b.n	800114a <HAL_UART_RxCpltCallback+0x9a>
		else if(RxBuffer[0]=='0')button = '0';
 80010d6:	4b22      	ldr	r3, [pc, #136]	; (8001160 <HAL_UART_RxCpltCallback+0xb0>)
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	2b30      	cmp	r3, #48	; 0x30
 80010dc:	d103      	bne.n	80010e6 <HAL_UART_RxCpltCallback+0x36>
 80010de:	4b21      	ldr	r3, [pc, #132]	; (8001164 <HAL_UART_RxCpltCallback+0xb4>)
 80010e0:	2230      	movs	r2, #48	; 0x30
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	e031      	b.n	800114a <HAL_UART_RxCpltCallback+0x9a>
		else if(RxBuffer[0]=='1')button = '1';
 80010e6:	4b1e      	ldr	r3, [pc, #120]	; (8001160 <HAL_UART_RxCpltCallback+0xb0>)
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	2b31      	cmp	r3, #49	; 0x31
 80010ec:	d103      	bne.n	80010f6 <HAL_UART_RxCpltCallback+0x46>
 80010ee:	4b1d      	ldr	r3, [pc, #116]	; (8001164 <HAL_UART_RxCpltCallback+0xb4>)
 80010f0:	2231      	movs	r2, #49	; 0x31
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	e029      	b.n	800114a <HAL_UART_RxCpltCallback+0x9a>
		else if(RxBuffer[0]=='a')button = 'a';
 80010f6:	4b1a      	ldr	r3, [pc, #104]	; (8001160 <HAL_UART_RxCpltCallback+0xb0>)
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	2b61      	cmp	r3, #97	; 0x61
 80010fc:	d103      	bne.n	8001106 <HAL_UART_RxCpltCallback+0x56>
 80010fe:	4b19      	ldr	r3, [pc, #100]	; (8001164 <HAL_UART_RxCpltCallback+0xb4>)
 8001100:	2261      	movs	r2, #97	; 0x61
 8001102:	601a      	str	r2, [r3, #0]
 8001104:	e021      	b.n	800114a <HAL_UART_RxCpltCallback+0x9a>
		else if(RxBuffer[0]=='s')button = 's';
 8001106:	4b16      	ldr	r3, [pc, #88]	; (8001160 <HAL_UART_RxCpltCallback+0xb0>)
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	2b73      	cmp	r3, #115	; 0x73
 800110c:	d103      	bne.n	8001116 <HAL_UART_RxCpltCallback+0x66>
 800110e:	4b15      	ldr	r3, [pc, #84]	; (8001164 <HAL_UART_RxCpltCallback+0xb4>)
 8001110:	2273      	movs	r2, #115	; 0x73
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	e019      	b.n	800114a <HAL_UART_RxCpltCallback+0x9a>
		else if(RxBuffer[0]=='d')
 8001116:	4b12      	ldr	r3, [pc, #72]	; (8001160 <HAL_UART_RxCpltCallback+0xb0>)
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	2b64      	cmp	r3, #100	; 0x64
 800111c:	d112      	bne.n	8001144 <HAL_UART_RxCpltCallback+0x94>
		{
			button = 'd';
 800111e:	4b11      	ldr	r3, [pc, #68]	; (8001164 <HAL_UART_RxCpltCallback+0xb4>)
 8001120:	2264      	movs	r2, #100	; 0x64
 8001122:	601a      	str	r2, [r3, #0]
			if (openclose == 1)
 8001124:	4b10      	ldr	r3, [pc, #64]	; (8001168 <HAL_UART_RxCpltCallback+0xb8>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	2b01      	cmp	r3, #1
 800112a:	d103      	bne.n	8001134 <HAL_UART_RxCpltCallback+0x84>
			{
				openclose = 0;
 800112c:	4b0e      	ldr	r3, [pc, #56]	; (8001168 <HAL_UART_RxCpltCallback+0xb8>)
 800112e:	2200      	movs	r2, #0
 8001130:	601a      	str	r2, [r3, #0]
 8001132:	e00a      	b.n	800114a <HAL_UART_RxCpltCallback+0x9a>
			}
			else if (openclose == 0)
 8001134:	4b0c      	ldr	r3, [pc, #48]	; (8001168 <HAL_UART_RxCpltCallback+0xb8>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d106      	bne.n	800114a <HAL_UART_RxCpltCallback+0x9a>
			{
				openclose = 1;
 800113c:	4b0a      	ldr	r3, [pc, #40]	; (8001168 <HAL_UART_RxCpltCallback+0xb8>)
 800113e:	2201      	movs	r2, #1
 8001140:	601a      	str	r2, [r3, #0]
 8001142:	e002      	b.n	800114a <HAL_UART_RxCpltCallback+0x9a>
			}
		}
		else button = 'z';
 8001144:	4b07      	ldr	r3, [pc, #28]	; (8001164 <HAL_UART_RxCpltCallback+0xb4>)
 8001146:	227a      	movs	r2, #122	; 0x7a
 8001148:	601a      	str	r2, [r3, #0]

		StateOpenLED(button);
 800114a:	4b06      	ldr	r3, [pc, #24]	; (8001164 <HAL_UART_RxCpltCallback+0xb4>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4618      	mov	r0, r3
 8001150:	f000 f80c 	bl	800116c <StateOpenLED>
	}
}
 8001154:	bf00      	nop
 8001156:	3708      	adds	r7, #8
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	20000098 	.word	0x20000098
 8001160:	200001a0 	.word	0x200001a0
 8001164:	200003fc 	.word	0x200003fc
 8001168:	20000008 	.word	0x20000008

0800116c <StateOpenLED>:

void StateOpenLED(state)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
	switch(state)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2b7a      	cmp	r3, #122	; 0x7a
 8001178:	f300 81f2 	bgt.w	8001560 <StateOpenLED+0x3f4>
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2b61      	cmp	r3, #97	; 0x61
 8001180:	da07      	bge.n	8001192 <StateOpenLED+0x26>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2b30      	cmp	r3, #48	; 0x30
 8001186:	d071      	beq.n	800126c <StateOpenLED+0x100>
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2b31      	cmp	r3, #49	; 0x31
 800118c:	f000 8096 	beq.w	80012bc <StateOpenLED+0x150>
			condition = 2;
			}
		}
		break;
	}
}
 8001190:	e1e6      	b.n	8001560 <StateOpenLED+0x3f4>
	switch(state)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	3b61      	subs	r3, #97	; 0x61
 8001196:	2b19      	cmp	r3, #25
 8001198:	f200 81e2 	bhi.w	8001560 <StateOpenLED+0x3f4>
 800119c:	a201      	add	r2, pc, #4	; (adr r2, 80011a4 <StateOpenLED+0x38>)
 800119e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011a2:	bf00      	nop
 80011a4:	080013a1 	.word	0x080013a1
 80011a8:	08001561 	.word	0x08001561
 80011ac:	08001561 	.word	0x08001561
 80011b0:	080014d1 	.word	0x080014d1
 80011b4:	08001561 	.word	0x08001561
 80011b8:	08001561 	.word	0x08001561
 80011bc:	08001561 	.word	0x08001561
 80011c0:	08001561 	.word	0x08001561
 80011c4:	08001561 	.word	0x08001561
 80011c8:	08001561 	.word	0x08001561
 80011cc:	08001561 	.word	0x08001561
 80011d0:	08001561 	.word	0x08001561
 80011d4:	08001561 	.word	0x08001561
 80011d8:	08001561 	.word	0x08001561
 80011dc:	08001561 	.word	0x08001561
 80011e0:	08001561 	.word	0x08001561
 80011e4:	08001561 	.word	0x08001561
 80011e8:	08001561 	.word	0x08001561
 80011ec:	08001401 	.word	0x08001401
 80011f0:	08001561 	.word	0x08001561
 80011f4:	08001561 	.word	0x08001561
 80011f8:	08001561 	.word	0x08001561
 80011fc:	08001561 	.word	0x08001561
 8001200:	0800120d 	.word	0x0800120d
 8001204:	08001561 	.word	0x08001561
 8001208:	0800135b 	.word	0x0800135b
			if (condition == 2 || condition == 1 || condition == 3)
 800120c:	4b8d      	ldr	r3, [pc, #564]	; (8001444 <StateOpenLED+0x2d8>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	2b02      	cmp	r3, #2
 8001212:	d007      	beq.n	8001224 <StateOpenLED+0xb8>
 8001214:	4b8b      	ldr	r3, [pc, #556]	; (8001444 <StateOpenLED+0x2d8>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	2b01      	cmp	r3, #1
 800121a:	d003      	beq.n	8001224 <StateOpenLED+0xb8>
 800121c:	4b89      	ldr	r3, [pc, #548]	; (8001444 <StateOpenLED+0x2d8>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	2b03      	cmp	r3, #3
 8001222:	d111      	bne.n	8001248 <StateOpenLED+0xdc>
			sprintf((char*)TxBuffer, "if Press 0 : LED Control\r\nif Press 1 : Button Status \r\n-----------------------\r\n");
 8001224:	4988      	ldr	r1, [pc, #544]	; (8001448 <StateOpenLED+0x2dc>)
 8001226:	4889      	ldr	r0, [pc, #548]	; (800144c <StateOpenLED+0x2e0>)
 8001228:	f003 f918 	bl	800445c <siprintf>
			HAL_UART_Transmit_DMA(&huart2, TxBuffer, strlen((char*)TxBuffer));
 800122c:	4887      	ldr	r0, [pc, #540]	; (800144c <StateOpenLED+0x2e0>)
 800122e:	f7fe ffd7 	bl	80001e0 <strlen>
 8001232:	4603      	mov	r3, r0
 8001234:	b29b      	uxth	r3, r3
 8001236:	461a      	mov	r2, r3
 8001238:	4984      	ldr	r1, [pc, #528]	; (800144c <StateOpenLED+0x2e0>)
 800123a:	4885      	ldr	r0, [pc, #532]	; (8001450 <StateOpenLED+0x2e4>)
 800123c:	f002 f85c 	bl	80032f8 <HAL_UART_Transmit_DMA>
			condition = 1;
 8001240:	4b80      	ldr	r3, [pc, #512]	; (8001444 <StateOpenLED+0x2d8>)
 8001242:	2201      	movs	r2, #1
 8001244:	601a      	str	r2, [r3, #0]
		break;
 8001246:	e18b      	b.n	8001560 <StateOpenLED+0x3f4>
			sprintf((char*)TxBuffer, "Press something again please\r\nplease press x for back\r\n-----------------------\r\n");
 8001248:	4982      	ldr	r1, [pc, #520]	; (8001454 <StateOpenLED+0x2e8>)
 800124a:	4880      	ldr	r0, [pc, #512]	; (800144c <StateOpenLED+0x2e0>)
 800124c:	f003 f906 	bl	800445c <siprintf>
			HAL_UART_Transmit_DMA(&huart2, TxBuffer, strlen((char*)TxBuffer));
 8001250:	487e      	ldr	r0, [pc, #504]	; (800144c <StateOpenLED+0x2e0>)
 8001252:	f7fe ffc5 	bl	80001e0 <strlen>
 8001256:	4603      	mov	r3, r0
 8001258:	b29b      	uxth	r3, r3
 800125a:	461a      	mov	r2, r3
 800125c:	497b      	ldr	r1, [pc, #492]	; (800144c <StateOpenLED+0x2e0>)
 800125e:	487c      	ldr	r0, [pc, #496]	; (8001450 <StateOpenLED+0x2e4>)
 8001260:	f002 f84a 	bl	80032f8 <HAL_UART_Transmit_DMA>
			condition = 2;
 8001264:	4b77      	ldr	r3, [pc, #476]	; (8001444 <StateOpenLED+0x2d8>)
 8001266:	2202      	movs	r2, #2
 8001268:	601a      	str	r2, [r3, #0]
		break;
 800126a:	e179      	b.n	8001560 <StateOpenLED+0x3f4>
			if (condition == 1)
 800126c:	4b75      	ldr	r3, [pc, #468]	; (8001444 <StateOpenLED+0x2d8>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	2b01      	cmp	r3, #1
 8001272:	d111      	bne.n	8001298 <StateOpenLED+0x12c>
			sprintf((char*)TxBuffer, "  ===== LED Control =====\r\nPress a : speed up +1 Hz \r\nPress s : speed down -1 Hz \r\nPress d : On/off \r\nPress x : back \r\n-----------------------\r\n");
 8001274:	4978      	ldr	r1, [pc, #480]	; (8001458 <StateOpenLED+0x2ec>)
 8001276:	4875      	ldr	r0, [pc, #468]	; (800144c <StateOpenLED+0x2e0>)
 8001278:	f003 f8f0 	bl	800445c <siprintf>
			HAL_UART_Transmit_DMA(&huart2, TxBuffer, strlen((char*)TxBuffer));
 800127c:	4873      	ldr	r0, [pc, #460]	; (800144c <StateOpenLED+0x2e0>)
 800127e:	f7fe ffaf 	bl	80001e0 <strlen>
 8001282:	4603      	mov	r3, r0
 8001284:	b29b      	uxth	r3, r3
 8001286:	461a      	mov	r2, r3
 8001288:	4970      	ldr	r1, [pc, #448]	; (800144c <StateOpenLED+0x2e0>)
 800128a:	4871      	ldr	r0, [pc, #452]	; (8001450 <StateOpenLED+0x2e4>)
 800128c:	f002 f834 	bl	80032f8 <HAL_UART_Transmit_DMA>
			condition = 2;
 8001290:	4b6c      	ldr	r3, [pc, #432]	; (8001444 <StateOpenLED+0x2d8>)
 8001292:	2202      	movs	r2, #2
 8001294:	601a      	str	r2, [r3, #0]
		break;
 8001296:	e163      	b.n	8001560 <StateOpenLED+0x3f4>
			sprintf((char*)TxBuffer, "Press something again please\r\nplease press x for back\r\n-----------------------\r\n");
 8001298:	496e      	ldr	r1, [pc, #440]	; (8001454 <StateOpenLED+0x2e8>)
 800129a:	486c      	ldr	r0, [pc, #432]	; (800144c <StateOpenLED+0x2e0>)
 800129c:	f003 f8de 	bl	800445c <siprintf>
			HAL_UART_Transmit_DMA(&huart2, TxBuffer, strlen((char*)TxBuffer));
 80012a0:	486a      	ldr	r0, [pc, #424]	; (800144c <StateOpenLED+0x2e0>)
 80012a2:	f7fe ff9d 	bl	80001e0 <strlen>
 80012a6:	4603      	mov	r3, r0
 80012a8:	b29b      	uxth	r3, r3
 80012aa:	461a      	mov	r2, r3
 80012ac:	4967      	ldr	r1, [pc, #412]	; (800144c <StateOpenLED+0x2e0>)
 80012ae:	4868      	ldr	r0, [pc, #416]	; (8001450 <StateOpenLED+0x2e4>)
 80012b0:	f002 f822 	bl	80032f8 <HAL_UART_Transmit_DMA>
			condition = 2;
 80012b4:	4b63      	ldr	r3, [pc, #396]	; (8001444 <StateOpenLED+0x2d8>)
 80012b6:	2202      	movs	r2, #2
 80012b8:	601a      	str	r2, [r3, #0]
		break;
 80012ba:	e151      	b.n	8001560 <StateOpenLED+0x3f4>
			if(condition == 1 || condition == 3 && statePin == 1)
 80012bc:	4b61      	ldr	r3, [pc, #388]	; (8001444 <StateOpenLED+0x2d8>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	d007      	beq.n	80012d4 <StateOpenLED+0x168>
 80012c4:	4b5f      	ldr	r3, [pc, #380]	; (8001444 <StateOpenLED+0x2d8>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	2b03      	cmp	r3, #3
 80012ca:	d115      	bne.n	80012f8 <StateOpenLED+0x18c>
 80012cc:	4b63      	ldr	r3, [pc, #396]	; (800145c <StateOpenLED+0x2f0>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	2b01      	cmp	r3, #1
 80012d2:	d111      	bne.n	80012f8 <StateOpenLED+0x18c>
			sprintf((char*)TxBuffer, "  ===== Button Status =====\r\nstate of blue button : unpress \r\nif Press x :back \r\n-----------------------\r\n");
 80012d4:	4962      	ldr	r1, [pc, #392]	; (8001460 <StateOpenLED+0x2f4>)
 80012d6:	485d      	ldr	r0, [pc, #372]	; (800144c <StateOpenLED+0x2e0>)
 80012d8:	f003 f8c0 	bl	800445c <siprintf>
			HAL_UART_Transmit_DMA(&huart2, TxBuffer, strlen((char*)TxBuffer));
 80012dc:	485b      	ldr	r0, [pc, #364]	; (800144c <StateOpenLED+0x2e0>)
 80012de:	f7fe ff7f 	bl	80001e0 <strlen>
 80012e2:	4603      	mov	r3, r0
 80012e4:	b29b      	uxth	r3, r3
 80012e6:	461a      	mov	r2, r3
 80012e8:	4958      	ldr	r1, [pc, #352]	; (800144c <StateOpenLED+0x2e0>)
 80012ea:	4859      	ldr	r0, [pc, #356]	; (8001450 <StateOpenLED+0x2e4>)
 80012ec:	f002 f804 	bl	80032f8 <HAL_UART_Transmit_DMA>
			condition = 3;
 80012f0:	4b54      	ldr	r3, [pc, #336]	; (8001444 <StateOpenLED+0x2d8>)
 80012f2:	2203      	movs	r2, #3
 80012f4:	601a      	str	r2, [r3, #0]
 80012f6:	e02f      	b.n	8001358 <StateOpenLED+0x1ec>
			else if(condition == 1 || condition == 3 && statePin == 0)
 80012f8:	4b52      	ldr	r3, [pc, #328]	; (8001444 <StateOpenLED+0x2d8>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	2b01      	cmp	r3, #1
 80012fe:	d007      	beq.n	8001310 <StateOpenLED+0x1a4>
 8001300:	4b50      	ldr	r3, [pc, #320]	; (8001444 <StateOpenLED+0x2d8>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	2b03      	cmp	r3, #3
 8001306:	d115      	bne.n	8001334 <StateOpenLED+0x1c8>
 8001308:	4b54      	ldr	r3, [pc, #336]	; (800145c <StateOpenLED+0x2f0>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d111      	bne.n	8001334 <StateOpenLED+0x1c8>
			sprintf((char*)TxBuffer, "state of blue button : press \r\nif Press x :back \r\n-----------------------\r\n");
 8001310:	4954      	ldr	r1, [pc, #336]	; (8001464 <StateOpenLED+0x2f8>)
 8001312:	484e      	ldr	r0, [pc, #312]	; (800144c <StateOpenLED+0x2e0>)
 8001314:	f003 f8a2 	bl	800445c <siprintf>
			HAL_UART_Transmit_DMA(&huart2, TxBuffer, strlen((char*)TxBuffer));
 8001318:	484c      	ldr	r0, [pc, #304]	; (800144c <StateOpenLED+0x2e0>)
 800131a:	f7fe ff61 	bl	80001e0 <strlen>
 800131e:	4603      	mov	r3, r0
 8001320:	b29b      	uxth	r3, r3
 8001322:	461a      	mov	r2, r3
 8001324:	4949      	ldr	r1, [pc, #292]	; (800144c <StateOpenLED+0x2e0>)
 8001326:	484a      	ldr	r0, [pc, #296]	; (8001450 <StateOpenLED+0x2e4>)
 8001328:	f001 ffe6 	bl	80032f8 <HAL_UART_Transmit_DMA>
			condition = 3;
 800132c:	4b45      	ldr	r3, [pc, #276]	; (8001444 <StateOpenLED+0x2d8>)
 800132e:	2203      	movs	r2, #3
 8001330:	601a      	str	r2, [r3, #0]
 8001332:	e011      	b.n	8001358 <StateOpenLED+0x1ec>
			sprintf((char*)TxBuffer, "Press something again please\r\nplease press x for back\r\n-----------------------\r\n");
 8001334:	4947      	ldr	r1, [pc, #284]	; (8001454 <StateOpenLED+0x2e8>)
 8001336:	4845      	ldr	r0, [pc, #276]	; (800144c <StateOpenLED+0x2e0>)
 8001338:	f003 f890 	bl	800445c <siprintf>
			HAL_UART_Transmit_DMA(&huart2, TxBuffer, strlen((char*)TxBuffer));
 800133c:	4843      	ldr	r0, [pc, #268]	; (800144c <StateOpenLED+0x2e0>)
 800133e:	f7fe ff4f 	bl	80001e0 <strlen>
 8001342:	4603      	mov	r3, r0
 8001344:	b29b      	uxth	r3, r3
 8001346:	461a      	mov	r2, r3
 8001348:	4940      	ldr	r1, [pc, #256]	; (800144c <StateOpenLED+0x2e0>)
 800134a:	4841      	ldr	r0, [pc, #260]	; (8001450 <StateOpenLED+0x2e4>)
 800134c:	f001 ffd4 	bl	80032f8 <HAL_UART_Transmit_DMA>
			condition = 2;
 8001350:	4b3c      	ldr	r3, [pc, #240]	; (8001444 <StateOpenLED+0x2d8>)
 8001352:	2202      	movs	r2, #2
 8001354:	601a      	str	r2, [r3, #0]
		break;
 8001356:	e103      	b.n	8001560 <StateOpenLED+0x3f4>
 8001358:	e102      	b.n	8001560 <StateOpenLED+0x3f4>
			if (condition == 1 ||condition == 0 ||condition == 2 ||condition == 3 )
 800135a:	4b3a      	ldr	r3, [pc, #232]	; (8001444 <StateOpenLED+0x2d8>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	2b01      	cmp	r3, #1
 8001360:	d00c      	beq.n	800137c <StateOpenLED+0x210>
 8001362:	4b38      	ldr	r3, [pc, #224]	; (8001444 <StateOpenLED+0x2d8>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d008      	beq.n	800137c <StateOpenLED+0x210>
 800136a:	4b36      	ldr	r3, [pc, #216]	; (8001444 <StateOpenLED+0x2d8>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	2b02      	cmp	r3, #2
 8001370:	d004      	beq.n	800137c <StateOpenLED+0x210>
 8001372:	4b34      	ldr	r3, [pc, #208]	; (8001444 <StateOpenLED+0x2d8>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	2b03      	cmp	r3, #3
 8001378:	f040 80f1 	bne.w	800155e <StateOpenLED+0x3f2>
			sprintf((char*)TxBuffer, "Press something again please\r\nplease press x for back\r\n-----------------------\r\n");
 800137c:	4935      	ldr	r1, [pc, #212]	; (8001454 <StateOpenLED+0x2e8>)
 800137e:	4833      	ldr	r0, [pc, #204]	; (800144c <StateOpenLED+0x2e0>)
 8001380:	f003 f86c 	bl	800445c <siprintf>
			HAL_UART_Transmit_DMA(&huart2, TxBuffer, strlen((char*)TxBuffer));
 8001384:	4831      	ldr	r0, [pc, #196]	; (800144c <StateOpenLED+0x2e0>)
 8001386:	f7fe ff2b 	bl	80001e0 <strlen>
 800138a:	4603      	mov	r3, r0
 800138c:	b29b      	uxth	r3, r3
 800138e:	461a      	mov	r2, r3
 8001390:	492e      	ldr	r1, [pc, #184]	; (800144c <StateOpenLED+0x2e0>)
 8001392:	482f      	ldr	r0, [pc, #188]	; (8001450 <StateOpenLED+0x2e4>)
 8001394:	f001 ffb0 	bl	80032f8 <HAL_UART_Transmit_DMA>
			condition = 2;
 8001398:	4b2a      	ldr	r3, [pc, #168]	; (8001444 <StateOpenLED+0x2d8>)
 800139a:	2202      	movs	r2, #2
 800139c:	601a      	str	r2, [r3, #0]
		break;
 800139e:	e0de      	b.n	800155e <StateOpenLED+0x3f2>
			if(condition == 2)
 80013a0:	4b28      	ldr	r3, [pc, #160]	; (8001444 <StateOpenLED+0x2d8>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	2b02      	cmp	r3, #2
 80013a6:	d119      	bne.n	80013dc <StateOpenLED+0x270>
			t_frequancy = t_frequancy + 1;
 80013a8:	4b2f      	ldr	r3, [pc, #188]	; (8001468 <StateOpenLED+0x2fc>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	3301      	adds	r3, #1
 80013ae:	4a2e      	ldr	r2, [pc, #184]	; (8001468 <StateOpenLED+0x2fc>)
 80013b0:	6013      	str	r3, [r2, #0]
			sprintf((char*)TxBuffer, "frequancy : %d Hz \r\n-----------------------\r\n", t_frequancy);
 80013b2:	4b2d      	ldr	r3, [pc, #180]	; (8001468 <StateOpenLED+0x2fc>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	461a      	mov	r2, r3
 80013b8:	492c      	ldr	r1, [pc, #176]	; (800146c <StateOpenLED+0x300>)
 80013ba:	4824      	ldr	r0, [pc, #144]	; (800144c <StateOpenLED+0x2e0>)
 80013bc:	f003 f84e 	bl	800445c <siprintf>
			HAL_UART_Transmit_DMA(&huart2, TxBuffer, strlen((char*)TxBuffer));
 80013c0:	4822      	ldr	r0, [pc, #136]	; (800144c <StateOpenLED+0x2e0>)
 80013c2:	f7fe ff0d 	bl	80001e0 <strlen>
 80013c6:	4603      	mov	r3, r0
 80013c8:	b29b      	uxth	r3, r3
 80013ca:	461a      	mov	r2, r3
 80013cc:	491f      	ldr	r1, [pc, #124]	; (800144c <StateOpenLED+0x2e0>)
 80013ce:	4820      	ldr	r0, [pc, #128]	; (8001450 <StateOpenLED+0x2e4>)
 80013d0:	f001 ff92 	bl	80032f8 <HAL_UART_Transmit_DMA>
			condition = 2;
 80013d4:	4b1b      	ldr	r3, [pc, #108]	; (8001444 <StateOpenLED+0x2d8>)
 80013d6:	2202      	movs	r2, #2
 80013d8:	601a      	str	r2, [r3, #0]
		break;
 80013da:	e0c1      	b.n	8001560 <StateOpenLED+0x3f4>
			sprintf((char*)TxBuffer, "Press something again please\r\nplease press x for back\r\n-----------------------\r\n");
 80013dc:	491d      	ldr	r1, [pc, #116]	; (8001454 <StateOpenLED+0x2e8>)
 80013de:	481b      	ldr	r0, [pc, #108]	; (800144c <StateOpenLED+0x2e0>)
 80013e0:	f003 f83c 	bl	800445c <siprintf>
			HAL_UART_Transmit_DMA(&huart2, TxBuffer, strlen((char*)TxBuffer));
 80013e4:	4819      	ldr	r0, [pc, #100]	; (800144c <StateOpenLED+0x2e0>)
 80013e6:	f7fe fefb 	bl	80001e0 <strlen>
 80013ea:	4603      	mov	r3, r0
 80013ec:	b29b      	uxth	r3, r3
 80013ee:	461a      	mov	r2, r3
 80013f0:	4916      	ldr	r1, [pc, #88]	; (800144c <StateOpenLED+0x2e0>)
 80013f2:	4817      	ldr	r0, [pc, #92]	; (8001450 <StateOpenLED+0x2e4>)
 80013f4:	f001 ff80 	bl	80032f8 <HAL_UART_Transmit_DMA>
			condition = 2;
 80013f8:	4b12      	ldr	r3, [pc, #72]	; (8001444 <StateOpenLED+0x2d8>)
 80013fa:	2202      	movs	r2, #2
 80013fc:	601a      	str	r2, [r3, #0]
		break;
 80013fe:	e0af      	b.n	8001560 <StateOpenLED+0x3f4>
			if(condition == 2 && t_frequancy >= 1)
 8001400:	4b10      	ldr	r3, [pc, #64]	; (8001444 <StateOpenLED+0x2d8>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	2b02      	cmp	r3, #2
 8001406:	d133      	bne.n	8001470 <StateOpenLED+0x304>
 8001408:	4b17      	ldr	r3, [pc, #92]	; (8001468 <StateOpenLED+0x2fc>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	2b00      	cmp	r3, #0
 800140e:	dd2f      	ble.n	8001470 <StateOpenLED+0x304>
			t_frequancy = t_frequancy - 1;
 8001410:	4b15      	ldr	r3, [pc, #84]	; (8001468 <StateOpenLED+0x2fc>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	3b01      	subs	r3, #1
 8001416:	4a14      	ldr	r2, [pc, #80]	; (8001468 <StateOpenLED+0x2fc>)
 8001418:	6013      	str	r3, [r2, #0]
			sprintf((char*)TxBuffer, "frequancy : %d Hz \r\n-----------------------\r\n", t_frequancy);
 800141a:	4b13      	ldr	r3, [pc, #76]	; (8001468 <StateOpenLED+0x2fc>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	461a      	mov	r2, r3
 8001420:	4912      	ldr	r1, [pc, #72]	; (800146c <StateOpenLED+0x300>)
 8001422:	480a      	ldr	r0, [pc, #40]	; (800144c <StateOpenLED+0x2e0>)
 8001424:	f003 f81a 	bl	800445c <siprintf>
			HAL_UART_Transmit_DMA(&huart2, TxBuffer, strlen((char*)TxBuffer));
 8001428:	4808      	ldr	r0, [pc, #32]	; (800144c <StateOpenLED+0x2e0>)
 800142a:	f7fe fed9 	bl	80001e0 <strlen>
 800142e:	4603      	mov	r3, r0
 8001430:	b29b      	uxth	r3, r3
 8001432:	461a      	mov	r2, r3
 8001434:	4905      	ldr	r1, [pc, #20]	; (800144c <StateOpenLED+0x2e0>)
 8001436:	4806      	ldr	r0, [pc, #24]	; (8001450 <StateOpenLED+0x2e4>)
 8001438:	f001 ff5e 	bl	80032f8 <HAL_UART_Transmit_DMA>
			condition = 2;
 800143c:	4b01      	ldr	r3, [pc, #4]	; (8001444 <StateOpenLED+0x2d8>)
 800143e:	2202      	movs	r2, #2
 8001440:	601a      	str	r2, [r3, #0]
 8001442:	e044      	b.n	80014ce <StateOpenLED+0x362>
 8001444:	20000004 	.word	0x20000004
 8001448:	08004d8c 	.word	0x08004d8c
 800144c:	20000204 	.word	0x20000204
 8001450:	20000098 	.word	0x20000098
 8001454:	08004de0 	.word	0x08004de0
 8001458:	08004e34 	.word	0x08004e34
 800145c:	200003f8 	.word	0x200003f8
 8001460:	08004ec8 	.word	0x08004ec8
 8001464:	08004f34 	.word	0x08004f34
 8001468:	20000000 	.word	0x20000000
 800146c:	08004f80 	.word	0x08004f80
			else if(condition == 2 && t_frequancy == 0)
 8001470:	4b3d      	ldr	r3, [pc, #244]	; (8001568 <StateOpenLED+0x3fc>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	2b02      	cmp	r3, #2
 8001476:	d118      	bne.n	80014aa <StateOpenLED+0x33e>
 8001478:	4b3c      	ldr	r3, [pc, #240]	; (800156c <StateOpenLED+0x400>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d114      	bne.n	80014aa <StateOpenLED+0x33e>
			t_frequancy = 0;
 8001480:	4b3a      	ldr	r3, [pc, #232]	; (800156c <StateOpenLED+0x400>)
 8001482:	2200      	movs	r2, #0
 8001484:	601a      	str	r2, [r3, #0]
			sprintf((char*)TxBuffer, "frequancy less than 0 Hz\r\nplease press a for speed up +1 Hz\r\n-----------------------\r\n");
 8001486:	493a      	ldr	r1, [pc, #232]	; (8001570 <StateOpenLED+0x404>)
 8001488:	483a      	ldr	r0, [pc, #232]	; (8001574 <StateOpenLED+0x408>)
 800148a:	f002 ffe7 	bl	800445c <siprintf>
			HAL_UART_Transmit_DMA(&huart2, TxBuffer, strlen((char*)TxBuffer));
 800148e:	4839      	ldr	r0, [pc, #228]	; (8001574 <StateOpenLED+0x408>)
 8001490:	f7fe fea6 	bl	80001e0 <strlen>
 8001494:	4603      	mov	r3, r0
 8001496:	b29b      	uxth	r3, r3
 8001498:	461a      	mov	r2, r3
 800149a:	4936      	ldr	r1, [pc, #216]	; (8001574 <StateOpenLED+0x408>)
 800149c:	4836      	ldr	r0, [pc, #216]	; (8001578 <StateOpenLED+0x40c>)
 800149e:	f001 ff2b 	bl	80032f8 <HAL_UART_Transmit_DMA>
			condition = 2;
 80014a2:	4b31      	ldr	r3, [pc, #196]	; (8001568 <StateOpenLED+0x3fc>)
 80014a4:	2202      	movs	r2, #2
 80014a6:	601a      	str	r2, [r3, #0]
 80014a8:	e011      	b.n	80014ce <StateOpenLED+0x362>
			sprintf((char*)TxBuffer, "Press something again please\r\nplease press x for back\r\n-----------------------\r\n");
 80014aa:	4934      	ldr	r1, [pc, #208]	; (800157c <StateOpenLED+0x410>)
 80014ac:	4831      	ldr	r0, [pc, #196]	; (8001574 <StateOpenLED+0x408>)
 80014ae:	f002 ffd5 	bl	800445c <siprintf>
			HAL_UART_Transmit_DMA(&huart2, TxBuffer, strlen((char*)TxBuffer));
 80014b2:	4830      	ldr	r0, [pc, #192]	; (8001574 <StateOpenLED+0x408>)
 80014b4:	f7fe fe94 	bl	80001e0 <strlen>
 80014b8:	4603      	mov	r3, r0
 80014ba:	b29b      	uxth	r3, r3
 80014bc:	461a      	mov	r2, r3
 80014be:	492d      	ldr	r1, [pc, #180]	; (8001574 <StateOpenLED+0x408>)
 80014c0:	482d      	ldr	r0, [pc, #180]	; (8001578 <StateOpenLED+0x40c>)
 80014c2:	f001 ff19 	bl	80032f8 <HAL_UART_Transmit_DMA>
			condition = 2;
 80014c6:	4b28      	ldr	r3, [pc, #160]	; (8001568 <StateOpenLED+0x3fc>)
 80014c8:	2202      	movs	r2, #2
 80014ca:	601a      	str	r2, [r3, #0]
		break;
 80014cc:	e048      	b.n	8001560 <StateOpenLED+0x3f4>
 80014ce:	e047      	b.n	8001560 <StateOpenLED+0x3f4>
			if(condition == 2 && openclose == 1)
 80014d0:	4b25      	ldr	r3, [pc, #148]	; (8001568 <StateOpenLED+0x3fc>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	2b02      	cmp	r3, #2
 80014d6:	d115      	bne.n	8001504 <StateOpenLED+0x398>
 80014d8:	4b29      	ldr	r3, [pc, #164]	; (8001580 <StateOpenLED+0x414>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d111      	bne.n	8001504 <StateOpenLED+0x398>
			sprintf((char*)TxBuffer, "open LED \r\n-----------------------\r\n");
 80014e0:	4928      	ldr	r1, [pc, #160]	; (8001584 <StateOpenLED+0x418>)
 80014e2:	4824      	ldr	r0, [pc, #144]	; (8001574 <StateOpenLED+0x408>)
 80014e4:	f002 ffba 	bl	800445c <siprintf>
			HAL_UART_Transmit_DMA(&huart2, TxBuffer, strlen((char*)TxBuffer));
 80014e8:	4822      	ldr	r0, [pc, #136]	; (8001574 <StateOpenLED+0x408>)
 80014ea:	f7fe fe79 	bl	80001e0 <strlen>
 80014ee:	4603      	mov	r3, r0
 80014f0:	b29b      	uxth	r3, r3
 80014f2:	461a      	mov	r2, r3
 80014f4:	491f      	ldr	r1, [pc, #124]	; (8001574 <StateOpenLED+0x408>)
 80014f6:	4820      	ldr	r0, [pc, #128]	; (8001578 <StateOpenLED+0x40c>)
 80014f8:	f001 fefe 	bl	80032f8 <HAL_UART_Transmit_DMA>
			condition = 2;
 80014fc:	4b1a      	ldr	r3, [pc, #104]	; (8001568 <StateOpenLED+0x3fc>)
 80014fe:	2202      	movs	r2, #2
 8001500:	601a      	str	r2, [r3, #0]
 8001502:	e02b      	b.n	800155c <StateOpenLED+0x3f0>
			else if(condition == 2 && openclose == 0)
 8001504:	4b18      	ldr	r3, [pc, #96]	; (8001568 <StateOpenLED+0x3fc>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	2b02      	cmp	r3, #2
 800150a:	d115      	bne.n	8001538 <StateOpenLED+0x3cc>
 800150c:	4b1c      	ldr	r3, [pc, #112]	; (8001580 <StateOpenLED+0x414>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d111      	bne.n	8001538 <StateOpenLED+0x3cc>
			sprintf((char*)TxBuffer, "close LED \r\nyou can press d for open LED \r\n-----------------------\r\n");
 8001514:	491c      	ldr	r1, [pc, #112]	; (8001588 <StateOpenLED+0x41c>)
 8001516:	4817      	ldr	r0, [pc, #92]	; (8001574 <StateOpenLED+0x408>)
 8001518:	f002 ffa0 	bl	800445c <siprintf>
			HAL_UART_Transmit_DMA(&huart2, TxBuffer, strlen((char*)TxBuffer));
 800151c:	4815      	ldr	r0, [pc, #84]	; (8001574 <StateOpenLED+0x408>)
 800151e:	f7fe fe5f 	bl	80001e0 <strlen>
 8001522:	4603      	mov	r3, r0
 8001524:	b29b      	uxth	r3, r3
 8001526:	461a      	mov	r2, r3
 8001528:	4912      	ldr	r1, [pc, #72]	; (8001574 <StateOpenLED+0x408>)
 800152a:	4813      	ldr	r0, [pc, #76]	; (8001578 <StateOpenLED+0x40c>)
 800152c:	f001 fee4 	bl	80032f8 <HAL_UART_Transmit_DMA>
			condition = 2;
 8001530:	4b0d      	ldr	r3, [pc, #52]	; (8001568 <StateOpenLED+0x3fc>)
 8001532:	2202      	movs	r2, #2
 8001534:	601a      	str	r2, [r3, #0]
 8001536:	e011      	b.n	800155c <StateOpenLED+0x3f0>
			sprintf((char*)TxBuffer, "Press something again please\r\nplease press x for back\r\n-----------------------\r\n");
 8001538:	4910      	ldr	r1, [pc, #64]	; (800157c <StateOpenLED+0x410>)
 800153a:	480e      	ldr	r0, [pc, #56]	; (8001574 <StateOpenLED+0x408>)
 800153c:	f002 ff8e 	bl	800445c <siprintf>
			HAL_UART_Transmit_DMA(&huart2, TxBuffer, strlen((char*)TxBuffer));
 8001540:	480c      	ldr	r0, [pc, #48]	; (8001574 <StateOpenLED+0x408>)
 8001542:	f7fe fe4d 	bl	80001e0 <strlen>
 8001546:	4603      	mov	r3, r0
 8001548:	b29b      	uxth	r3, r3
 800154a:	461a      	mov	r2, r3
 800154c:	4909      	ldr	r1, [pc, #36]	; (8001574 <StateOpenLED+0x408>)
 800154e:	480a      	ldr	r0, [pc, #40]	; (8001578 <StateOpenLED+0x40c>)
 8001550:	f001 fed2 	bl	80032f8 <HAL_UART_Transmit_DMA>
			condition = 2;
 8001554:	4b04      	ldr	r3, [pc, #16]	; (8001568 <StateOpenLED+0x3fc>)
 8001556:	2202      	movs	r2, #2
 8001558:	601a      	str	r2, [r3, #0]
		break;
 800155a:	e001      	b.n	8001560 <StateOpenLED+0x3f4>
 800155c:	e000      	b.n	8001560 <StateOpenLED+0x3f4>
		break;
 800155e:	bf00      	nop
}
 8001560:	bf00      	nop
 8001562:	3708      	adds	r7, #8
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	20000004 	.word	0x20000004
 800156c:	20000000 	.word	0x20000000
 8001570:	08004fb0 	.word	0x08004fb0
 8001574:	20000204 	.word	0x20000204
 8001578:	20000098 	.word	0x20000098
 800157c:	08004de0 	.word	0x08004de0
 8001580:	20000008 	.word	0x20000008
 8001584:	08005008 	.word	0x08005008
 8001588:	08005030 	.word	0x08005030

0800158c <DummyTask>:

void DummyTask()
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
	static uint32_t timestamp = 0;
	if(HAL_GetTick()>=timestamp)
 8001590:	f000 fa4a 	bl	8001a28 <HAL_GetTick>
 8001594:	4602      	mov	r2, r0
 8001596:	4b1c      	ldr	r3, [pc, #112]	; (8001608 <DummyTask+0x7c>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	429a      	cmp	r2, r3
 800159c:	d332      	bcc.n	8001604 <DummyTask+0x78>
	{
		millisec = (1.0/t_frequancy)*1000;
 800159e:	4b1b      	ldr	r3, [pc, #108]	; (800160c <DummyTask+0x80>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4618      	mov	r0, r3
 80015a4:	f7fe ffc6 	bl	8000534 <__aeabi_i2d>
 80015a8:	4602      	mov	r2, r0
 80015aa:	460b      	mov	r3, r1
 80015ac:	f04f 0000 	mov.w	r0, #0
 80015b0:	4917      	ldr	r1, [pc, #92]	; (8001610 <DummyTask+0x84>)
 80015b2:	f7ff f953 	bl	800085c <__aeabi_ddiv>
 80015b6:	4602      	mov	r2, r0
 80015b8:	460b      	mov	r3, r1
 80015ba:	4610      	mov	r0, r2
 80015bc:	4619      	mov	r1, r3
 80015be:	f04f 0200 	mov.w	r2, #0
 80015c2:	4b14      	ldr	r3, [pc, #80]	; (8001614 <DummyTask+0x88>)
 80015c4:	f7ff f820 	bl	8000608 <__aeabi_dmul>
 80015c8:	4602      	mov	r2, r0
 80015ca:	460b      	mov	r3, r1
 80015cc:	4610      	mov	r0, r2
 80015ce:	4619      	mov	r1, r3
 80015d0:	f7ff fa2c 	bl	8000a2c <__aeabi_d2f>
 80015d4:	4603      	mov	r3, r0
 80015d6:	4a10      	ldr	r2, [pc, #64]	; (8001618 <DummyTask+0x8c>)
 80015d8:	6013      	str	r3, [r2, #0]
		timestamp = HAL_GetTick()+ millisec;
 80015da:	f000 fa25 	bl	8001a28 <HAL_GetTick>
 80015de:	ee07 0a90 	vmov	s15, r0
 80015e2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80015e6:	4b0c      	ldr	r3, [pc, #48]	; (8001618 <DummyTask+0x8c>)
 80015e8:	edd3 7a00 	vldr	s15, [r3]
 80015ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015f4:	ee17 2a90 	vmov	r2, s15
 80015f8:	4b03      	ldr	r3, [pc, #12]	; (8001608 <DummyTask+0x7c>)
 80015fa:	601a      	str	r2, [r3, #0]
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80015fc:	2120      	movs	r1, #32
 80015fe:	4807      	ldr	r0, [pc, #28]	; (800161c <DummyTask+0x90>)
 8001600:	f001 f8e7 	bl	80027d2 <HAL_GPIO_TogglePin>
	}
}
 8001604:	bf00      	nop
 8001606:	bd80      	pop	{r7, pc}
 8001608:	20000400 	.word	0x20000400
 800160c:	20000000 	.word	0x20000000
 8001610:	3ff00000 	.word	0x3ff00000
 8001614:	408f4000 	.word	0x408f4000
 8001618:	2000019c 	.word	0x2000019c
 800161c:	40020000 	.word	0x40020000

08001620 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001624:	b672      	cpsid	i
}
 8001626:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001628:	e7fe      	b.n	8001628 <Error_Handler+0x8>
	...

0800162c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001632:	2300      	movs	r3, #0
 8001634:	607b      	str	r3, [r7, #4]
 8001636:	4b10      	ldr	r3, [pc, #64]	; (8001678 <HAL_MspInit+0x4c>)
 8001638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800163a:	4a0f      	ldr	r2, [pc, #60]	; (8001678 <HAL_MspInit+0x4c>)
 800163c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001640:	6453      	str	r3, [r2, #68]	; 0x44
 8001642:	4b0d      	ldr	r3, [pc, #52]	; (8001678 <HAL_MspInit+0x4c>)
 8001644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001646:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800164a:	607b      	str	r3, [r7, #4]
 800164c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800164e:	2300      	movs	r3, #0
 8001650:	603b      	str	r3, [r7, #0]
 8001652:	4b09      	ldr	r3, [pc, #36]	; (8001678 <HAL_MspInit+0x4c>)
 8001654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001656:	4a08      	ldr	r2, [pc, #32]	; (8001678 <HAL_MspInit+0x4c>)
 8001658:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800165c:	6413      	str	r3, [r2, #64]	; 0x40
 800165e:	4b06      	ldr	r3, [pc, #24]	; (8001678 <HAL_MspInit+0x4c>)
 8001660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001666:	603b      	str	r3, [r7, #0]
 8001668:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800166a:	2007      	movs	r0, #7
 800166c:	f000 fab8 	bl	8001be0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001670:	bf00      	nop
 8001672:	3708      	adds	r7, #8
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	40023800 	.word	0x40023800

0800167c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b08a      	sub	sp, #40	; 0x28
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001684:	f107 0314 	add.w	r3, r7, #20
 8001688:	2200      	movs	r2, #0
 800168a:	601a      	str	r2, [r3, #0]
 800168c:	605a      	str	r2, [r3, #4]
 800168e:	609a      	str	r2, [r3, #8]
 8001690:	60da      	str	r2, [r3, #12]
 8001692:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a4c      	ldr	r2, [pc, #304]	; (80017cc <HAL_UART_MspInit+0x150>)
 800169a:	4293      	cmp	r3, r2
 800169c:	f040 8091 	bne.w	80017c2 <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016a0:	2300      	movs	r3, #0
 80016a2:	613b      	str	r3, [r7, #16]
 80016a4:	4b4a      	ldr	r3, [pc, #296]	; (80017d0 <HAL_UART_MspInit+0x154>)
 80016a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a8:	4a49      	ldr	r2, [pc, #292]	; (80017d0 <HAL_UART_MspInit+0x154>)
 80016aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016ae:	6413      	str	r3, [r2, #64]	; 0x40
 80016b0:	4b47      	ldr	r3, [pc, #284]	; (80017d0 <HAL_UART_MspInit+0x154>)
 80016b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016b8:	613b      	str	r3, [r7, #16]
 80016ba:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016bc:	2300      	movs	r3, #0
 80016be:	60fb      	str	r3, [r7, #12]
 80016c0:	4b43      	ldr	r3, [pc, #268]	; (80017d0 <HAL_UART_MspInit+0x154>)
 80016c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c4:	4a42      	ldr	r2, [pc, #264]	; (80017d0 <HAL_UART_MspInit+0x154>)
 80016c6:	f043 0301 	orr.w	r3, r3, #1
 80016ca:	6313      	str	r3, [r2, #48]	; 0x30
 80016cc:	4b40      	ldr	r3, [pc, #256]	; (80017d0 <HAL_UART_MspInit+0x154>)
 80016ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d0:	f003 0301 	and.w	r3, r3, #1
 80016d4:	60fb      	str	r3, [r7, #12]
 80016d6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80016d8:	230c      	movs	r3, #12
 80016da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016dc:	2302      	movs	r3, #2
 80016de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e0:	2300      	movs	r3, #0
 80016e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016e4:	2303      	movs	r3, #3
 80016e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016e8:	2307      	movs	r3, #7
 80016ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ec:	f107 0314 	add.w	r3, r7, #20
 80016f0:	4619      	mov	r1, r3
 80016f2:	4838      	ldr	r0, [pc, #224]	; (80017d4 <HAL_UART_MspInit+0x158>)
 80016f4:	f000 feb8 	bl	8002468 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80016f8:	4b37      	ldr	r3, [pc, #220]	; (80017d8 <HAL_UART_MspInit+0x15c>)
 80016fa:	4a38      	ldr	r2, [pc, #224]	; (80017dc <HAL_UART_MspInit+0x160>)
 80016fc:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80016fe:	4b36      	ldr	r3, [pc, #216]	; (80017d8 <HAL_UART_MspInit+0x15c>)
 8001700:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001704:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001706:	4b34      	ldr	r3, [pc, #208]	; (80017d8 <HAL_UART_MspInit+0x15c>)
 8001708:	2200      	movs	r2, #0
 800170a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800170c:	4b32      	ldr	r3, [pc, #200]	; (80017d8 <HAL_UART_MspInit+0x15c>)
 800170e:	2200      	movs	r2, #0
 8001710:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001712:	4b31      	ldr	r3, [pc, #196]	; (80017d8 <HAL_UART_MspInit+0x15c>)
 8001714:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001718:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800171a:	4b2f      	ldr	r3, [pc, #188]	; (80017d8 <HAL_UART_MspInit+0x15c>)
 800171c:	2200      	movs	r2, #0
 800171e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001720:	4b2d      	ldr	r3, [pc, #180]	; (80017d8 <HAL_UART_MspInit+0x15c>)
 8001722:	2200      	movs	r2, #0
 8001724:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001726:	4b2c      	ldr	r3, [pc, #176]	; (80017d8 <HAL_UART_MspInit+0x15c>)
 8001728:	f44f 7280 	mov.w	r2, #256	; 0x100
 800172c:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800172e:	4b2a      	ldr	r3, [pc, #168]	; (80017d8 <HAL_UART_MspInit+0x15c>)
 8001730:	2200      	movs	r2, #0
 8001732:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001734:	4b28      	ldr	r3, [pc, #160]	; (80017d8 <HAL_UART_MspInit+0x15c>)
 8001736:	2200      	movs	r2, #0
 8001738:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800173a:	4827      	ldr	r0, [pc, #156]	; (80017d8 <HAL_UART_MspInit+0x15c>)
 800173c:	f000 fa92 	bl	8001c64 <HAL_DMA_Init>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8001746:	f7ff ff6b 	bl	8001620 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4a22      	ldr	r2, [pc, #136]	; (80017d8 <HAL_UART_MspInit+0x15c>)
 800174e:	639a      	str	r2, [r3, #56]	; 0x38
 8001750:	4a21      	ldr	r2, [pc, #132]	; (80017d8 <HAL_UART_MspInit+0x15c>)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001756:	4b22      	ldr	r3, [pc, #136]	; (80017e0 <HAL_UART_MspInit+0x164>)
 8001758:	4a22      	ldr	r2, [pc, #136]	; (80017e4 <HAL_UART_MspInit+0x168>)
 800175a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800175c:	4b20      	ldr	r3, [pc, #128]	; (80017e0 <HAL_UART_MspInit+0x164>)
 800175e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001762:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001764:	4b1e      	ldr	r3, [pc, #120]	; (80017e0 <HAL_UART_MspInit+0x164>)
 8001766:	2240      	movs	r2, #64	; 0x40
 8001768:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800176a:	4b1d      	ldr	r3, [pc, #116]	; (80017e0 <HAL_UART_MspInit+0x164>)
 800176c:	2200      	movs	r2, #0
 800176e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001770:	4b1b      	ldr	r3, [pc, #108]	; (80017e0 <HAL_UART_MspInit+0x164>)
 8001772:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001776:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001778:	4b19      	ldr	r3, [pc, #100]	; (80017e0 <HAL_UART_MspInit+0x164>)
 800177a:	2200      	movs	r2, #0
 800177c:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800177e:	4b18      	ldr	r3, [pc, #96]	; (80017e0 <HAL_UART_MspInit+0x164>)
 8001780:	2200      	movs	r2, #0
 8001782:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001784:	4b16      	ldr	r3, [pc, #88]	; (80017e0 <HAL_UART_MspInit+0x164>)
 8001786:	2200      	movs	r2, #0
 8001788:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800178a:	4b15      	ldr	r3, [pc, #84]	; (80017e0 <HAL_UART_MspInit+0x164>)
 800178c:	2200      	movs	r2, #0
 800178e:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001790:	4b13      	ldr	r3, [pc, #76]	; (80017e0 <HAL_UART_MspInit+0x164>)
 8001792:	2200      	movs	r2, #0
 8001794:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001796:	4812      	ldr	r0, [pc, #72]	; (80017e0 <HAL_UART_MspInit+0x164>)
 8001798:	f000 fa64 	bl	8001c64 <HAL_DMA_Init>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 80017a2:	f7ff ff3d 	bl	8001620 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4a0d      	ldr	r2, [pc, #52]	; (80017e0 <HAL_UART_MspInit+0x164>)
 80017aa:	635a      	str	r2, [r3, #52]	; 0x34
 80017ac:	4a0c      	ldr	r2, [pc, #48]	; (80017e0 <HAL_UART_MspInit+0x164>)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80017b2:	2200      	movs	r2, #0
 80017b4:	2100      	movs	r1, #0
 80017b6:	2026      	movs	r0, #38	; 0x26
 80017b8:	f000 fa1d 	bl	8001bf6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80017bc:	2026      	movs	r0, #38	; 0x26
 80017be:	f000 fa36 	bl	8001c2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80017c2:	bf00      	nop
 80017c4:	3728      	adds	r7, #40	; 0x28
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	40004400 	.word	0x40004400
 80017d0:	40023800 	.word	0x40023800
 80017d4:	40020000 	.word	0x40020000
 80017d8:	200000dc 	.word	0x200000dc
 80017dc:	40026088 	.word	0x40026088
 80017e0:	2000013c 	.word	0x2000013c
 80017e4:	400260a0 	.word	0x400260a0

080017e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017ec:	e7fe      	b.n	80017ec <NMI_Handler+0x4>

080017ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017ee:	b480      	push	{r7}
 80017f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017f2:	e7fe      	b.n	80017f2 <HardFault_Handler+0x4>

080017f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017f8:	e7fe      	b.n	80017f8 <MemManage_Handler+0x4>

080017fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017fa:	b480      	push	{r7}
 80017fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017fe:	e7fe      	b.n	80017fe <BusFault_Handler+0x4>

08001800 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001804:	e7fe      	b.n	8001804 <UsageFault_Handler+0x4>

08001806 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001806:	b480      	push	{r7}
 8001808:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800180a:	bf00      	nop
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr

08001814 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001818:	bf00      	nop
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr

08001822 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001822:	b480      	push	{r7}
 8001824:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001826:	bf00      	nop
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr

08001830 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001834:	f000 f8e4 	bl	8001a00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001838:	bf00      	nop
 800183a:	bd80      	pop	{r7, pc}

0800183c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001840:	4802      	ldr	r0, [pc, #8]	; (800184c <DMA1_Stream5_IRQHandler+0x10>)
 8001842:	f000 fba7 	bl	8001f94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001846:	bf00      	nop
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	200000dc 	.word	0x200000dc

08001850 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001854:	4802      	ldr	r0, [pc, #8]	; (8001860 <DMA1_Stream6_IRQHandler+0x10>)
 8001856:	f000 fb9d 	bl	8001f94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800185a:	bf00      	nop
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	2000013c 	.word	0x2000013c

08001864 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001868:	4802      	ldr	r0, [pc, #8]	; (8001874 <USART2_IRQHandler+0x10>)
 800186a:	f001 fdc3 	bl	80033f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800186e:	bf00      	nop
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	20000098 	.word	0x20000098

08001878 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b086      	sub	sp, #24
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001880:	4a14      	ldr	r2, [pc, #80]	; (80018d4 <_sbrk+0x5c>)
 8001882:	4b15      	ldr	r3, [pc, #84]	; (80018d8 <_sbrk+0x60>)
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800188c:	4b13      	ldr	r3, [pc, #76]	; (80018dc <_sbrk+0x64>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d102      	bne.n	800189a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001894:	4b11      	ldr	r3, [pc, #68]	; (80018dc <_sbrk+0x64>)
 8001896:	4a12      	ldr	r2, [pc, #72]	; (80018e0 <_sbrk+0x68>)
 8001898:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800189a:	4b10      	ldr	r3, [pc, #64]	; (80018dc <_sbrk+0x64>)
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4413      	add	r3, r2
 80018a2:	693a      	ldr	r2, [r7, #16]
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d207      	bcs.n	80018b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018a8:	f002 fda6 	bl	80043f8 <__errno>
 80018ac:	4603      	mov	r3, r0
 80018ae:	220c      	movs	r2, #12
 80018b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018b2:	f04f 33ff 	mov.w	r3, #4294967295
 80018b6:	e009      	b.n	80018cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018b8:	4b08      	ldr	r3, [pc, #32]	; (80018dc <_sbrk+0x64>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018be:	4b07      	ldr	r3, [pc, #28]	; (80018dc <_sbrk+0x64>)
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	4413      	add	r3, r2
 80018c6:	4a05      	ldr	r2, [pc, #20]	; (80018dc <_sbrk+0x64>)
 80018c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018ca:	68fb      	ldr	r3, [r7, #12]
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3718      	adds	r7, #24
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	20020000 	.word	0x20020000
 80018d8:	00000400 	.word	0x00000400
 80018dc:	20000404 	.word	0x20000404
 80018e0:	20000420 	.word	0x20000420

080018e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018e8:	4b06      	ldr	r3, [pc, #24]	; (8001904 <SystemInit+0x20>)
 80018ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018ee:	4a05      	ldr	r2, [pc, #20]	; (8001904 <SystemInit+0x20>)
 80018f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018f8:	bf00      	nop
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	e000ed00 	.word	0xe000ed00

08001908 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001908:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001940 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800190c:	480d      	ldr	r0, [pc, #52]	; (8001944 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800190e:	490e      	ldr	r1, [pc, #56]	; (8001948 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001910:	4a0e      	ldr	r2, [pc, #56]	; (800194c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001912:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001914:	e002      	b.n	800191c <LoopCopyDataInit>

08001916 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001916:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001918:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800191a:	3304      	adds	r3, #4

0800191c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800191c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800191e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001920:	d3f9      	bcc.n	8001916 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001922:	4a0b      	ldr	r2, [pc, #44]	; (8001950 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001924:	4c0b      	ldr	r4, [pc, #44]	; (8001954 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001926:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001928:	e001      	b.n	800192e <LoopFillZerobss>

0800192a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800192a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800192c:	3204      	adds	r2, #4

0800192e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800192e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001930:	d3fb      	bcc.n	800192a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001932:	f7ff ffd7 	bl	80018e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001936:	f002 fd65 	bl	8004404 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800193a:	f7ff fa49 	bl	8000dd0 <main>
  bx  lr    
 800193e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001940:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001944:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001948:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 800194c:	080050dc 	.word	0x080050dc
  ldr r2, =_sbss
 8001950:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001954:	2000041c 	.word	0x2000041c

08001958 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001958:	e7fe      	b.n	8001958 <ADC_IRQHandler>
	...

0800195c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001960:	4b0e      	ldr	r3, [pc, #56]	; (800199c <HAL_Init+0x40>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a0d      	ldr	r2, [pc, #52]	; (800199c <HAL_Init+0x40>)
 8001966:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800196a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800196c:	4b0b      	ldr	r3, [pc, #44]	; (800199c <HAL_Init+0x40>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a0a      	ldr	r2, [pc, #40]	; (800199c <HAL_Init+0x40>)
 8001972:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001976:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001978:	4b08      	ldr	r3, [pc, #32]	; (800199c <HAL_Init+0x40>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a07      	ldr	r2, [pc, #28]	; (800199c <HAL_Init+0x40>)
 800197e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001982:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001984:	2003      	movs	r0, #3
 8001986:	f000 f92b 	bl	8001be0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800198a:	2000      	movs	r0, #0
 800198c:	f000 f808 	bl	80019a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001990:	f7ff fe4c 	bl	800162c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001994:	2300      	movs	r3, #0
}
 8001996:	4618      	mov	r0, r3
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	40023c00 	.word	0x40023c00

080019a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019a8:	4b12      	ldr	r3, [pc, #72]	; (80019f4 <HAL_InitTick+0x54>)
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	4b12      	ldr	r3, [pc, #72]	; (80019f8 <HAL_InitTick+0x58>)
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	4619      	mov	r1, r3
 80019b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80019ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80019be:	4618      	mov	r0, r3
 80019c0:	f000 f943 	bl	8001c4a <HAL_SYSTICK_Config>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e00e      	b.n	80019ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2b0f      	cmp	r3, #15
 80019d2:	d80a      	bhi.n	80019ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019d4:	2200      	movs	r2, #0
 80019d6:	6879      	ldr	r1, [r7, #4]
 80019d8:	f04f 30ff 	mov.w	r0, #4294967295
 80019dc:	f000 f90b 	bl	8001bf6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019e0:	4a06      	ldr	r2, [pc, #24]	; (80019fc <HAL_InitTick+0x5c>)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019e6:	2300      	movs	r3, #0
 80019e8:	e000      	b.n	80019ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3708      	adds	r7, #8
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	2000000c 	.word	0x2000000c
 80019f8:	20000014 	.word	0x20000014
 80019fc:	20000010 	.word	0x20000010

08001a00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a04:	4b06      	ldr	r3, [pc, #24]	; (8001a20 <HAL_IncTick+0x20>)
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	461a      	mov	r2, r3
 8001a0a:	4b06      	ldr	r3, [pc, #24]	; (8001a24 <HAL_IncTick+0x24>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4413      	add	r3, r2
 8001a10:	4a04      	ldr	r2, [pc, #16]	; (8001a24 <HAL_IncTick+0x24>)
 8001a12:	6013      	str	r3, [r2, #0]
}
 8001a14:	bf00      	nop
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop
 8001a20:	20000014 	.word	0x20000014
 8001a24:	20000408 	.word	0x20000408

08001a28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a2c:	4b03      	ldr	r3, [pc, #12]	; (8001a3c <HAL_GetTick+0x14>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	20000408 	.word	0x20000408

08001a40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b085      	sub	sp, #20
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	f003 0307 	and.w	r3, r3, #7
 8001a4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a50:	4b0c      	ldr	r3, [pc, #48]	; (8001a84 <__NVIC_SetPriorityGrouping+0x44>)
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a56:	68ba      	ldr	r2, [r7, #8]
 8001a58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a72:	4a04      	ldr	r2, [pc, #16]	; (8001a84 <__NVIC_SetPriorityGrouping+0x44>)
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	60d3      	str	r3, [r2, #12]
}
 8001a78:	bf00      	nop
 8001a7a:	3714      	adds	r7, #20
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr
 8001a84:	e000ed00 	.word	0xe000ed00

08001a88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a8c:	4b04      	ldr	r3, [pc, #16]	; (8001aa0 <__NVIC_GetPriorityGrouping+0x18>)
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	0a1b      	lsrs	r3, r3, #8
 8001a92:	f003 0307 	and.w	r3, r3, #7
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr
 8001aa0:	e000ed00 	.word	0xe000ed00

08001aa4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	4603      	mov	r3, r0
 8001aac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	db0b      	blt.n	8001ace <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ab6:	79fb      	ldrb	r3, [r7, #7]
 8001ab8:	f003 021f 	and.w	r2, r3, #31
 8001abc:	4907      	ldr	r1, [pc, #28]	; (8001adc <__NVIC_EnableIRQ+0x38>)
 8001abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac2:	095b      	lsrs	r3, r3, #5
 8001ac4:	2001      	movs	r0, #1
 8001ac6:	fa00 f202 	lsl.w	r2, r0, r2
 8001aca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ace:	bf00      	nop
 8001ad0:	370c      	adds	r7, #12
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop
 8001adc:	e000e100 	.word	0xe000e100

08001ae0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b083      	sub	sp, #12
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	6039      	str	r1, [r7, #0]
 8001aea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	db0a      	blt.n	8001b0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	b2da      	uxtb	r2, r3
 8001af8:	490c      	ldr	r1, [pc, #48]	; (8001b2c <__NVIC_SetPriority+0x4c>)
 8001afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001afe:	0112      	lsls	r2, r2, #4
 8001b00:	b2d2      	uxtb	r2, r2
 8001b02:	440b      	add	r3, r1
 8001b04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b08:	e00a      	b.n	8001b20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	b2da      	uxtb	r2, r3
 8001b0e:	4908      	ldr	r1, [pc, #32]	; (8001b30 <__NVIC_SetPriority+0x50>)
 8001b10:	79fb      	ldrb	r3, [r7, #7]
 8001b12:	f003 030f 	and.w	r3, r3, #15
 8001b16:	3b04      	subs	r3, #4
 8001b18:	0112      	lsls	r2, r2, #4
 8001b1a:	b2d2      	uxtb	r2, r2
 8001b1c:	440b      	add	r3, r1
 8001b1e:	761a      	strb	r2, [r3, #24]
}
 8001b20:	bf00      	nop
 8001b22:	370c      	adds	r7, #12
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr
 8001b2c:	e000e100 	.word	0xe000e100
 8001b30:	e000ed00 	.word	0xe000ed00

08001b34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b089      	sub	sp, #36	; 0x24
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	60f8      	str	r0, [r7, #12]
 8001b3c:	60b9      	str	r1, [r7, #8]
 8001b3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	f003 0307 	and.w	r3, r3, #7
 8001b46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b48:	69fb      	ldr	r3, [r7, #28]
 8001b4a:	f1c3 0307 	rsb	r3, r3, #7
 8001b4e:	2b04      	cmp	r3, #4
 8001b50:	bf28      	it	cs
 8001b52:	2304      	movcs	r3, #4
 8001b54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b56:	69fb      	ldr	r3, [r7, #28]
 8001b58:	3304      	adds	r3, #4
 8001b5a:	2b06      	cmp	r3, #6
 8001b5c:	d902      	bls.n	8001b64 <NVIC_EncodePriority+0x30>
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	3b03      	subs	r3, #3
 8001b62:	e000      	b.n	8001b66 <NVIC_EncodePriority+0x32>
 8001b64:	2300      	movs	r3, #0
 8001b66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b68:	f04f 32ff 	mov.w	r2, #4294967295
 8001b6c:	69bb      	ldr	r3, [r7, #24]
 8001b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b72:	43da      	mvns	r2, r3
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	401a      	ands	r2, r3
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b7c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	fa01 f303 	lsl.w	r3, r1, r3
 8001b86:	43d9      	mvns	r1, r3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b8c:	4313      	orrs	r3, r2
         );
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3724      	adds	r7, #36	; 0x24
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
	...

08001b9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	3b01      	subs	r3, #1
 8001ba8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bac:	d301      	bcc.n	8001bb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e00f      	b.n	8001bd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bb2:	4a0a      	ldr	r2, [pc, #40]	; (8001bdc <SysTick_Config+0x40>)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	3b01      	subs	r3, #1
 8001bb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bba:	210f      	movs	r1, #15
 8001bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8001bc0:	f7ff ff8e 	bl	8001ae0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bc4:	4b05      	ldr	r3, [pc, #20]	; (8001bdc <SysTick_Config+0x40>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bca:	4b04      	ldr	r3, [pc, #16]	; (8001bdc <SysTick_Config+0x40>)
 8001bcc:	2207      	movs	r2, #7
 8001bce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bd0:	2300      	movs	r3, #0
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3708      	adds	r7, #8
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	e000e010 	.word	0xe000e010

08001be0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f7ff ff29 	bl	8001a40 <__NVIC_SetPriorityGrouping>
}
 8001bee:	bf00      	nop
 8001bf0:	3708      	adds	r7, #8
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}

08001bf6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bf6:	b580      	push	{r7, lr}
 8001bf8:	b086      	sub	sp, #24
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	60b9      	str	r1, [r7, #8]
 8001c00:	607a      	str	r2, [r7, #4]
 8001c02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c04:	2300      	movs	r3, #0
 8001c06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c08:	f7ff ff3e 	bl	8001a88 <__NVIC_GetPriorityGrouping>
 8001c0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c0e:	687a      	ldr	r2, [r7, #4]
 8001c10:	68b9      	ldr	r1, [r7, #8]
 8001c12:	6978      	ldr	r0, [r7, #20]
 8001c14:	f7ff ff8e 	bl	8001b34 <NVIC_EncodePriority>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c1e:	4611      	mov	r1, r2
 8001c20:	4618      	mov	r0, r3
 8001c22:	f7ff ff5d 	bl	8001ae0 <__NVIC_SetPriority>
}
 8001c26:	bf00      	nop
 8001c28:	3718      	adds	r7, #24
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}

08001c2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c2e:	b580      	push	{r7, lr}
 8001c30:	b082      	sub	sp, #8
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	4603      	mov	r3, r0
 8001c36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f7ff ff31 	bl	8001aa4 <__NVIC_EnableIRQ>
}
 8001c42:	bf00      	nop
 8001c44:	3708      	adds	r7, #8
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}

08001c4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c4a:	b580      	push	{r7, lr}
 8001c4c:	b082      	sub	sp, #8
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f7ff ffa2 	bl	8001b9c <SysTick_Config>
 8001c58:	4603      	mov	r3, r0
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3708      	adds	r7, #8
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
	...

08001c64 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b086      	sub	sp, #24
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001c70:	f7ff feda 	bl	8001a28 <HAL_GetTick>
 8001c74:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d101      	bne.n	8001c80 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e099      	b.n	8001db4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2202      	movs	r2, #2
 8001c84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f022 0201 	bic.w	r2, r2, #1
 8001c9e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ca0:	e00f      	b.n	8001cc2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ca2:	f7ff fec1 	bl	8001a28 <HAL_GetTick>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	1ad3      	subs	r3, r2, r3
 8001cac:	2b05      	cmp	r3, #5
 8001cae:	d908      	bls.n	8001cc2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2220      	movs	r2, #32
 8001cb4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2203      	movs	r2, #3
 8001cba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e078      	b.n	8001db4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 0301 	and.w	r3, r3, #1
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d1e8      	bne.n	8001ca2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001cd8:	697a      	ldr	r2, [r7, #20]
 8001cda:	4b38      	ldr	r3, [pc, #224]	; (8001dbc <HAL_DMA_Init+0x158>)
 8001cdc:	4013      	ands	r3, r2
 8001cde:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	685a      	ldr	r2, [r3, #4]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	691b      	ldr	r3, [r3, #16]
 8001cf4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cfa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	699b      	ldr	r3, [r3, #24]
 8001d00:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d06:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6a1b      	ldr	r3, [r3, #32]
 8001d0c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d0e:	697a      	ldr	r2, [r7, #20]
 8001d10:	4313      	orrs	r3, r2
 8001d12:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d18:	2b04      	cmp	r3, #4
 8001d1a:	d107      	bne.n	8001d2c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d24:	4313      	orrs	r3, r2
 8001d26:	697a      	ldr	r2, [r7, #20]
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	697a      	ldr	r2, [r7, #20]
 8001d32:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	695b      	ldr	r3, [r3, #20]
 8001d3a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	f023 0307 	bic.w	r3, r3, #7
 8001d42:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d48:	697a      	ldr	r2, [r7, #20]
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d52:	2b04      	cmp	r3, #4
 8001d54:	d117      	bne.n	8001d86 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d5a:	697a      	ldr	r2, [r7, #20]
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d00e      	beq.n	8001d86 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	f000 fb01 	bl	8002370 <DMA_CheckFifoParam>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d008      	beq.n	8001d86 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2240      	movs	r2, #64	; 0x40
 8001d78:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001d82:	2301      	movs	r3, #1
 8001d84:	e016      	b.n	8001db4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	697a      	ldr	r2, [r7, #20]
 8001d8c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f000 fab8 	bl	8002304 <DMA_CalcBaseAndBitshift>
 8001d94:	4603      	mov	r3, r0
 8001d96:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d9c:	223f      	movs	r2, #63	; 0x3f
 8001d9e:	409a      	lsls	r2, r3
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2200      	movs	r2, #0
 8001da8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2201      	movs	r2, #1
 8001dae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001db2:	2300      	movs	r3, #0
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3718      	adds	r7, #24
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	f010803f 	.word	0xf010803f

08001dc0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b086      	sub	sp, #24
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	60f8      	str	r0, [r7, #12]
 8001dc8:	60b9      	str	r1, [r7, #8]
 8001dca:	607a      	str	r2, [r7, #4]
 8001dcc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dd6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d101      	bne.n	8001de6 <HAL_DMA_Start_IT+0x26>
 8001de2:	2302      	movs	r3, #2
 8001de4:	e040      	b.n	8001e68 <HAL_DMA_Start_IT+0xa8>
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	2201      	movs	r2, #1
 8001dea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d12f      	bne.n	8001e5a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	2202      	movs	r2, #2
 8001dfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	2200      	movs	r2, #0
 8001e06:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	68b9      	ldr	r1, [r7, #8]
 8001e0e:	68f8      	ldr	r0, [r7, #12]
 8001e10:	f000 fa4a 	bl	80022a8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e18:	223f      	movs	r2, #63	; 0x3f
 8001e1a:	409a      	lsls	r2, r3
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f042 0216 	orr.w	r2, r2, #22
 8001e2e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d007      	beq.n	8001e48 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f042 0208 	orr.w	r2, r2, #8
 8001e46:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f042 0201 	orr.w	r2, r2, #1
 8001e56:	601a      	str	r2, [r3, #0]
 8001e58:	e005      	b.n	8001e66 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001e62:	2302      	movs	r3, #2
 8001e64:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001e66:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3718      	adds	r7, #24
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}

08001e70 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b084      	sub	sp, #16
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e7c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001e7e:	f7ff fdd3 	bl	8001a28 <HAL_GetTick>
 8001e82:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	2b02      	cmp	r3, #2
 8001e8e:	d008      	beq.n	8001ea2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2280      	movs	r2, #128	; 0x80
 8001e94:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e052      	b.n	8001f48 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f022 0216 	bic.w	r2, r2, #22
 8001eb0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	695a      	ldr	r2, [r3, #20]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ec0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d103      	bne.n	8001ed2 <HAL_DMA_Abort+0x62>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d007      	beq.n	8001ee2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f022 0208 	bic.w	r2, r2, #8
 8001ee0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f022 0201 	bic.w	r2, r2, #1
 8001ef0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ef2:	e013      	b.n	8001f1c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ef4:	f7ff fd98 	bl	8001a28 <HAL_GetTick>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	2b05      	cmp	r3, #5
 8001f00:	d90c      	bls.n	8001f1c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2220      	movs	r2, #32
 8001f06:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2203      	movs	r2, #3
 8001f0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2200      	movs	r2, #0
 8001f14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001f18:	2303      	movs	r3, #3
 8001f1a:	e015      	b.n	8001f48 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 0301 	and.w	r3, r3, #1
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d1e4      	bne.n	8001ef4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f2e:	223f      	movs	r2, #63	; 0x3f
 8001f30:	409a      	lsls	r2, r3
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2201      	movs	r2, #1
 8001f3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2200      	movs	r2, #0
 8001f42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001f46:	2300      	movs	r3, #0
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3710      	adds	r7, #16
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}

08001f50 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	2b02      	cmp	r3, #2
 8001f62:	d004      	beq.n	8001f6e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2280      	movs	r2, #128	; 0x80
 8001f68:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e00c      	b.n	8001f88 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2205      	movs	r2, #5
 8001f72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f022 0201 	bic.w	r2, r2, #1
 8001f84:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001f86:	2300      	movs	r3, #0
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	370c      	adds	r7, #12
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr

08001f94 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b086      	sub	sp, #24
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001fa0:	4b8e      	ldr	r3, [pc, #568]	; (80021dc <HAL_DMA_IRQHandler+0x248>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a8e      	ldr	r2, [pc, #568]	; (80021e0 <HAL_DMA_IRQHandler+0x24c>)
 8001fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8001faa:	0a9b      	lsrs	r3, r3, #10
 8001fac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fb2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fbe:	2208      	movs	r2, #8
 8001fc0:	409a      	lsls	r2, r3
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d01a      	beq.n	8002000 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0304 	and.w	r3, r3, #4
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d013      	beq.n	8002000 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f022 0204 	bic.w	r2, r2, #4
 8001fe6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fec:	2208      	movs	r2, #8
 8001fee:	409a      	lsls	r2, r3
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ff8:	f043 0201 	orr.w	r2, r3, #1
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002004:	2201      	movs	r2, #1
 8002006:	409a      	lsls	r2, r3
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	4013      	ands	r3, r2
 800200c:	2b00      	cmp	r3, #0
 800200e:	d012      	beq.n	8002036 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	695b      	ldr	r3, [r3, #20]
 8002016:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800201a:	2b00      	cmp	r3, #0
 800201c:	d00b      	beq.n	8002036 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002022:	2201      	movs	r2, #1
 8002024:	409a      	lsls	r2, r3
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800202e:	f043 0202 	orr.w	r2, r3, #2
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800203a:	2204      	movs	r2, #4
 800203c:	409a      	lsls	r2, r3
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	4013      	ands	r3, r2
 8002042:	2b00      	cmp	r3, #0
 8002044:	d012      	beq.n	800206c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 0302 	and.w	r3, r3, #2
 8002050:	2b00      	cmp	r3, #0
 8002052:	d00b      	beq.n	800206c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002058:	2204      	movs	r2, #4
 800205a:	409a      	lsls	r2, r3
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002064:	f043 0204 	orr.w	r2, r3, #4
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002070:	2210      	movs	r2, #16
 8002072:	409a      	lsls	r2, r3
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	4013      	ands	r3, r2
 8002078:	2b00      	cmp	r3, #0
 800207a:	d043      	beq.n	8002104 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0308 	and.w	r3, r3, #8
 8002086:	2b00      	cmp	r3, #0
 8002088:	d03c      	beq.n	8002104 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800208e:	2210      	movs	r2, #16
 8002090:	409a      	lsls	r2, r3
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d018      	beq.n	80020d6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d108      	bne.n	80020c4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d024      	beq.n	8002104 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	4798      	blx	r3
 80020c2:	e01f      	b.n	8002104 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d01b      	beq.n	8002104 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	4798      	blx	r3
 80020d4:	e016      	b.n	8002104 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d107      	bne.n	80020f4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f022 0208 	bic.w	r2, r2, #8
 80020f2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d003      	beq.n	8002104 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002108:	2220      	movs	r2, #32
 800210a:	409a      	lsls	r2, r3
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	4013      	ands	r3, r2
 8002110:	2b00      	cmp	r3, #0
 8002112:	f000 808f 	beq.w	8002234 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 0310 	and.w	r3, r3, #16
 8002120:	2b00      	cmp	r3, #0
 8002122:	f000 8087 	beq.w	8002234 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800212a:	2220      	movs	r2, #32
 800212c:	409a      	lsls	r2, r3
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002138:	b2db      	uxtb	r3, r3
 800213a:	2b05      	cmp	r3, #5
 800213c:	d136      	bne.n	80021ac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f022 0216 	bic.w	r2, r2, #22
 800214c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	695a      	ldr	r2, [r3, #20]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800215c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002162:	2b00      	cmp	r3, #0
 8002164:	d103      	bne.n	800216e <HAL_DMA_IRQHandler+0x1da>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800216a:	2b00      	cmp	r3, #0
 800216c:	d007      	beq.n	800217e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f022 0208 	bic.w	r2, r2, #8
 800217c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002182:	223f      	movs	r2, #63	; 0x3f
 8002184:	409a      	lsls	r2, r3
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2201      	movs	r2, #1
 800218e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2200      	movs	r2, #0
 8002196:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d07e      	beq.n	80022a0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	4798      	blx	r3
        }
        return;
 80021aa:	e079      	b.n	80022a0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d01d      	beq.n	80021f6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d10d      	bne.n	80021e4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d031      	beq.n	8002234 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021d4:	6878      	ldr	r0, [r7, #4]
 80021d6:	4798      	blx	r3
 80021d8:	e02c      	b.n	8002234 <HAL_DMA_IRQHandler+0x2a0>
 80021da:	bf00      	nop
 80021dc:	2000000c 	.word	0x2000000c
 80021e0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d023      	beq.n	8002234 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	4798      	blx	r3
 80021f4:	e01e      	b.n	8002234 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002200:	2b00      	cmp	r3, #0
 8002202:	d10f      	bne.n	8002224 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f022 0210 	bic.w	r2, r2, #16
 8002212:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2201      	movs	r2, #1
 8002218:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2200      	movs	r2, #0
 8002220:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002228:	2b00      	cmp	r3, #0
 800222a:	d003      	beq.n	8002234 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002238:	2b00      	cmp	r3, #0
 800223a:	d032      	beq.n	80022a2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002240:	f003 0301 	and.w	r3, r3, #1
 8002244:	2b00      	cmp	r3, #0
 8002246:	d022      	beq.n	800228e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2205      	movs	r2, #5
 800224c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f022 0201 	bic.w	r2, r2, #1
 800225e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	3301      	adds	r3, #1
 8002264:	60bb      	str	r3, [r7, #8]
 8002266:	697a      	ldr	r2, [r7, #20]
 8002268:	429a      	cmp	r2, r3
 800226a:	d307      	bcc.n	800227c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 0301 	and.w	r3, r3, #1
 8002276:	2b00      	cmp	r3, #0
 8002278:	d1f2      	bne.n	8002260 <HAL_DMA_IRQHandler+0x2cc>
 800227a:	e000      	b.n	800227e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800227c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2201      	movs	r2, #1
 8002282:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2200      	movs	r2, #0
 800228a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002292:	2b00      	cmp	r3, #0
 8002294:	d005      	beq.n	80022a2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	4798      	blx	r3
 800229e:	e000      	b.n	80022a2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80022a0:	bf00      	nop
    }
  }
}
 80022a2:	3718      	adds	r7, #24
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}

080022a8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b085      	sub	sp, #20
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	60f8      	str	r0, [r7, #12]
 80022b0:	60b9      	str	r1, [r7, #8]
 80022b2:	607a      	str	r2, [r7, #4]
 80022b4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80022c4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	683a      	ldr	r2, [r7, #0]
 80022cc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	2b40      	cmp	r3, #64	; 0x40
 80022d4:	d108      	bne.n	80022e8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	687a      	ldr	r2, [r7, #4]
 80022dc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	68ba      	ldr	r2, [r7, #8]
 80022e4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80022e6:	e007      	b.n	80022f8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	68ba      	ldr	r2, [r7, #8]
 80022ee:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	687a      	ldr	r2, [r7, #4]
 80022f6:	60da      	str	r2, [r3, #12]
}
 80022f8:	bf00      	nop
 80022fa:	3714      	adds	r7, #20
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr

08002304 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002304:	b480      	push	{r7}
 8002306:	b085      	sub	sp, #20
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	b2db      	uxtb	r3, r3
 8002312:	3b10      	subs	r3, #16
 8002314:	4a14      	ldr	r2, [pc, #80]	; (8002368 <DMA_CalcBaseAndBitshift+0x64>)
 8002316:	fba2 2303 	umull	r2, r3, r2, r3
 800231a:	091b      	lsrs	r3, r3, #4
 800231c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800231e:	4a13      	ldr	r2, [pc, #76]	; (800236c <DMA_CalcBaseAndBitshift+0x68>)
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	4413      	add	r3, r2
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	461a      	mov	r2, r3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	2b03      	cmp	r3, #3
 8002330:	d909      	bls.n	8002346 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800233a:	f023 0303 	bic.w	r3, r3, #3
 800233e:	1d1a      	adds	r2, r3, #4
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	659a      	str	r2, [r3, #88]	; 0x58
 8002344:	e007      	b.n	8002356 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800234e:	f023 0303 	bic.w	r3, r3, #3
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800235a:	4618      	mov	r0, r3
 800235c:	3714      	adds	r7, #20
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr
 8002366:	bf00      	nop
 8002368:	aaaaaaab 	.word	0xaaaaaaab
 800236c:	08005090 	.word	0x08005090

08002370 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002370:	b480      	push	{r7}
 8002372:	b085      	sub	sp, #20
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002378:	2300      	movs	r3, #0
 800237a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002380:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	699b      	ldr	r3, [r3, #24]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d11f      	bne.n	80023ca <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	2b03      	cmp	r3, #3
 800238e:	d856      	bhi.n	800243e <DMA_CheckFifoParam+0xce>
 8002390:	a201      	add	r2, pc, #4	; (adr r2, 8002398 <DMA_CheckFifoParam+0x28>)
 8002392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002396:	bf00      	nop
 8002398:	080023a9 	.word	0x080023a9
 800239c:	080023bb 	.word	0x080023bb
 80023a0:	080023a9 	.word	0x080023a9
 80023a4:	0800243f 	.word	0x0800243f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d046      	beq.n	8002442 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023b8:	e043      	b.n	8002442 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023be:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80023c2:	d140      	bne.n	8002446 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023c8:	e03d      	b.n	8002446 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	699b      	ldr	r3, [r3, #24]
 80023ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023d2:	d121      	bne.n	8002418 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	2b03      	cmp	r3, #3
 80023d8:	d837      	bhi.n	800244a <DMA_CheckFifoParam+0xda>
 80023da:	a201      	add	r2, pc, #4	; (adr r2, 80023e0 <DMA_CheckFifoParam+0x70>)
 80023dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023e0:	080023f1 	.word	0x080023f1
 80023e4:	080023f7 	.word	0x080023f7
 80023e8:	080023f1 	.word	0x080023f1
 80023ec:	08002409 	.word	0x08002409
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	73fb      	strb	r3, [r7, #15]
      break;
 80023f4:	e030      	b.n	8002458 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d025      	beq.n	800244e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002406:	e022      	b.n	800244e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800240c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002410:	d11f      	bne.n	8002452 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002416:	e01c      	b.n	8002452 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	2b02      	cmp	r3, #2
 800241c:	d903      	bls.n	8002426 <DMA_CheckFifoParam+0xb6>
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	2b03      	cmp	r3, #3
 8002422:	d003      	beq.n	800242c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002424:	e018      	b.n	8002458 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	73fb      	strb	r3, [r7, #15]
      break;
 800242a:	e015      	b.n	8002458 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002430:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002434:	2b00      	cmp	r3, #0
 8002436:	d00e      	beq.n	8002456 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	73fb      	strb	r3, [r7, #15]
      break;
 800243c:	e00b      	b.n	8002456 <DMA_CheckFifoParam+0xe6>
      break;
 800243e:	bf00      	nop
 8002440:	e00a      	b.n	8002458 <DMA_CheckFifoParam+0xe8>
      break;
 8002442:	bf00      	nop
 8002444:	e008      	b.n	8002458 <DMA_CheckFifoParam+0xe8>
      break;
 8002446:	bf00      	nop
 8002448:	e006      	b.n	8002458 <DMA_CheckFifoParam+0xe8>
      break;
 800244a:	bf00      	nop
 800244c:	e004      	b.n	8002458 <DMA_CheckFifoParam+0xe8>
      break;
 800244e:	bf00      	nop
 8002450:	e002      	b.n	8002458 <DMA_CheckFifoParam+0xe8>
      break;   
 8002452:	bf00      	nop
 8002454:	e000      	b.n	8002458 <DMA_CheckFifoParam+0xe8>
      break;
 8002456:	bf00      	nop
    }
  } 
  
  return status; 
 8002458:	7bfb      	ldrb	r3, [r7, #15]
}
 800245a:	4618      	mov	r0, r3
 800245c:	3714      	adds	r7, #20
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr
 8002466:	bf00      	nop

08002468 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002468:	b480      	push	{r7}
 800246a:	b089      	sub	sp, #36	; 0x24
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002472:	2300      	movs	r3, #0
 8002474:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002476:	2300      	movs	r3, #0
 8002478:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800247a:	2300      	movs	r3, #0
 800247c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800247e:	2300      	movs	r3, #0
 8002480:	61fb      	str	r3, [r7, #28]
 8002482:	e159      	b.n	8002738 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002484:	2201      	movs	r2, #1
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	fa02 f303 	lsl.w	r3, r2, r3
 800248c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	697a      	ldr	r2, [r7, #20]
 8002494:	4013      	ands	r3, r2
 8002496:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002498:	693a      	ldr	r2, [r7, #16]
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	429a      	cmp	r2, r3
 800249e:	f040 8148 	bne.w	8002732 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	f003 0303 	and.w	r3, r3, #3
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d005      	beq.n	80024ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	d130      	bne.n	800251c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	005b      	lsls	r3, r3, #1
 80024c4:	2203      	movs	r2, #3
 80024c6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ca:	43db      	mvns	r3, r3
 80024cc:	69ba      	ldr	r2, [r7, #24]
 80024ce:	4013      	ands	r3, r2
 80024d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	68da      	ldr	r2, [r3, #12]
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	005b      	lsls	r3, r3, #1
 80024da:	fa02 f303 	lsl.w	r3, r2, r3
 80024de:	69ba      	ldr	r2, [r7, #24]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	69ba      	ldr	r2, [r7, #24]
 80024e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024f0:	2201      	movs	r2, #1
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	fa02 f303 	lsl.w	r3, r2, r3
 80024f8:	43db      	mvns	r3, r3
 80024fa:	69ba      	ldr	r2, [r7, #24]
 80024fc:	4013      	ands	r3, r2
 80024fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	091b      	lsrs	r3, r3, #4
 8002506:	f003 0201 	and.w	r2, r3, #1
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	fa02 f303 	lsl.w	r3, r2, r3
 8002510:	69ba      	ldr	r2, [r7, #24]
 8002512:	4313      	orrs	r3, r2
 8002514:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	69ba      	ldr	r2, [r7, #24]
 800251a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f003 0303 	and.w	r3, r3, #3
 8002524:	2b03      	cmp	r3, #3
 8002526:	d017      	beq.n	8002558 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	005b      	lsls	r3, r3, #1
 8002532:	2203      	movs	r2, #3
 8002534:	fa02 f303 	lsl.w	r3, r2, r3
 8002538:	43db      	mvns	r3, r3
 800253a:	69ba      	ldr	r2, [r7, #24]
 800253c:	4013      	ands	r3, r2
 800253e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	689a      	ldr	r2, [r3, #8]
 8002544:	69fb      	ldr	r3, [r7, #28]
 8002546:	005b      	lsls	r3, r3, #1
 8002548:	fa02 f303 	lsl.w	r3, r2, r3
 800254c:	69ba      	ldr	r2, [r7, #24]
 800254e:	4313      	orrs	r3, r2
 8002550:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	69ba      	ldr	r2, [r7, #24]
 8002556:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	f003 0303 	and.w	r3, r3, #3
 8002560:	2b02      	cmp	r3, #2
 8002562:	d123      	bne.n	80025ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	08da      	lsrs	r2, r3, #3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	3208      	adds	r2, #8
 800256c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002570:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	f003 0307 	and.w	r3, r3, #7
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	220f      	movs	r2, #15
 800257c:	fa02 f303 	lsl.w	r3, r2, r3
 8002580:	43db      	mvns	r3, r3
 8002582:	69ba      	ldr	r2, [r7, #24]
 8002584:	4013      	ands	r3, r2
 8002586:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	691a      	ldr	r2, [r3, #16]
 800258c:	69fb      	ldr	r3, [r7, #28]
 800258e:	f003 0307 	and.w	r3, r3, #7
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	fa02 f303 	lsl.w	r3, r2, r3
 8002598:	69ba      	ldr	r2, [r7, #24]
 800259a:	4313      	orrs	r3, r2
 800259c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	08da      	lsrs	r2, r3, #3
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	3208      	adds	r2, #8
 80025a6:	69b9      	ldr	r1, [r7, #24]
 80025a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	005b      	lsls	r3, r3, #1
 80025b6:	2203      	movs	r2, #3
 80025b8:	fa02 f303 	lsl.w	r3, r2, r3
 80025bc:	43db      	mvns	r3, r3
 80025be:	69ba      	ldr	r2, [r7, #24]
 80025c0:	4013      	ands	r3, r2
 80025c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f003 0203 	and.w	r2, r3, #3
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	005b      	lsls	r3, r3, #1
 80025d0:	fa02 f303 	lsl.w	r3, r2, r3
 80025d4:	69ba      	ldr	r2, [r7, #24]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	69ba      	ldr	r2, [r7, #24]
 80025de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	f000 80a2 	beq.w	8002732 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025ee:	2300      	movs	r3, #0
 80025f0:	60fb      	str	r3, [r7, #12]
 80025f2:	4b57      	ldr	r3, [pc, #348]	; (8002750 <HAL_GPIO_Init+0x2e8>)
 80025f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025f6:	4a56      	ldr	r2, [pc, #344]	; (8002750 <HAL_GPIO_Init+0x2e8>)
 80025f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025fc:	6453      	str	r3, [r2, #68]	; 0x44
 80025fe:	4b54      	ldr	r3, [pc, #336]	; (8002750 <HAL_GPIO_Init+0x2e8>)
 8002600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002602:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002606:	60fb      	str	r3, [r7, #12]
 8002608:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800260a:	4a52      	ldr	r2, [pc, #328]	; (8002754 <HAL_GPIO_Init+0x2ec>)
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	089b      	lsrs	r3, r3, #2
 8002610:	3302      	adds	r3, #2
 8002612:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002616:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	f003 0303 	and.w	r3, r3, #3
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	220f      	movs	r2, #15
 8002622:	fa02 f303 	lsl.w	r3, r2, r3
 8002626:	43db      	mvns	r3, r3
 8002628:	69ba      	ldr	r2, [r7, #24]
 800262a:	4013      	ands	r3, r2
 800262c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4a49      	ldr	r2, [pc, #292]	; (8002758 <HAL_GPIO_Init+0x2f0>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d019      	beq.n	800266a <HAL_GPIO_Init+0x202>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4a48      	ldr	r2, [pc, #288]	; (800275c <HAL_GPIO_Init+0x2f4>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d013      	beq.n	8002666 <HAL_GPIO_Init+0x1fe>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4a47      	ldr	r2, [pc, #284]	; (8002760 <HAL_GPIO_Init+0x2f8>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d00d      	beq.n	8002662 <HAL_GPIO_Init+0x1fa>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4a46      	ldr	r2, [pc, #280]	; (8002764 <HAL_GPIO_Init+0x2fc>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d007      	beq.n	800265e <HAL_GPIO_Init+0x1f6>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4a45      	ldr	r2, [pc, #276]	; (8002768 <HAL_GPIO_Init+0x300>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d101      	bne.n	800265a <HAL_GPIO_Init+0x1f2>
 8002656:	2304      	movs	r3, #4
 8002658:	e008      	b.n	800266c <HAL_GPIO_Init+0x204>
 800265a:	2307      	movs	r3, #7
 800265c:	e006      	b.n	800266c <HAL_GPIO_Init+0x204>
 800265e:	2303      	movs	r3, #3
 8002660:	e004      	b.n	800266c <HAL_GPIO_Init+0x204>
 8002662:	2302      	movs	r3, #2
 8002664:	e002      	b.n	800266c <HAL_GPIO_Init+0x204>
 8002666:	2301      	movs	r3, #1
 8002668:	e000      	b.n	800266c <HAL_GPIO_Init+0x204>
 800266a:	2300      	movs	r3, #0
 800266c:	69fa      	ldr	r2, [r7, #28]
 800266e:	f002 0203 	and.w	r2, r2, #3
 8002672:	0092      	lsls	r2, r2, #2
 8002674:	4093      	lsls	r3, r2
 8002676:	69ba      	ldr	r2, [r7, #24]
 8002678:	4313      	orrs	r3, r2
 800267a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800267c:	4935      	ldr	r1, [pc, #212]	; (8002754 <HAL_GPIO_Init+0x2ec>)
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	089b      	lsrs	r3, r3, #2
 8002682:	3302      	adds	r3, #2
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800268a:	4b38      	ldr	r3, [pc, #224]	; (800276c <HAL_GPIO_Init+0x304>)
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	43db      	mvns	r3, r3
 8002694:	69ba      	ldr	r2, [r7, #24]
 8002696:	4013      	ands	r3, r2
 8002698:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d003      	beq.n	80026ae <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80026a6:	69ba      	ldr	r2, [r7, #24]
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026ae:	4a2f      	ldr	r2, [pc, #188]	; (800276c <HAL_GPIO_Init+0x304>)
 80026b0:	69bb      	ldr	r3, [r7, #24]
 80026b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026b4:	4b2d      	ldr	r3, [pc, #180]	; (800276c <HAL_GPIO_Init+0x304>)
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	43db      	mvns	r3, r3
 80026be:	69ba      	ldr	r2, [r7, #24]
 80026c0:	4013      	ands	r3, r2
 80026c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d003      	beq.n	80026d8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80026d0:	69ba      	ldr	r2, [r7, #24]
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	4313      	orrs	r3, r2
 80026d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026d8:	4a24      	ldr	r2, [pc, #144]	; (800276c <HAL_GPIO_Init+0x304>)
 80026da:	69bb      	ldr	r3, [r7, #24]
 80026dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80026de:	4b23      	ldr	r3, [pc, #140]	; (800276c <HAL_GPIO_Init+0x304>)
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	43db      	mvns	r3, r3
 80026e8:	69ba      	ldr	r2, [r7, #24]
 80026ea:	4013      	ands	r3, r2
 80026ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d003      	beq.n	8002702 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80026fa:	69ba      	ldr	r2, [r7, #24]
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	4313      	orrs	r3, r2
 8002700:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002702:	4a1a      	ldr	r2, [pc, #104]	; (800276c <HAL_GPIO_Init+0x304>)
 8002704:	69bb      	ldr	r3, [r7, #24]
 8002706:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002708:	4b18      	ldr	r3, [pc, #96]	; (800276c <HAL_GPIO_Init+0x304>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	43db      	mvns	r3, r3
 8002712:	69ba      	ldr	r2, [r7, #24]
 8002714:	4013      	ands	r3, r2
 8002716:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002720:	2b00      	cmp	r3, #0
 8002722:	d003      	beq.n	800272c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002724:	69ba      	ldr	r2, [r7, #24]
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	4313      	orrs	r3, r2
 800272a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800272c:	4a0f      	ldr	r2, [pc, #60]	; (800276c <HAL_GPIO_Init+0x304>)
 800272e:	69bb      	ldr	r3, [r7, #24]
 8002730:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	3301      	adds	r3, #1
 8002736:	61fb      	str	r3, [r7, #28]
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	2b0f      	cmp	r3, #15
 800273c:	f67f aea2 	bls.w	8002484 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002740:	bf00      	nop
 8002742:	bf00      	nop
 8002744:	3724      	adds	r7, #36	; 0x24
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr
 800274e:	bf00      	nop
 8002750:	40023800 	.word	0x40023800
 8002754:	40013800 	.word	0x40013800
 8002758:	40020000 	.word	0x40020000
 800275c:	40020400 	.word	0x40020400
 8002760:	40020800 	.word	0x40020800
 8002764:	40020c00 	.word	0x40020c00
 8002768:	40021000 	.word	0x40021000
 800276c:	40013c00 	.word	0x40013c00

08002770 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002770:	b480      	push	{r7}
 8002772:	b085      	sub	sp, #20
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	460b      	mov	r3, r1
 800277a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	691a      	ldr	r2, [r3, #16]
 8002780:	887b      	ldrh	r3, [r7, #2]
 8002782:	4013      	ands	r3, r2
 8002784:	2b00      	cmp	r3, #0
 8002786:	d002      	beq.n	800278e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002788:	2301      	movs	r3, #1
 800278a:	73fb      	strb	r3, [r7, #15]
 800278c:	e001      	b.n	8002792 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800278e:	2300      	movs	r3, #0
 8002790:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002792:	7bfb      	ldrb	r3, [r7, #15]
}
 8002794:	4618      	mov	r0, r3
 8002796:	3714      	adds	r7, #20
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr

080027a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	460b      	mov	r3, r1
 80027aa:	807b      	strh	r3, [r7, #2]
 80027ac:	4613      	mov	r3, r2
 80027ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027b0:	787b      	ldrb	r3, [r7, #1]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d003      	beq.n	80027be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027b6:	887a      	ldrh	r2, [r7, #2]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80027bc:	e003      	b.n	80027c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80027be:	887b      	ldrh	r3, [r7, #2]
 80027c0:	041a      	lsls	r2, r3, #16
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	619a      	str	r2, [r3, #24]
}
 80027c6:	bf00      	nop
 80027c8:	370c      	adds	r7, #12
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr

080027d2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80027d2:	b480      	push	{r7}
 80027d4:	b085      	sub	sp, #20
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	6078      	str	r0, [r7, #4]
 80027da:	460b      	mov	r3, r1
 80027dc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	695b      	ldr	r3, [r3, #20]
 80027e2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80027e4:	887a      	ldrh	r2, [r7, #2]
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	4013      	ands	r3, r2
 80027ea:	041a      	lsls	r2, r3, #16
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	43d9      	mvns	r1, r3
 80027f0:	887b      	ldrh	r3, [r7, #2]
 80027f2:	400b      	ands	r3, r1
 80027f4:	431a      	orrs	r2, r3
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	619a      	str	r2, [r3, #24]
}
 80027fa:	bf00      	nop
 80027fc:	3714      	adds	r7, #20
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr
	...

08002808 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b086      	sub	sp, #24
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d101      	bne.n	800281a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e267      	b.n	8002cea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 0301 	and.w	r3, r3, #1
 8002822:	2b00      	cmp	r3, #0
 8002824:	d075      	beq.n	8002912 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002826:	4b88      	ldr	r3, [pc, #544]	; (8002a48 <HAL_RCC_OscConfig+0x240>)
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	f003 030c 	and.w	r3, r3, #12
 800282e:	2b04      	cmp	r3, #4
 8002830:	d00c      	beq.n	800284c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002832:	4b85      	ldr	r3, [pc, #532]	; (8002a48 <HAL_RCC_OscConfig+0x240>)
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800283a:	2b08      	cmp	r3, #8
 800283c:	d112      	bne.n	8002864 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800283e:	4b82      	ldr	r3, [pc, #520]	; (8002a48 <HAL_RCC_OscConfig+0x240>)
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002846:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800284a:	d10b      	bne.n	8002864 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800284c:	4b7e      	ldr	r3, [pc, #504]	; (8002a48 <HAL_RCC_OscConfig+0x240>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002854:	2b00      	cmp	r3, #0
 8002856:	d05b      	beq.n	8002910 <HAL_RCC_OscConfig+0x108>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d157      	bne.n	8002910 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	e242      	b.n	8002cea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800286c:	d106      	bne.n	800287c <HAL_RCC_OscConfig+0x74>
 800286e:	4b76      	ldr	r3, [pc, #472]	; (8002a48 <HAL_RCC_OscConfig+0x240>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a75      	ldr	r2, [pc, #468]	; (8002a48 <HAL_RCC_OscConfig+0x240>)
 8002874:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002878:	6013      	str	r3, [r2, #0]
 800287a:	e01d      	b.n	80028b8 <HAL_RCC_OscConfig+0xb0>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002884:	d10c      	bne.n	80028a0 <HAL_RCC_OscConfig+0x98>
 8002886:	4b70      	ldr	r3, [pc, #448]	; (8002a48 <HAL_RCC_OscConfig+0x240>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a6f      	ldr	r2, [pc, #444]	; (8002a48 <HAL_RCC_OscConfig+0x240>)
 800288c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002890:	6013      	str	r3, [r2, #0]
 8002892:	4b6d      	ldr	r3, [pc, #436]	; (8002a48 <HAL_RCC_OscConfig+0x240>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a6c      	ldr	r2, [pc, #432]	; (8002a48 <HAL_RCC_OscConfig+0x240>)
 8002898:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800289c:	6013      	str	r3, [r2, #0]
 800289e:	e00b      	b.n	80028b8 <HAL_RCC_OscConfig+0xb0>
 80028a0:	4b69      	ldr	r3, [pc, #420]	; (8002a48 <HAL_RCC_OscConfig+0x240>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a68      	ldr	r2, [pc, #416]	; (8002a48 <HAL_RCC_OscConfig+0x240>)
 80028a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028aa:	6013      	str	r3, [r2, #0]
 80028ac:	4b66      	ldr	r3, [pc, #408]	; (8002a48 <HAL_RCC_OscConfig+0x240>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a65      	ldr	r2, [pc, #404]	; (8002a48 <HAL_RCC_OscConfig+0x240>)
 80028b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d013      	beq.n	80028e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028c0:	f7ff f8b2 	bl	8001a28 <HAL_GetTick>
 80028c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028c6:	e008      	b.n	80028da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028c8:	f7ff f8ae 	bl	8001a28 <HAL_GetTick>
 80028cc:	4602      	mov	r2, r0
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	2b64      	cmp	r3, #100	; 0x64
 80028d4:	d901      	bls.n	80028da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	e207      	b.n	8002cea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028da:	4b5b      	ldr	r3, [pc, #364]	; (8002a48 <HAL_RCC_OscConfig+0x240>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d0f0      	beq.n	80028c8 <HAL_RCC_OscConfig+0xc0>
 80028e6:	e014      	b.n	8002912 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028e8:	f7ff f89e 	bl	8001a28 <HAL_GetTick>
 80028ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028ee:	e008      	b.n	8002902 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028f0:	f7ff f89a 	bl	8001a28 <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	2b64      	cmp	r3, #100	; 0x64
 80028fc:	d901      	bls.n	8002902 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80028fe:	2303      	movs	r3, #3
 8002900:	e1f3      	b.n	8002cea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002902:	4b51      	ldr	r3, [pc, #324]	; (8002a48 <HAL_RCC_OscConfig+0x240>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d1f0      	bne.n	80028f0 <HAL_RCC_OscConfig+0xe8>
 800290e:	e000      	b.n	8002912 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002910:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0302 	and.w	r3, r3, #2
 800291a:	2b00      	cmp	r3, #0
 800291c:	d063      	beq.n	80029e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800291e:	4b4a      	ldr	r3, [pc, #296]	; (8002a48 <HAL_RCC_OscConfig+0x240>)
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	f003 030c 	and.w	r3, r3, #12
 8002926:	2b00      	cmp	r3, #0
 8002928:	d00b      	beq.n	8002942 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800292a:	4b47      	ldr	r3, [pc, #284]	; (8002a48 <HAL_RCC_OscConfig+0x240>)
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002932:	2b08      	cmp	r3, #8
 8002934:	d11c      	bne.n	8002970 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002936:	4b44      	ldr	r3, [pc, #272]	; (8002a48 <HAL_RCC_OscConfig+0x240>)
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d116      	bne.n	8002970 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002942:	4b41      	ldr	r3, [pc, #260]	; (8002a48 <HAL_RCC_OscConfig+0x240>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 0302 	and.w	r3, r3, #2
 800294a:	2b00      	cmp	r3, #0
 800294c:	d005      	beq.n	800295a <HAL_RCC_OscConfig+0x152>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	68db      	ldr	r3, [r3, #12]
 8002952:	2b01      	cmp	r3, #1
 8002954:	d001      	beq.n	800295a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e1c7      	b.n	8002cea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800295a:	4b3b      	ldr	r3, [pc, #236]	; (8002a48 <HAL_RCC_OscConfig+0x240>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	691b      	ldr	r3, [r3, #16]
 8002966:	00db      	lsls	r3, r3, #3
 8002968:	4937      	ldr	r1, [pc, #220]	; (8002a48 <HAL_RCC_OscConfig+0x240>)
 800296a:	4313      	orrs	r3, r2
 800296c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800296e:	e03a      	b.n	80029e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d020      	beq.n	80029ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002978:	4b34      	ldr	r3, [pc, #208]	; (8002a4c <HAL_RCC_OscConfig+0x244>)
 800297a:	2201      	movs	r2, #1
 800297c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800297e:	f7ff f853 	bl	8001a28 <HAL_GetTick>
 8002982:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002984:	e008      	b.n	8002998 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002986:	f7ff f84f 	bl	8001a28 <HAL_GetTick>
 800298a:	4602      	mov	r2, r0
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	1ad3      	subs	r3, r2, r3
 8002990:	2b02      	cmp	r3, #2
 8002992:	d901      	bls.n	8002998 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002994:	2303      	movs	r3, #3
 8002996:	e1a8      	b.n	8002cea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002998:	4b2b      	ldr	r3, [pc, #172]	; (8002a48 <HAL_RCC_OscConfig+0x240>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 0302 	and.w	r3, r3, #2
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d0f0      	beq.n	8002986 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029a4:	4b28      	ldr	r3, [pc, #160]	; (8002a48 <HAL_RCC_OscConfig+0x240>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	691b      	ldr	r3, [r3, #16]
 80029b0:	00db      	lsls	r3, r3, #3
 80029b2:	4925      	ldr	r1, [pc, #148]	; (8002a48 <HAL_RCC_OscConfig+0x240>)
 80029b4:	4313      	orrs	r3, r2
 80029b6:	600b      	str	r3, [r1, #0]
 80029b8:	e015      	b.n	80029e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029ba:	4b24      	ldr	r3, [pc, #144]	; (8002a4c <HAL_RCC_OscConfig+0x244>)
 80029bc:	2200      	movs	r2, #0
 80029be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029c0:	f7ff f832 	bl	8001a28 <HAL_GetTick>
 80029c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029c6:	e008      	b.n	80029da <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029c8:	f7ff f82e 	bl	8001a28 <HAL_GetTick>
 80029cc:	4602      	mov	r2, r0
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	2b02      	cmp	r3, #2
 80029d4:	d901      	bls.n	80029da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80029d6:	2303      	movs	r3, #3
 80029d8:	e187      	b.n	8002cea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029da:	4b1b      	ldr	r3, [pc, #108]	; (8002a48 <HAL_RCC_OscConfig+0x240>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0302 	and.w	r3, r3, #2
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d1f0      	bne.n	80029c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 0308 	and.w	r3, r3, #8
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d036      	beq.n	8002a60 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	695b      	ldr	r3, [r3, #20]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d016      	beq.n	8002a28 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029fa:	4b15      	ldr	r3, [pc, #84]	; (8002a50 <HAL_RCC_OscConfig+0x248>)
 80029fc:	2201      	movs	r2, #1
 80029fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a00:	f7ff f812 	bl	8001a28 <HAL_GetTick>
 8002a04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a06:	e008      	b.n	8002a1a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a08:	f7ff f80e 	bl	8001a28 <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	d901      	bls.n	8002a1a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	e167      	b.n	8002cea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a1a:	4b0b      	ldr	r3, [pc, #44]	; (8002a48 <HAL_RCC_OscConfig+0x240>)
 8002a1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a1e:	f003 0302 	and.w	r3, r3, #2
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d0f0      	beq.n	8002a08 <HAL_RCC_OscConfig+0x200>
 8002a26:	e01b      	b.n	8002a60 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a28:	4b09      	ldr	r3, [pc, #36]	; (8002a50 <HAL_RCC_OscConfig+0x248>)
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a2e:	f7fe fffb 	bl	8001a28 <HAL_GetTick>
 8002a32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a34:	e00e      	b.n	8002a54 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a36:	f7fe fff7 	bl	8001a28 <HAL_GetTick>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	1ad3      	subs	r3, r2, r3
 8002a40:	2b02      	cmp	r3, #2
 8002a42:	d907      	bls.n	8002a54 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002a44:	2303      	movs	r3, #3
 8002a46:	e150      	b.n	8002cea <HAL_RCC_OscConfig+0x4e2>
 8002a48:	40023800 	.word	0x40023800
 8002a4c:	42470000 	.word	0x42470000
 8002a50:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a54:	4b88      	ldr	r3, [pc, #544]	; (8002c78 <HAL_RCC_OscConfig+0x470>)
 8002a56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a58:	f003 0302 	and.w	r3, r3, #2
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d1ea      	bne.n	8002a36 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0304 	and.w	r3, r3, #4
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	f000 8097 	beq.w	8002b9c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a72:	4b81      	ldr	r3, [pc, #516]	; (8002c78 <HAL_RCC_OscConfig+0x470>)
 8002a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d10f      	bne.n	8002a9e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a7e:	2300      	movs	r3, #0
 8002a80:	60bb      	str	r3, [r7, #8]
 8002a82:	4b7d      	ldr	r3, [pc, #500]	; (8002c78 <HAL_RCC_OscConfig+0x470>)
 8002a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a86:	4a7c      	ldr	r2, [pc, #496]	; (8002c78 <HAL_RCC_OscConfig+0x470>)
 8002a88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a8c:	6413      	str	r3, [r2, #64]	; 0x40
 8002a8e:	4b7a      	ldr	r3, [pc, #488]	; (8002c78 <HAL_RCC_OscConfig+0x470>)
 8002a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a96:	60bb      	str	r3, [r7, #8]
 8002a98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a9e:	4b77      	ldr	r3, [pc, #476]	; (8002c7c <HAL_RCC_OscConfig+0x474>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d118      	bne.n	8002adc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002aaa:	4b74      	ldr	r3, [pc, #464]	; (8002c7c <HAL_RCC_OscConfig+0x474>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a73      	ldr	r2, [pc, #460]	; (8002c7c <HAL_RCC_OscConfig+0x474>)
 8002ab0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ab4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ab6:	f7fe ffb7 	bl	8001a28 <HAL_GetTick>
 8002aba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002abc:	e008      	b.n	8002ad0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002abe:	f7fe ffb3 	bl	8001a28 <HAL_GetTick>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	1ad3      	subs	r3, r2, r3
 8002ac8:	2b02      	cmp	r3, #2
 8002aca:	d901      	bls.n	8002ad0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002acc:	2303      	movs	r3, #3
 8002ace:	e10c      	b.n	8002cea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ad0:	4b6a      	ldr	r3, [pc, #424]	; (8002c7c <HAL_RCC_OscConfig+0x474>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d0f0      	beq.n	8002abe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d106      	bne.n	8002af2 <HAL_RCC_OscConfig+0x2ea>
 8002ae4:	4b64      	ldr	r3, [pc, #400]	; (8002c78 <HAL_RCC_OscConfig+0x470>)
 8002ae6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ae8:	4a63      	ldr	r2, [pc, #396]	; (8002c78 <HAL_RCC_OscConfig+0x470>)
 8002aea:	f043 0301 	orr.w	r3, r3, #1
 8002aee:	6713      	str	r3, [r2, #112]	; 0x70
 8002af0:	e01c      	b.n	8002b2c <HAL_RCC_OscConfig+0x324>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	2b05      	cmp	r3, #5
 8002af8:	d10c      	bne.n	8002b14 <HAL_RCC_OscConfig+0x30c>
 8002afa:	4b5f      	ldr	r3, [pc, #380]	; (8002c78 <HAL_RCC_OscConfig+0x470>)
 8002afc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002afe:	4a5e      	ldr	r2, [pc, #376]	; (8002c78 <HAL_RCC_OscConfig+0x470>)
 8002b00:	f043 0304 	orr.w	r3, r3, #4
 8002b04:	6713      	str	r3, [r2, #112]	; 0x70
 8002b06:	4b5c      	ldr	r3, [pc, #368]	; (8002c78 <HAL_RCC_OscConfig+0x470>)
 8002b08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b0a:	4a5b      	ldr	r2, [pc, #364]	; (8002c78 <HAL_RCC_OscConfig+0x470>)
 8002b0c:	f043 0301 	orr.w	r3, r3, #1
 8002b10:	6713      	str	r3, [r2, #112]	; 0x70
 8002b12:	e00b      	b.n	8002b2c <HAL_RCC_OscConfig+0x324>
 8002b14:	4b58      	ldr	r3, [pc, #352]	; (8002c78 <HAL_RCC_OscConfig+0x470>)
 8002b16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b18:	4a57      	ldr	r2, [pc, #348]	; (8002c78 <HAL_RCC_OscConfig+0x470>)
 8002b1a:	f023 0301 	bic.w	r3, r3, #1
 8002b1e:	6713      	str	r3, [r2, #112]	; 0x70
 8002b20:	4b55      	ldr	r3, [pc, #340]	; (8002c78 <HAL_RCC_OscConfig+0x470>)
 8002b22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b24:	4a54      	ldr	r2, [pc, #336]	; (8002c78 <HAL_RCC_OscConfig+0x470>)
 8002b26:	f023 0304 	bic.w	r3, r3, #4
 8002b2a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d015      	beq.n	8002b60 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b34:	f7fe ff78 	bl	8001a28 <HAL_GetTick>
 8002b38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b3a:	e00a      	b.n	8002b52 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b3c:	f7fe ff74 	bl	8001a28 <HAL_GetTick>
 8002b40:	4602      	mov	r2, r0
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d901      	bls.n	8002b52 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e0cb      	b.n	8002cea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b52:	4b49      	ldr	r3, [pc, #292]	; (8002c78 <HAL_RCC_OscConfig+0x470>)
 8002b54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b56:	f003 0302 	and.w	r3, r3, #2
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d0ee      	beq.n	8002b3c <HAL_RCC_OscConfig+0x334>
 8002b5e:	e014      	b.n	8002b8a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b60:	f7fe ff62 	bl	8001a28 <HAL_GetTick>
 8002b64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b66:	e00a      	b.n	8002b7e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b68:	f7fe ff5e 	bl	8001a28 <HAL_GetTick>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d901      	bls.n	8002b7e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e0b5      	b.n	8002cea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b7e:	4b3e      	ldr	r3, [pc, #248]	; (8002c78 <HAL_RCC_OscConfig+0x470>)
 8002b80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b82:	f003 0302 	and.w	r3, r3, #2
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d1ee      	bne.n	8002b68 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b8a:	7dfb      	ldrb	r3, [r7, #23]
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d105      	bne.n	8002b9c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b90:	4b39      	ldr	r3, [pc, #228]	; (8002c78 <HAL_RCC_OscConfig+0x470>)
 8002b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b94:	4a38      	ldr	r2, [pc, #224]	; (8002c78 <HAL_RCC_OscConfig+0x470>)
 8002b96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b9a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	699b      	ldr	r3, [r3, #24]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	f000 80a1 	beq.w	8002ce8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ba6:	4b34      	ldr	r3, [pc, #208]	; (8002c78 <HAL_RCC_OscConfig+0x470>)
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	f003 030c 	and.w	r3, r3, #12
 8002bae:	2b08      	cmp	r3, #8
 8002bb0:	d05c      	beq.n	8002c6c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	699b      	ldr	r3, [r3, #24]
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	d141      	bne.n	8002c3e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bba:	4b31      	ldr	r3, [pc, #196]	; (8002c80 <HAL_RCC_OscConfig+0x478>)
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bc0:	f7fe ff32 	bl	8001a28 <HAL_GetTick>
 8002bc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bc6:	e008      	b.n	8002bda <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bc8:	f7fe ff2e 	bl	8001a28 <HAL_GetTick>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	2b02      	cmp	r3, #2
 8002bd4:	d901      	bls.n	8002bda <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	e087      	b.n	8002cea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bda:	4b27      	ldr	r3, [pc, #156]	; (8002c78 <HAL_RCC_OscConfig+0x470>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d1f0      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	69da      	ldr	r2, [r3, #28]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6a1b      	ldr	r3, [r3, #32]
 8002bee:	431a      	orrs	r2, r3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf4:	019b      	lsls	r3, r3, #6
 8002bf6:	431a      	orrs	r2, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bfc:	085b      	lsrs	r3, r3, #1
 8002bfe:	3b01      	subs	r3, #1
 8002c00:	041b      	lsls	r3, r3, #16
 8002c02:	431a      	orrs	r2, r3
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c08:	061b      	lsls	r3, r3, #24
 8002c0a:	491b      	ldr	r1, [pc, #108]	; (8002c78 <HAL_RCC_OscConfig+0x470>)
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c10:	4b1b      	ldr	r3, [pc, #108]	; (8002c80 <HAL_RCC_OscConfig+0x478>)
 8002c12:	2201      	movs	r2, #1
 8002c14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c16:	f7fe ff07 	bl	8001a28 <HAL_GetTick>
 8002c1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c1c:	e008      	b.n	8002c30 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c1e:	f7fe ff03 	bl	8001a28 <HAL_GetTick>
 8002c22:	4602      	mov	r2, r0
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	1ad3      	subs	r3, r2, r3
 8002c28:	2b02      	cmp	r3, #2
 8002c2a:	d901      	bls.n	8002c30 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002c2c:	2303      	movs	r3, #3
 8002c2e:	e05c      	b.n	8002cea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c30:	4b11      	ldr	r3, [pc, #68]	; (8002c78 <HAL_RCC_OscConfig+0x470>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d0f0      	beq.n	8002c1e <HAL_RCC_OscConfig+0x416>
 8002c3c:	e054      	b.n	8002ce8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c3e:	4b10      	ldr	r3, [pc, #64]	; (8002c80 <HAL_RCC_OscConfig+0x478>)
 8002c40:	2200      	movs	r2, #0
 8002c42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c44:	f7fe fef0 	bl	8001a28 <HAL_GetTick>
 8002c48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c4a:	e008      	b.n	8002c5e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c4c:	f7fe feec 	bl	8001a28 <HAL_GetTick>
 8002c50:	4602      	mov	r2, r0
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	d901      	bls.n	8002c5e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e045      	b.n	8002cea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c5e:	4b06      	ldr	r3, [pc, #24]	; (8002c78 <HAL_RCC_OscConfig+0x470>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d1f0      	bne.n	8002c4c <HAL_RCC_OscConfig+0x444>
 8002c6a:	e03d      	b.n	8002ce8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	699b      	ldr	r3, [r3, #24]
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d107      	bne.n	8002c84 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e038      	b.n	8002cea <HAL_RCC_OscConfig+0x4e2>
 8002c78:	40023800 	.word	0x40023800
 8002c7c:	40007000 	.word	0x40007000
 8002c80:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c84:	4b1b      	ldr	r3, [pc, #108]	; (8002cf4 <HAL_RCC_OscConfig+0x4ec>)
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	699b      	ldr	r3, [r3, #24]
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d028      	beq.n	8002ce4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d121      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d11a      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cae:	68fa      	ldr	r2, [r7, #12]
 8002cb0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	687a      	ldr	r2, [r7, #4]
 8002cb8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002cba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d111      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cca:	085b      	lsrs	r3, r3, #1
 8002ccc:	3b01      	subs	r3, #1
 8002cce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d107      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cde:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d001      	beq.n	8002ce8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e000      	b.n	8002cea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002ce8:	2300      	movs	r3, #0
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3718      	adds	r7, #24
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	40023800 	.word	0x40023800

08002cf8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b084      	sub	sp, #16
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d101      	bne.n	8002d0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e0cc      	b.n	8002ea6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d0c:	4b68      	ldr	r3, [pc, #416]	; (8002eb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 0307 	and.w	r3, r3, #7
 8002d14:	683a      	ldr	r2, [r7, #0]
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d90c      	bls.n	8002d34 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d1a:	4b65      	ldr	r3, [pc, #404]	; (8002eb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d1c:	683a      	ldr	r2, [r7, #0]
 8002d1e:	b2d2      	uxtb	r2, r2
 8002d20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d22:	4b63      	ldr	r3, [pc, #396]	; (8002eb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0307 	and.w	r3, r3, #7
 8002d2a:	683a      	ldr	r2, [r7, #0]
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d001      	beq.n	8002d34 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e0b8      	b.n	8002ea6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 0302 	and.w	r3, r3, #2
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d020      	beq.n	8002d82 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0304 	and.w	r3, r3, #4
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d005      	beq.n	8002d58 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d4c:	4b59      	ldr	r3, [pc, #356]	; (8002eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	4a58      	ldr	r2, [pc, #352]	; (8002eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d52:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d56:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 0308 	and.w	r3, r3, #8
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d005      	beq.n	8002d70 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d64:	4b53      	ldr	r3, [pc, #332]	; (8002eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	4a52      	ldr	r2, [pc, #328]	; (8002eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d6a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d6e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d70:	4b50      	ldr	r3, [pc, #320]	; (8002eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	494d      	ldr	r1, [pc, #308]	; (8002eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0301 	and.w	r3, r3, #1
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d044      	beq.n	8002e18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d107      	bne.n	8002da6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d96:	4b47      	ldr	r3, [pc, #284]	; (8002eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d119      	bne.n	8002dd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e07f      	b.n	8002ea6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	2b02      	cmp	r3, #2
 8002dac:	d003      	beq.n	8002db6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002db2:	2b03      	cmp	r3, #3
 8002db4:	d107      	bne.n	8002dc6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002db6:	4b3f      	ldr	r3, [pc, #252]	; (8002eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d109      	bne.n	8002dd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e06f      	b.n	8002ea6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dc6:	4b3b      	ldr	r3, [pc, #236]	; (8002eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0302 	and.w	r3, r3, #2
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d101      	bne.n	8002dd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e067      	b.n	8002ea6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002dd6:	4b37      	ldr	r3, [pc, #220]	; (8002eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	f023 0203 	bic.w	r2, r3, #3
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	4934      	ldr	r1, [pc, #208]	; (8002eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002de4:	4313      	orrs	r3, r2
 8002de6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002de8:	f7fe fe1e 	bl	8001a28 <HAL_GetTick>
 8002dec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dee:	e00a      	b.n	8002e06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002df0:	f7fe fe1a 	bl	8001a28 <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d901      	bls.n	8002e06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	e04f      	b.n	8002ea6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e06:	4b2b      	ldr	r3, [pc, #172]	; (8002eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	f003 020c 	and.w	r2, r3, #12
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d1eb      	bne.n	8002df0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e18:	4b25      	ldr	r3, [pc, #148]	; (8002eb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 0307 	and.w	r3, r3, #7
 8002e20:	683a      	ldr	r2, [r7, #0]
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d20c      	bcs.n	8002e40 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e26:	4b22      	ldr	r3, [pc, #136]	; (8002eb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e28:	683a      	ldr	r2, [r7, #0]
 8002e2a:	b2d2      	uxtb	r2, r2
 8002e2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e2e:	4b20      	ldr	r3, [pc, #128]	; (8002eb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 0307 	and.w	r3, r3, #7
 8002e36:	683a      	ldr	r2, [r7, #0]
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d001      	beq.n	8002e40 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e032      	b.n	8002ea6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 0304 	and.w	r3, r3, #4
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d008      	beq.n	8002e5e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e4c:	4b19      	ldr	r3, [pc, #100]	; (8002eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	4916      	ldr	r1, [pc, #88]	; (8002eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0308 	and.w	r3, r3, #8
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d009      	beq.n	8002e7e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e6a:	4b12      	ldr	r3, [pc, #72]	; (8002eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	691b      	ldr	r3, [r3, #16]
 8002e76:	00db      	lsls	r3, r3, #3
 8002e78:	490e      	ldr	r1, [pc, #56]	; (8002eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e7e:	f000 f821 	bl	8002ec4 <HAL_RCC_GetSysClockFreq>
 8002e82:	4602      	mov	r2, r0
 8002e84:	4b0b      	ldr	r3, [pc, #44]	; (8002eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	091b      	lsrs	r3, r3, #4
 8002e8a:	f003 030f 	and.w	r3, r3, #15
 8002e8e:	490a      	ldr	r1, [pc, #40]	; (8002eb8 <HAL_RCC_ClockConfig+0x1c0>)
 8002e90:	5ccb      	ldrb	r3, [r1, r3]
 8002e92:	fa22 f303 	lsr.w	r3, r2, r3
 8002e96:	4a09      	ldr	r2, [pc, #36]	; (8002ebc <HAL_RCC_ClockConfig+0x1c4>)
 8002e98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002e9a:	4b09      	ldr	r3, [pc, #36]	; (8002ec0 <HAL_RCC_ClockConfig+0x1c8>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f7fe fd7e 	bl	80019a0 <HAL_InitTick>

  return HAL_OK;
 8002ea4:	2300      	movs	r3, #0
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3710      	adds	r7, #16
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	40023c00 	.word	0x40023c00
 8002eb4:	40023800 	.word	0x40023800
 8002eb8:	08005078 	.word	0x08005078
 8002ebc:	2000000c 	.word	0x2000000c
 8002ec0:	20000010 	.word	0x20000010

08002ec4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ec4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ec8:	b094      	sub	sp, #80	; 0x50
 8002eca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	647b      	str	r3, [r7, #68]	; 0x44
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002edc:	4b79      	ldr	r3, [pc, #484]	; (80030c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	f003 030c 	and.w	r3, r3, #12
 8002ee4:	2b08      	cmp	r3, #8
 8002ee6:	d00d      	beq.n	8002f04 <HAL_RCC_GetSysClockFreq+0x40>
 8002ee8:	2b08      	cmp	r3, #8
 8002eea:	f200 80e1 	bhi.w	80030b0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d002      	beq.n	8002ef8 <HAL_RCC_GetSysClockFreq+0x34>
 8002ef2:	2b04      	cmp	r3, #4
 8002ef4:	d003      	beq.n	8002efe <HAL_RCC_GetSysClockFreq+0x3a>
 8002ef6:	e0db      	b.n	80030b0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ef8:	4b73      	ldr	r3, [pc, #460]	; (80030c8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002efa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002efc:	e0db      	b.n	80030b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002efe:	4b73      	ldr	r3, [pc, #460]	; (80030cc <HAL_RCC_GetSysClockFreq+0x208>)
 8002f00:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f02:	e0d8      	b.n	80030b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f04:	4b6f      	ldr	r3, [pc, #444]	; (80030c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f0c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f0e:	4b6d      	ldr	r3, [pc, #436]	; (80030c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d063      	beq.n	8002fe2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f1a:	4b6a      	ldr	r3, [pc, #424]	; (80030c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	099b      	lsrs	r3, r3, #6
 8002f20:	2200      	movs	r2, #0
 8002f22:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f24:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f2c:	633b      	str	r3, [r7, #48]	; 0x30
 8002f2e:	2300      	movs	r3, #0
 8002f30:	637b      	str	r3, [r7, #52]	; 0x34
 8002f32:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002f36:	4622      	mov	r2, r4
 8002f38:	462b      	mov	r3, r5
 8002f3a:	f04f 0000 	mov.w	r0, #0
 8002f3e:	f04f 0100 	mov.w	r1, #0
 8002f42:	0159      	lsls	r1, r3, #5
 8002f44:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f48:	0150      	lsls	r0, r2, #5
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	460b      	mov	r3, r1
 8002f4e:	4621      	mov	r1, r4
 8002f50:	1a51      	subs	r1, r2, r1
 8002f52:	6139      	str	r1, [r7, #16]
 8002f54:	4629      	mov	r1, r5
 8002f56:	eb63 0301 	sbc.w	r3, r3, r1
 8002f5a:	617b      	str	r3, [r7, #20]
 8002f5c:	f04f 0200 	mov.w	r2, #0
 8002f60:	f04f 0300 	mov.w	r3, #0
 8002f64:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f68:	4659      	mov	r1, fp
 8002f6a:	018b      	lsls	r3, r1, #6
 8002f6c:	4651      	mov	r1, sl
 8002f6e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f72:	4651      	mov	r1, sl
 8002f74:	018a      	lsls	r2, r1, #6
 8002f76:	4651      	mov	r1, sl
 8002f78:	ebb2 0801 	subs.w	r8, r2, r1
 8002f7c:	4659      	mov	r1, fp
 8002f7e:	eb63 0901 	sbc.w	r9, r3, r1
 8002f82:	f04f 0200 	mov.w	r2, #0
 8002f86:	f04f 0300 	mov.w	r3, #0
 8002f8a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f8e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f92:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f96:	4690      	mov	r8, r2
 8002f98:	4699      	mov	r9, r3
 8002f9a:	4623      	mov	r3, r4
 8002f9c:	eb18 0303 	adds.w	r3, r8, r3
 8002fa0:	60bb      	str	r3, [r7, #8]
 8002fa2:	462b      	mov	r3, r5
 8002fa4:	eb49 0303 	adc.w	r3, r9, r3
 8002fa8:	60fb      	str	r3, [r7, #12]
 8002faa:	f04f 0200 	mov.w	r2, #0
 8002fae:	f04f 0300 	mov.w	r3, #0
 8002fb2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002fb6:	4629      	mov	r1, r5
 8002fb8:	024b      	lsls	r3, r1, #9
 8002fba:	4621      	mov	r1, r4
 8002fbc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002fc0:	4621      	mov	r1, r4
 8002fc2:	024a      	lsls	r2, r1, #9
 8002fc4:	4610      	mov	r0, r2
 8002fc6:	4619      	mov	r1, r3
 8002fc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fca:	2200      	movs	r2, #0
 8002fcc:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fce:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002fd0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002fd4:	f7fd fd7a 	bl	8000acc <__aeabi_uldivmod>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	460b      	mov	r3, r1
 8002fdc:	4613      	mov	r3, r2
 8002fde:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002fe0:	e058      	b.n	8003094 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fe2:	4b38      	ldr	r3, [pc, #224]	; (80030c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	099b      	lsrs	r3, r3, #6
 8002fe8:	2200      	movs	r2, #0
 8002fea:	4618      	mov	r0, r3
 8002fec:	4611      	mov	r1, r2
 8002fee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002ff2:	623b      	str	r3, [r7, #32]
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	627b      	str	r3, [r7, #36]	; 0x24
 8002ff8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002ffc:	4642      	mov	r2, r8
 8002ffe:	464b      	mov	r3, r9
 8003000:	f04f 0000 	mov.w	r0, #0
 8003004:	f04f 0100 	mov.w	r1, #0
 8003008:	0159      	lsls	r1, r3, #5
 800300a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800300e:	0150      	lsls	r0, r2, #5
 8003010:	4602      	mov	r2, r0
 8003012:	460b      	mov	r3, r1
 8003014:	4641      	mov	r1, r8
 8003016:	ebb2 0a01 	subs.w	sl, r2, r1
 800301a:	4649      	mov	r1, r9
 800301c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003020:	f04f 0200 	mov.w	r2, #0
 8003024:	f04f 0300 	mov.w	r3, #0
 8003028:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800302c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003030:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003034:	ebb2 040a 	subs.w	r4, r2, sl
 8003038:	eb63 050b 	sbc.w	r5, r3, fp
 800303c:	f04f 0200 	mov.w	r2, #0
 8003040:	f04f 0300 	mov.w	r3, #0
 8003044:	00eb      	lsls	r3, r5, #3
 8003046:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800304a:	00e2      	lsls	r2, r4, #3
 800304c:	4614      	mov	r4, r2
 800304e:	461d      	mov	r5, r3
 8003050:	4643      	mov	r3, r8
 8003052:	18e3      	adds	r3, r4, r3
 8003054:	603b      	str	r3, [r7, #0]
 8003056:	464b      	mov	r3, r9
 8003058:	eb45 0303 	adc.w	r3, r5, r3
 800305c:	607b      	str	r3, [r7, #4]
 800305e:	f04f 0200 	mov.w	r2, #0
 8003062:	f04f 0300 	mov.w	r3, #0
 8003066:	e9d7 4500 	ldrd	r4, r5, [r7]
 800306a:	4629      	mov	r1, r5
 800306c:	028b      	lsls	r3, r1, #10
 800306e:	4621      	mov	r1, r4
 8003070:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003074:	4621      	mov	r1, r4
 8003076:	028a      	lsls	r2, r1, #10
 8003078:	4610      	mov	r0, r2
 800307a:	4619      	mov	r1, r3
 800307c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800307e:	2200      	movs	r2, #0
 8003080:	61bb      	str	r3, [r7, #24]
 8003082:	61fa      	str	r2, [r7, #28]
 8003084:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003088:	f7fd fd20 	bl	8000acc <__aeabi_uldivmod>
 800308c:	4602      	mov	r2, r0
 800308e:	460b      	mov	r3, r1
 8003090:	4613      	mov	r3, r2
 8003092:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003094:	4b0b      	ldr	r3, [pc, #44]	; (80030c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	0c1b      	lsrs	r3, r3, #16
 800309a:	f003 0303 	and.w	r3, r3, #3
 800309e:	3301      	adds	r3, #1
 80030a0:	005b      	lsls	r3, r3, #1
 80030a2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80030a4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80030a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80030ac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80030ae:	e002      	b.n	80030b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80030b0:	4b05      	ldr	r3, [pc, #20]	; (80030c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80030b2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80030b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3750      	adds	r7, #80	; 0x50
 80030bc:	46bd      	mov	sp, r7
 80030be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030c2:	bf00      	nop
 80030c4:	40023800 	.word	0x40023800
 80030c8:	00f42400 	.word	0x00f42400
 80030cc:	007a1200 	.word	0x007a1200

080030d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030d0:	b480      	push	{r7}
 80030d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030d4:	4b03      	ldr	r3, [pc, #12]	; (80030e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80030d6:	681b      	ldr	r3, [r3, #0]
}
 80030d8:	4618      	mov	r0, r3
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr
 80030e2:	bf00      	nop
 80030e4:	2000000c 	.word	0x2000000c

080030e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80030ec:	f7ff fff0 	bl	80030d0 <HAL_RCC_GetHCLKFreq>
 80030f0:	4602      	mov	r2, r0
 80030f2:	4b05      	ldr	r3, [pc, #20]	; (8003108 <HAL_RCC_GetPCLK1Freq+0x20>)
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	0a9b      	lsrs	r3, r3, #10
 80030f8:	f003 0307 	and.w	r3, r3, #7
 80030fc:	4903      	ldr	r1, [pc, #12]	; (800310c <HAL_RCC_GetPCLK1Freq+0x24>)
 80030fe:	5ccb      	ldrb	r3, [r1, r3]
 8003100:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003104:	4618      	mov	r0, r3
 8003106:	bd80      	pop	{r7, pc}
 8003108:	40023800 	.word	0x40023800
 800310c:	08005088 	.word	0x08005088

08003110 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003114:	f7ff ffdc 	bl	80030d0 <HAL_RCC_GetHCLKFreq>
 8003118:	4602      	mov	r2, r0
 800311a:	4b05      	ldr	r3, [pc, #20]	; (8003130 <HAL_RCC_GetPCLK2Freq+0x20>)
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	0b5b      	lsrs	r3, r3, #13
 8003120:	f003 0307 	and.w	r3, r3, #7
 8003124:	4903      	ldr	r1, [pc, #12]	; (8003134 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003126:	5ccb      	ldrb	r3, [r1, r3]
 8003128:	fa22 f303 	lsr.w	r3, r2, r3
}
 800312c:	4618      	mov	r0, r3
 800312e:	bd80      	pop	{r7, pc}
 8003130:	40023800 	.word	0x40023800
 8003134:	08005088 	.word	0x08005088

08003138 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b082      	sub	sp, #8
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d101      	bne.n	800314a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e03f      	b.n	80031ca <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003150:	b2db      	uxtb	r3, r3
 8003152:	2b00      	cmp	r3, #0
 8003154:	d106      	bne.n	8003164 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2200      	movs	r2, #0
 800315a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f7fe fa8c 	bl	800167c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2224      	movs	r2, #36	; 0x24
 8003168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	68da      	ldr	r2, [r3, #12]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800317a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800317c:	6878      	ldr	r0, [r7, #4]
 800317e:	f000 fec7 	bl	8003f10 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	691a      	ldr	r2, [r3, #16]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003190:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	695a      	ldr	r2, [r3, #20]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80031a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	68da      	ldr	r2, [r3, #12]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80031b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2200      	movs	r2, #0
 80031b6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2220      	movs	r2, #32
 80031bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2220      	movs	r2, #32
 80031c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80031c8:	2300      	movs	r3, #0
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3708      	adds	r7, #8
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}

080031d2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031d2:	b580      	push	{r7, lr}
 80031d4:	b08a      	sub	sp, #40	; 0x28
 80031d6:	af02      	add	r7, sp, #8
 80031d8:	60f8      	str	r0, [r7, #12]
 80031da:	60b9      	str	r1, [r7, #8]
 80031dc:	603b      	str	r3, [r7, #0]
 80031de:	4613      	mov	r3, r2
 80031e0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80031e2:	2300      	movs	r3, #0
 80031e4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	2b20      	cmp	r3, #32
 80031f0:	d17c      	bne.n	80032ec <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d002      	beq.n	80031fe <HAL_UART_Transmit+0x2c>
 80031f8:	88fb      	ldrh	r3, [r7, #6]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d101      	bne.n	8003202 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e075      	b.n	80032ee <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003208:	2b01      	cmp	r3, #1
 800320a:	d101      	bne.n	8003210 <HAL_UART_Transmit+0x3e>
 800320c:	2302      	movs	r3, #2
 800320e:	e06e      	b.n	80032ee <HAL_UART_Transmit+0x11c>
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2201      	movs	r2, #1
 8003214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2200      	movs	r2, #0
 800321c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2221      	movs	r2, #33	; 0x21
 8003222:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003226:	f7fe fbff 	bl	8001a28 <HAL_GetTick>
 800322a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	88fa      	ldrh	r2, [r7, #6]
 8003230:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	88fa      	ldrh	r2, [r7, #6]
 8003236:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003240:	d108      	bne.n	8003254 <HAL_UART_Transmit+0x82>
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	691b      	ldr	r3, [r3, #16]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d104      	bne.n	8003254 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800324a:	2300      	movs	r3, #0
 800324c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	61bb      	str	r3, [r7, #24]
 8003252:	e003      	b.n	800325c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003258:	2300      	movs	r3, #0
 800325a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2200      	movs	r2, #0
 8003260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003264:	e02a      	b.n	80032bc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	9300      	str	r3, [sp, #0]
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	2200      	movs	r2, #0
 800326e:	2180      	movs	r1, #128	; 0x80
 8003270:	68f8      	ldr	r0, [r7, #12]
 8003272:	f000 fc1c 	bl	8003aae <UART_WaitOnFlagUntilTimeout>
 8003276:	4603      	mov	r3, r0
 8003278:	2b00      	cmp	r3, #0
 800327a:	d001      	beq.n	8003280 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800327c:	2303      	movs	r3, #3
 800327e:	e036      	b.n	80032ee <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003280:	69fb      	ldr	r3, [r7, #28]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d10b      	bne.n	800329e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003286:	69bb      	ldr	r3, [r7, #24]
 8003288:	881b      	ldrh	r3, [r3, #0]
 800328a:	461a      	mov	r2, r3
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003294:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003296:	69bb      	ldr	r3, [r7, #24]
 8003298:	3302      	adds	r3, #2
 800329a:	61bb      	str	r3, [r7, #24]
 800329c:	e007      	b.n	80032ae <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800329e:	69fb      	ldr	r3, [r7, #28]
 80032a0:	781a      	ldrb	r2, [r3, #0]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80032a8:	69fb      	ldr	r3, [r7, #28]
 80032aa:	3301      	adds	r3, #1
 80032ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80032b2:	b29b      	uxth	r3, r3
 80032b4:	3b01      	subs	r3, #1
 80032b6:	b29a      	uxth	r2, r3
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80032c0:	b29b      	uxth	r3, r3
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d1cf      	bne.n	8003266 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	9300      	str	r3, [sp, #0]
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	2200      	movs	r2, #0
 80032ce:	2140      	movs	r1, #64	; 0x40
 80032d0:	68f8      	ldr	r0, [r7, #12]
 80032d2:	f000 fbec 	bl	8003aae <UART_WaitOnFlagUntilTimeout>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d001      	beq.n	80032e0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80032dc:	2303      	movs	r3, #3
 80032de:	e006      	b.n	80032ee <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2220      	movs	r2, #32
 80032e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80032e8:	2300      	movs	r3, #0
 80032ea:	e000      	b.n	80032ee <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80032ec:	2302      	movs	r3, #2
  }
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3720      	adds	r7, #32
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}
	...

080032f8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b08c      	sub	sp, #48	; 0x30
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	60f8      	str	r0, [r7, #12]
 8003300:	60b9      	str	r1, [r7, #8]
 8003302:	4613      	mov	r3, r2
 8003304:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800330c:	b2db      	uxtb	r3, r3
 800330e:	2b20      	cmp	r3, #32
 8003310:	d165      	bne.n	80033de <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d002      	beq.n	800331e <HAL_UART_Transmit_DMA+0x26>
 8003318:	88fb      	ldrh	r3, [r7, #6]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d101      	bne.n	8003322 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e05e      	b.n	80033e0 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003328:	2b01      	cmp	r3, #1
 800332a:	d101      	bne.n	8003330 <HAL_UART_Transmit_DMA+0x38>
 800332c:	2302      	movs	r3, #2
 800332e:	e057      	b.n	80033e0 <HAL_UART_Transmit_DMA+0xe8>
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2201      	movs	r2, #1
 8003334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8003338:	68ba      	ldr	r2, [r7, #8]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	88fa      	ldrh	r2, [r7, #6]
 8003342:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	88fa      	ldrh	r2, [r7, #6]
 8003348:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2200      	movs	r2, #0
 800334e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2221      	movs	r2, #33	; 0x21
 8003354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800335c:	4a22      	ldr	r2, [pc, #136]	; (80033e8 <HAL_UART_Transmit_DMA+0xf0>)
 800335e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003364:	4a21      	ldr	r2, [pc, #132]	; (80033ec <HAL_UART_Transmit_DMA+0xf4>)
 8003366:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800336c:	4a20      	ldr	r2, [pc, #128]	; (80033f0 <HAL_UART_Transmit_DMA+0xf8>)
 800336e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003374:	2200      	movs	r2, #0
 8003376:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8003378:	f107 0308 	add.w	r3, r7, #8
 800337c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003384:	6819      	ldr	r1, [r3, #0]
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	3304      	adds	r3, #4
 800338c:	461a      	mov	r2, r3
 800338e:	88fb      	ldrh	r3, [r7, #6]
 8003390:	f7fe fd16 	bl	8001dc0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800339c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2200      	movs	r2, #0
 80033a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	3314      	adds	r3, #20
 80033ac:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033ae:	69bb      	ldr	r3, [r7, #24]
 80033b0:	e853 3f00 	ldrex	r3, [r3]
 80033b4:	617b      	str	r3, [r7, #20]
   return(result);
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	3314      	adds	r3, #20
 80033c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80033c6:	627a      	str	r2, [r7, #36]	; 0x24
 80033c8:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033ca:	6a39      	ldr	r1, [r7, #32]
 80033cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033ce:	e841 2300 	strex	r3, r2, [r1]
 80033d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80033d4:	69fb      	ldr	r3, [r7, #28]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d1e5      	bne.n	80033a6 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 80033da:	2300      	movs	r3, #0
 80033dc:	e000      	b.n	80033e0 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 80033de:	2302      	movs	r3, #2
  }
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3730      	adds	r7, #48	; 0x30
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	08003965 	.word	0x08003965
 80033ec:	080039ff 	.word	0x080039ff
 80033f0:	08003a1b 	.word	0x08003a1b

080033f4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b0ba      	sub	sp, #232	; 0xe8
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	695b      	ldr	r3, [r3, #20]
 8003416:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800341a:	2300      	movs	r3, #0
 800341c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003420:	2300      	movs	r3, #0
 8003422:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003426:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800342a:	f003 030f 	and.w	r3, r3, #15
 800342e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003432:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003436:	2b00      	cmp	r3, #0
 8003438:	d10f      	bne.n	800345a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800343a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800343e:	f003 0320 	and.w	r3, r3, #32
 8003442:	2b00      	cmp	r3, #0
 8003444:	d009      	beq.n	800345a <HAL_UART_IRQHandler+0x66>
 8003446:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800344a:	f003 0320 	and.w	r3, r3, #32
 800344e:	2b00      	cmp	r3, #0
 8003450:	d003      	beq.n	800345a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f000 fca0 	bl	8003d98 <UART_Receive_IT>
      return;
 8003458:	e256      	b.n	8003908 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800345a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800345e:	2b00      	cmp	r3, #0
 8003460:	f000 80de 	beq.w	8003620 <HAL_UART_IRQHandler+0x22c>
 8003464:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003468:	f003 0301 	and.w	r3, r3, #1
 800346c:	2b00      	cmp	r3, #0
 800346e:	d106      	bne.n	800347e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003470:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003474:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003478:	2b00      	cmp	r3, #0
 800347a:	f000 80d1 	beq.w	8003620 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800347e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003482:	f003 0301 	and.w	r3, r3, #1
 8003486:	2b00      	cmp	r3, #0
 8003488:	d00b      	beq.n	80034a2 <HAL_UART_IRQHandler+0xae>
 800348a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800348e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003492:	2b00      	cmp	r3, #0
 8003494:	d005      	beq.n	80034a2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349a:	f043 0201 	orr.w	r2, r3, #1
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80034a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034a6:	f003 0304 	and.w	r3, r3, #4
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d00b      	beq.n	80034c6 <HAL_UART_IRQHandler+0xd2>
 80034ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80034b2:	f003 0301 	and.w	r3, r3, #1
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d005      	beq.n	80034c6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034be:	f043 0202 	orr.w	r2, r3, #2
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80034c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034ca:	f003 0302 	and.w	r3, r3, #2
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d00b      	beq.n	80034ea <HAL_UART_IRQHandler+0xf6>
 80034d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80034d6:	f003 0301 	and.w	r3, r3, #1
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d005      	beq.n	80034ea <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e2:	f043 0204 	orr.w	r2, r3, #4
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80034ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034ee:	f003 0308 	and.w	r3, r3, #8
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d011      	beq.n	800351a <HAL_UART_IRQHandler+0x126>
 80034f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034fa:	f003 0320 	and.w	r3, r3, #32
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d105      	bne.n	800350e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003502:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003506:	f003 0301 	and.w	r3, r3, #1
 800350a:	2b00      	cmp	r3, #0
 800350c:	d005      	beq.n	800351a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003512:	f043 0208 	orr.w	r2, r3, #8
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351e:	2b00      	cmp	r3, #0
 8003520:	f000 81ed 	beq.w	80038fe <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003524:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003528:	f003 0320 	and.w	r3, r3, #32
 800352c:	2b00      	cmp	r3, #0
 800352e:	d008      	beq.n	8003542 <HAL_UART_IRQHandler+0x14e>
 8003530:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003534:	f003 0320 	and.w	r3, r3, #32
 8003538:	2b00      	cmp	r3, #0
 800353a:	d002      	beq.n	8003542 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f000 fc2b 	bl	8003d98 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	695b      	ldr	r3, [r3, #20]
 8003548:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800354c:	2b40      	cmp	r3, #64	; 0x40
 800354e:	bf0c      	ite	eq
 8003550:	2301      	moveq	r3, #1
 8003552:	2300      	movne	r3, #0
 8003554:	b2db      	uxtb	r3, r3
 8003556:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355e:	f003 0308 	and.w	r3, r3, #8
 8003562:	2b00      	cmp	r3, #0
 8003564:	d103      	bne.n	800356e <HAL_UART_IRQHandler+0x17a>
 8003566:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800356a:	2b00      	cmp	r3, #0
 800356c:	d04f      	beq.n	800360e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f000 fb33 	bl	8003bda <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	695b      	ldr	r3, [r3, #20]
 800357a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800357e:	2b40      	cmp	r3, #64	; 0x40
 8003580:	d141      	bne.n	8003606 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	3314      	adds	r3, #20
 8003588:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800358c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003590:	e853 3f00 	ldrex	r3, [r3]
 8003594:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003598:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800359c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	3314      	adds	r3, #20
 80035aa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80035ae:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80035b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035b6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80035ba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80035be:	e841 2300 	strex	r3, r2, [r1]
 80035c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80035c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d1d9      	bne.n	8003582 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d013      	beq.n	80035fe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035da:	4a7d      	ldr	r2, [pc, #500]	; (80037d0 <HAL_UART_IRQHandler+0x3dc>)
 80035dc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035e2:	4618      	mov	r0, r3
 80035e4:	f7fe fcb4 	bl	8001f50 <HAL_DMA_Abort_IT>
 80035e8:	4603      	mov	r3, r0
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d016      	beq.n	800361c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035f4:	687a      	ldr	r2, [r7, #4]
 80035f6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80035f8:	4610      	mov	r0, r2
 80035fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035fc:	e00e      	b.n	800361c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f000 f99a 	bl	8003938 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003604:	e00a      	b.n	800361c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f000 f996 	bl	8003938 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800360c:	e006      	b.n	800361c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f000 f992 	bl	8003938 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2200      	movs	r2, #0
 8003618:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800361a:	e170      	b.n	80038fe <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800361c:	bf00      	nop
    return;
 800361e:	e16e      	b.n	80038fe <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003624:	2b01      	cmp	r3, #1
 8003626:	f040 814a 	bne.w	80038be <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800362a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800362e:	f003 0310 	and.w	r3, r3, #16
 8003632:	2b00      	cmp	r3, #0
 8003634:	f000 8143 	beq.w	80038be <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003638:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800363c:	f003 0310 	and.w	r3, r3, #16
 8003640:	2b00      	cmp	r3, #0
 8003642:	f000 813c 	beq.w	80038be <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003646:	2300      	movs	r3, #0
 8003648:	60bb      	str	r3, [r7, #8]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	60bb      	str	r3, [r7, #8]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	60bb      	str	r3, [r7, #8]
 800365a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	695b      	ldr	r3, [r3, #20]
 8003662:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003666:	2b40      	cmp	r3, #64	; 0x40
 8003668:	f040 80b4 	bne.w	80037d4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003678:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800367c:	2b00      	cmp	r3, #0
 800367e:	f000 8140 	beq.w	8003902 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003686:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800368a:	429a      	cmp	r2, r3
 800368c:	f080 8139 	bcs.w	8003902 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003696:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800369c:	69db      	ldr	r3, [r3, #28]
 800369e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036a2:	f000 8088 	beq.w	80037b6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	330c      	adds	r3, #12
 80036ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80036b4:	e853 3f00 	ldrex	r3, [r3]
 80036b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80036bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80036c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	330c      	adds	r3, #12
 80036ce:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80036d2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80036d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036da:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80036de:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80036e2:	e841 2300 	strex	r3, r2, [r1]
 80036e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80036ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d1d9      	bne.n	80036a6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	3314      	adds	r3, #20
 80036f8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036fc:	e853 3f00 	ldrex	r3, [r3]
 8003700:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003702:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003704:	f023 0301 	bic.w	r3, r3, #1
 8003708:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	3314      	adds	r3, #20
 8003712:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003716:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800371a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800371c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800371e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003722:	e841 2300 	strex	r3, r2, [r1]
 8003726:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003728:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800372a:	2b00      	cmp	r3, #0
 800372c:	d1e1      	bne.n	80036f2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	3314      	adds	r3, #20
 8003734:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003736:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003738:	e853 3f00 	ldrex	r3, [r3]
 800373c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800373e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003740:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003744:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	3314      	adds	r3, #20
 800374e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003752:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003754:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003756:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003758:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800375a:	e841 2300 	strex	r3, r2, [r1]
 800375e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003760:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003762:	2b00      	cmp	r3, #0
 8003764:	d1e3      	bne.n	800372e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2220      	movs	r2, #32
 800376a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	330c      	adds	r3, #12
 800377a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800377c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800377e:	e853 3f00 	ldrex	r3, [r3]
 8003782:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003784:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003786:	f023 0310 	bic.w	r3, r3, #16
 800378a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	330c      	adds	r3, #12
 8003794:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003798:	65ba      	str	r2, [r7, #88]	; 0x58
 800379a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800379c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800379e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80037a0:	e841 2300 	strex	r3, r2, [r1]
 80037a4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80037a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d1e3      	bne.n	8003774 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037b0:	4618      	mov	r0, r3
 80037b2:	f7fe fb5d 	bl	8001e70 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80037be:	b29b      	uxth	r3, r3
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	b29b      	uxth	r3, r3
 80037c4:	4619      	mov	r1, r3
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f000 f8c0 	bl	800394c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80037cc:	e099      	b.n	8003902 <HAL_UART_IRQHandler+0x50e>
 80037ce:	bf00      	nop
 80037d0:	08003ca1 	.word	0x08003ca1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80037dc:	b29b      	uxth	r3, r3
 80037de:	1ad3      	subs	r3, r2, r3
 80037e0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80037e8:	b29b      	uxth	r3, r3
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	f000 808b 	beq.w	8003906 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80037f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	f000 8086 	beq.w	8003906 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	330c      	adds	r3, #12
 8003800:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003804:	e853 3f00 	ldrex	r3, [r3]
 8003808:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800380a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800380c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003810:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	330c      	adds	r3, #12
 800381a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800381e:	647a      	str	r2, [r7, #68]	; 0x44
 8003820:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003822:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003824:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003826:	e841 2300 	strex	r3, r2, [r1]
 800382a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800382c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800382e:	2b00      	cmp	r3, #0
 8003830:	d1e3      	bne.n	80037fa <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	3314      	adds	r3, #20
 8003838:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800383a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800383c:	e853 3f00 	ldrex	r3, [r3]
 8003840:	623b      	str	r3, [r7, #32]
   return(result);
 8003842:	6a3b      	ldr	r3, [r7, #32]
 8003844:	f023 0301 	bic.w	r3, r3, #1
 8003848:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	3314      	adds	r3, #20
 8003852:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003856:	633a      	str	r2, [r7, #48]	; 0x30
 8003858:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800385a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800385c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800385e:	e841 2300 	strex	r3, r2, [r1]
 8003862:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003866:	2b00      	cmp	r3, #0
 8003868:	d1e3      	bne.n	8003832 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2220      	movs	r2, #32
 800386e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	330c      	adds	r3, #12
 800387e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	e853 3f00 	ldrex	r3, [r3]
 8003886:	60fb      	str	r3, [r7, #12]
   return(result);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f023 0310 	bic.w	r3, r3, #16
 800388e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	330c      	adds	r3, #12
 8003898:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800389c:	61fa      	str	r2, [r7, #28]
 800389e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038a0:	69b9      	ldr	r1, [r7, #24]
 80038a2:	69fa      	ldr	r2, [r7, #28]
 80038a4:	e841 2300 	strex	r3, r2, [r1]
 80038a8:	617b      	str	r3, [r7, #20]
   return(result);
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d1e3      	bne.n	8003878 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80038b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80038b4:	4619      	mov	r1, r3
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f000 f848 	bl	800394c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80038bc:	e023      	b.n	8003906 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80038be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d009      	beq.n	80038de <HAL_UART_IRQHandler+0x4ea>
 80038ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d003      	beq.n	80038de <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f000 f9f6 	bl	8003cc8 <UART_Transmit_IT>
    return;
 80038dc:	e014      	b.n	8003908 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80038de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d00e      	beq.n	8003908 <HAL_UART_IRQHandler+0x514>
 80038ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d008      	beq.n	8003908 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f000 fa36 	bl	8003d68 <UART_EndTransmit_IT>
    return;
 80038fc:	e004      	b.n	8003908 <HAL_UART_IRQHandler+0x514>
    return;
 80038fe:	bf00      	nop
 8003900:	e002      	b.n	8003908 <HAL_UART_IRQHandler+0x514>
      return;
 8003902:	bf00      	nop
 8003904:	e000      	b.n	8003908 <HAL_UART_IRQHandler+0x514>
      return;
 8003906:	bf00      	nop
  }
}
 8003908:	37e8      	adds	r7, #232	; 0xe8
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop

08003910 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003910:	b480      	push	{r7}
 8003912:	b083      	sub	sp, #12
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003918:	bf00      	nop
 800391a:	370c      	adds	r7, #12
 800391c:	46bd      	mov	sp, r7
 800391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003922:	4770      	bx	lr

08003924 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003924:	b480      	push	{r7}
 8003926:	b083      	sub	sp, #12
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800392c:	bf00      	nop
 800392e:	370c      	adds	r7, #12
 8003930:	46bd      	mov	sp, r7
 8003932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003936:	4770      	bx	lr

08003938 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003938:	b480      	push	{r7}
 800393a:	b083      	sub	sp, #12
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003940:	bf00      	nop
 8003942:	370c      	adds	r7, #12
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr

0800394c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800394c:	b480      	push	{r7}
 800394e:	b083      	sub	sp, #12
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	460b      	mov	r3, r1
 8003956:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003958:	bf00      	nop
 800395a:	370c      	adds	r7, #12
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr

08003964 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b090      	sub	sp, #64	; 0x40
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003970:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800397c:	2b00      	cmp	r3, #0
 800397e:	d137      	bne.n	80039f0 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8003980:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003982:	2200      	movs	r2, #0
 8003984:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003986:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	3314      	adds	r3, #20
 800398c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800398e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003990:	e853 3f00 	ldrex	r3, [r3]
 8003994:	623b      	str	r3, [r7, #32]
   return(result);
 8003996:	6a3b      	ldr	r3, [r7, #32]
 8003998:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800399c:	63bb      	str	r3, [r7, #56]	; 0x38
 800399e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	3314      	adds	r3, #20
 80039a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80039a6:	633a      	str	r2, [r7, #48]	; 0x30
 80039a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80039ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039ae:	e841 2300 	strex	r3, r2, [r1]
 80039b2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80039b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d1e5      	bne.n	8003986 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80039ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	330c      	adds	r3, #12
 80039c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	e853 3f00 	ldrex	r3, [r3]
 80039c8:	60fb      	str	r3, [r7, #12]
   return(result);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039d0:	637b      	str	r3, [r7, #52]	; 0x34
 80039d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	330c      	adds	r3, #12
 80039d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80039da:	61fa      	str	r2, [r7, #28]
 80039dc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039de:	69b9      	ldr	r1, [r7, #24]
 80039e0:	69fa      	ldr	r2, [r7, #28]
 80039e2:	e841 2300 	strex	r3, r2, [r1]
 80039e6:	617b      	str	r3, [r7, #20]
   return(result);
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d1e5      	bne.n	80039ba <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80039ee:	e002      	b.n	80039f6 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80039f0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80039f2:	f7ff ff8d 	bl	8003910 <HAL_UART_TxCpltCallback>
}
 80039f6:	bf00      	nop
 80039f8:	3740      	adds	r7, #64	; 0x40
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}

080039fe <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80039fe:	b580      	push	{r7, lr}
 8003a00:	b084      	sub	sp, #16
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a0a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003a0c:	68f8      	ldr	r0, [r7, #12]
 8003a0e:	f7ff ff89 	bl	8003924 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a12:	bf00      	nop
 8003a14:	3710      	adds	r7, #16
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}

08003a1a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003a1a:	b580      	push	{r7, lr}
 8003a1c:	b084      	sub	sp, #16
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003a22:	2300      	movs	r3, #0
 8003a24:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a2a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	695b      	ldr	r3, [r3, #20]
 8003a32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a36:	2b80      	cmp	r3, #128	; 0x80
 8003a38:	bf0c      	ite	eq
 8003a3a:	2301      	moveq	r3, #1
 8003a3c:	2300      	movne	r3, #0
 8003a3e:	b2db      	uxtb	r3, r3
 8003a40:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	2b21      	cmp	r3, #33	; 0x21
 8003a4c:	d108      	bne.n	8003a60 <UART_DMAError+0x46>
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d005      	beq.n	8003a60 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	2200      	movs	r2, #0
 8003a58:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003a5a:	68b8      	ldr	r0, [r7, #8]
 8003a5c:	f000 f895 	bl	8003b8a <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	695b      	ldr	r3, [r3, #20]
 8003a66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a6a:	2b40      	cmp	r3, #64	; 0x40
 8003a6c:	bf0c      	ite	eq
 8003a6e:	2301      	moveq	r3, #1
 8003a70:	2300      	movne	r3, #0
 8003a72:	b2db      	uxtb	r3, r3
 8003a74:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	2b22      	cmp	r3, #34	; 0x22
 8003a80:	d108      	bne.n	8003a94 <UART_DMAError+0x7a>
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d005      	beq.n	8003a94 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003a8e:	68b8      	ldr	r0, [r7, #8]
 8003a90:	f000 f8a3 	bl	8003bda <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a98:	f043 0210 	orr.w	r2, r3, #16
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003aa0:	68b8      	ldr	r0, [r7, #8]
 8003aa2:	f7ff ff49 	bl	8003938 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003aa6:	bf00      	nop
 8003aa8:	3710      	adds	r7, #16
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}

08003aae <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003aae:	b580      	push	{r7, lr}
 8003ab0:	b090      	sub	sp, #64	; 0x40
 8003ab2:	af00      	add	r7, sp, #0
 8003ab4:	60f8      	str	r0, [r7, #12]
 8003ab6:	60b9      	str	r1, [r7, #8]
 8003ab8:	603b      	str	r3, [r7, #0]
 8003aba:	4613      	mov	r3, r2
 8003abc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003abe:	e050      	b.n	8003b62 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ac0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ac2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ac6:	d04c      	beq.n	8003b62 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003ac8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d007      	beq.n	8003ade <UART_WaitOnFlagUntilTimeout+0x30>
 8003ace:	f7fd ffab 	bl	8001a28 <HAL_GetTick>
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	1ad3      	subs	r3, r2, r3
 8003ad8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ada:	429a      	cmp	r2, r3
 8003adc:	d241      	bcs.n	8003b62 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	330c      	adds	r3, #12
 8003ae4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ae8:	e853 3f00 	ldrex	r3, [r3]
 8003aec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003af4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	330c      	adds	r3, #12
 8003afc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003afe:	637a      	str	r2, [r7, #52]	; 0x34
 8003b00:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b02:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003b04:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b06:	e841 2300 	strex	r3, r2, [r1]
 8003b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d1e5      	bne.n	8003ade <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	3314      	adds	r3, #20
 8003b18:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	e853 3f00 	ldrex	r3, [r3]
 8003b20:	613b      	str	r3, [r7, #16]
   return(result);
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	f023 0301 	bic.w	r3, r3, #1
 8003b28:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	3314      	adds	r3, #20
 8003b30:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b32:	623a      	str	r2, [r7, #32]
 8003b34:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b36:	69f9      	ldr	r1, [r7, #28]
 8003b38:	6a3a      	ldr	r2, [r7, #32]
 8003b3a:	e841 2300 	strex	r3, r2, [r1]
 8003b3e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b40:	69bb      	ldr	r3, [r7, #24]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d1e5      	bne.n	8003b12 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2220      	movs	r2, #32
 8003b4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2220      	movs	r2, #32
 8003b52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003b5e:	2303      	movs	r3, #3
 8003b60:	e00f      	b.n	8003b82 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	68ba      	ldr	r2, [r7, #8]
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	bf0c      	ite	eq
 8003b72:	2301      	moveq	r3, #1
 8003b74:	2300      	movne	r3, #0
 8003b76:	b2db      	uxtb	r3, r3
 8003b78:	461a      	mov	r2, r3
 8003b7a:	79fb      	ldrb	r3, [r7, #7]
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d09f      	beq.n	8003ac0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003b80:	2300      	movs	r3, #0
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3740      	adds	r7, #64	; 0x40
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}

08003b8a <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003b8a:	b480      	push	{r7}
 8003b8c:	b089      	sub	sp, #36	; 0x24
 8003b8e:	af00      	add	r7, sp, #0
 8003b90:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	330c      	adds	r3, #12
 8003b98:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	e853 3f00 	ldrex	r3, [r3]
 8003ba0:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003ba8:	61fb      	str	r3, [r7, #28]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	330c      	adds	r3, #12
 8003bb0:	69fa      	ldr	r2, [r7, #28]
 8003bb2:	61ba      	str	r2, [r7, #24]
 8003bb4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bb6:	6979      	ldr	r1, [r7, #20]
 8003bb8:	69ba      	ldr	r2, [r7, #24]
 8003bba:	e841 2300 	strex	r3, r2, [r1]
 8003bbe:	613b      	str	r3, [r7, #16]
   return(result);
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d1e5      	bne.n	8003b92 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2220      	movs	r2, #32
 8003bca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8003bce:	bf00      	nop
 8003bd0:	3724      	adds	r7, #36	; 0x24
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd8:	4770      	bx	lr

08003bda <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003bda:	b480      	push	{r7}
 8003bdc:	b095      	sub	sp, #84	; 0x54
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	330c      	adds	r3, #12
 8003be8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bec:	e853 3f00 	ldrex	r3, [r3]
 8003bf0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bf4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003bf8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	330c      	adds	r3, #12
 8003c00:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003c02:	643a      	str	r2, [r7, #64]	; 0x40
 8003c04:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c06:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003c08:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003c0a:	e841 2300 	strex	r3, r2, [r1]
 8003c0e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d1e5      	bne.n	8003be2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	3314      	adds	r3, #20
 8003c1c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c1e:	6a3b      	ldr	r3, [r7, #32]
 8003c20:	e853 3f00 	ldrex	r3, [r3]
 8003c24:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c26:	69fb      	ldr	r3, [r7, #28]
 8003c28:	f023 0301 	bic.w	r3, r3, #1
 8003c2c:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	3314      	adds	r3, #20
 8003c34:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c36:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c38:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c3a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c3e:	e841 2300 	strex	r3, r2, [r1]
 8003c42:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d1e5      	bne.n	8003c16 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d119      	bne.n	8003c86 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	330c      	adds	r3, #12
 8003c58:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	e853 3f00 	ldrex	r3, [r3]
 8003c60:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	f023 0310 	bic.w	r3, r3, #16
 8003c68:	647b      	str	r3, [r7, #68]	; 0x44
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	330c      	adds	r3, #12
 8003c70:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003c72:	61ba      	str	r2, [r7, #24]
 8003c74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c76:	6979      	ldr	r1, [r7, #20]
 8003c78:	69ba      	ldr	r2, [r7, #24]
 8003c7a:	e841 2300 	strex	r3, r2, [r1]
 8003c7e:	613b      	str	r3, [r7, #16]
   return(result);
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d1e5      	bne.n	8003c52 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2220      	movs	r2, #32
 8003c8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2200      	movs	r2, #0
 8003c92:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003c94:	bf00      	nop
 8003c96:	3754      	adds	r7, #84	; 0x54
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9e:	4770      	bx	lr

08003ca0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b084      	sub	sp, #16
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cac:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003cba:	68f8      	ldr	r0, [r7, #12]
 8003cbc:	f7ff fe3c 	bl	8003938 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003cc0:	bf00      	nop
 8003cc2:	3710      	adds	r7, #16
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}

08003cc8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b085      	sub	sp, #20
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cd6:	b2db      	uxtb	r3, r3
 8003cd8:	2b21      	cmp	r3, #33	; 0x21
 8003cda:	d13e      	bne.n	8003d5a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ce4:	d114      	bne.n	8003d10 <UART_Transmit_IT+0x48>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	691b      	ldr	r3, [r3, #16]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d110      	bne.n	8003d10 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6a1b      	ldr	r3, [r3, #32]
 8003cf2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	881b      	ldrh	r3, [r3, #0]
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d02:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6a1b      	ldr	r3, [r3, #32]
 8003d08:	1c9a      	adds	r2, r3, #2
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	621a      	str	r2, [r3, #32]
 8003d0e:	e008      	b.n	8003d22 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6a1b      	ldr	r3, [r3, #32]
 8003d14:	1c59      	adds	r1, r3, #1
 8003d16:	687a      	ldr	r2, [r7, #4]
 8003d18:	6211      	str	r1, [r2, #32]
 8003d1a:	781a      	ldrb	r2, [r3, #0]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	3b01      	subs	r3, #1
 8003d2a:	b29b      	uxth	r3, r3
 8003d2c:	687a      	ldr	r2, [r7, #4]
 8003d2e:	4619      	mov	r1, r3
 8003d30:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d10f      	bne.n	8003d56 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	68da      	ldr	r2, [r3, #12]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d44:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	68da      	ldr	r2, [r3, #12]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d54:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003d56:	2300      	movs	r3, #0
 8003d58:	e000      	b.n	8003d5c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003d5a:	2302      	movs	r3, #2
  }
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3714      	adds	r7, #20
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr

08003d68 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b082      	sub	sp, #8
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	68da      	ldr	r2, [r3, #12]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d7e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2220      	movs	r2, #32
 8003d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	f7ff fdc1 	bl	8003910 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003d8e:	2300      	movs	r3, #0
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	3708      	adds	r7, #8
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}

08003d98 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b08c      	sub	sp, #48	; 0x30
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003da6:	b2db      	uxtb	r3, r3
 8003da8:	2b22      	cmp	r3, #34	; 0x22
 8003daa:	f040 80ab 	bne.w	8003f04 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003db6:	d117      	bne.n	8003de8 <UART_Receive_IT+0x50>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	691b      	ldr	r3, [r3, #16]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d113      	bne.n	8003de8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dc8:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	b29b      	uxth	r3, r3
 8003dd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dd6:	b29a      	uxth	r2, r3
 8003dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dda:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003de0:	1c9a      	adds	r2, r3, #2
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	629a      	str	r2, [r3, #40]	; 0x28
 8003de6:	e026      	b.n	8003e36 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dec:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003dee:	2300      	movs	r3, #0
 8003df0:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dfa:	d007      	beq.n	8003e0c <UART_Receive_IT+0x74>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d10a      	bne.n	8003e1a <UART_Receive_IT+0x82>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	691b      	ldr	r3, [r3, #16]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d106      	bne.n	8003e1a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	b2da      	uxtb	r2, r3
 8003e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e16:	701a      	strb	r2, [r3, #0]
 8003e18:	e008      	b.n	8003e2c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e26:	b2da      	uxtb	r2, r3
 8003e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e2a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e30:	1c5a      	adds	r2, r3, #1
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e3a:	b29b      	uxth	r3, r3
 8003e3c:	3b01      	subs	r3, #1
 8003e3e:	b29b      	uxth	r3, r3
 8003e40:	687a      	ldr	r2, [r7, #4]
 8003e42:	4619      	mov	r1, r3
 8003e44:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d15a      	bne.n	8003f00 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	68da      	ldr	r2, [r3, #12]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f022 0220 	bic.w	r2, r2, #32
 8003e58:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	68da      	ldr	r2, [r3, #12]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e68:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	695a      	ldr	r2, [r3, #20]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f022 0201 	bic.w	r2, r2, #1
 8003e78:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2220      	movs	r2, #32
 8003e7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d135      	bne.n	8003ef6 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	330c      	adds	r3, #12
 8003e96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	e853 3f00 	ldrex	r3, [r3]
 8003e9e:	613b      	str	r3, [r7, #16]
   return(result);
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	f023 0310 	bic.w	r3, r3, #16
 8003ea6:	627b      	str	r3, [r7, #36]	; 0x24
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	330c      	adds	r3, #12
 8003eae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003eb0:	623a      	str	r2, [r7, #32]
 8003eb2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eb4:	69f9      	ldr	r1, [r7, #28]
 8003eb6:	6a3a      	ldr	r2, [r7, #32]
 8003eb8:	e841 2300 	strex	r3, r2, [r1]
 8003ebc:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ebe:	69bb      	ldr	r3, [r7, #24]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d1e5      	bne.n	8003e90 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f003 0310 	and.w	r3, r3, #16
 8003ece:	2b10      	cmp	r3, #16
 8003ed0:	d10a      	bne.n	8003ee8 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	60fb      	str	r3, [r7, #12]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	60fb      	str	r3, [r7, #12]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	60fb      	str	r3, [r7, #12]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003eec:	4619      	mov	r1, r3
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f7ff fd2c 	bl	800394c <HAL_UARTEx_RxEventCallback>
 8003ef4:	e002      	b.n	8003efc <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f7fd f8da 	bl	80010b0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003efc:	2300      	movs	r3, #0
 8003efe:	e002      	b.n	8003f06 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003f00:	2300      	movs	r3, #0
 8003f02:	e000      	b.n	8003f06 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003f04:	2302      	movs	r3, #2
  }
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3730      	adds	r7, #48	; 0x30
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}
	...

08003f10 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f14:	b0c0      	sub	sp, #256	; 0x100
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	691b      	ldr	r3, [r3, #16]
 8003f24:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003f28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f2c:	68d9      	ldr	r1, [r3, #12]
 8003f2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	ea40 0301 	orr.w	r3, r0, r1
 8003f38:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003f3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f3e:	689a      	ldr	r2, [r3, #8]
 8003f40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f44:	691b      	ldr	r3, [r3, #16]
 8003f46:	431a      	orrs	r2, r3
 8003f48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f4c:	695b      	ldr	r3, [r3, #20]
 8003f4e:	431a      	orrs	r2, r3
 8003f50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f54:	69db      	ldr	r3, [r3, #28]
 8003f56:	4313      	orrs	r3, r2
 8003f58:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003f5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	68db      	ldr	r3, [r3, #12]
 8003f64:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003f68:	f021 010c 	bic.w	r1, r1, #12
 8003f6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003f76:	430b      	orrs	r3, r1
 8003f78:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	695b      	ldr	r3, [r3, #20]
 8003f82:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003f86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f8a:	6999      	ldr	r1, [r3, #24]
 8003f8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	ea40 0301 	orr.w	r3, r0, r1
 8003f96:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	4b8f      	ldr	r3, [pc, #572]	; (80041dc <UART_SetConfig+0x2cc>)
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d005      	beq.n	8003fb0 <UART_SetConfig+0xa0>
 8003fa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	4b8d      	ldr	r3, [pc, #564]	; (80041e0 <UART_SetConfig+0x2d0>)
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d104      	bne.n	8003fba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003fb0:	f7ff f8ae 	bl	8003110 <HAL_RCC_GetPCLK2Freq>
 8003fb4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003fb8:	e003      	b.n	8003fc2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003fba:	f7ff f895 	bl	80030e8 <HAL_RCC_GetPCLK1Freq>
 8003fbe:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003fc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fc6:	69db      	ldr	r3, [r3, #28]
 8003fc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fcc:	f040 810c 	bne.w	80041e8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003fd0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003fda:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003fde:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003fe2:	4622      	mov	r2, r4
 8003fe4:	462b      	mov	r3, r5
 8003fe6:	1891      	adds	r1, r2, r2
 8003fe8:	65b9      	str	r1, [r7, #88]	; 0x58
 8003fea:	415b      	adcs	r3, r3
 8003fec:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003fee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003ff2:	4621      	mov	r1, r4
 8003ff4:	eb12 0801 	adds.w	r8, r2, r1
 8003ff8:	4629      	mov	r1, r5
 8003ffa:	eb43 0901 	adc.w	r9, r3, r1
 8003ffe:	f04f 0200 	mov.w	r2, #0
 8004002:	f04f 0300 	mov.w	r3, #0
 8004006:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800400a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800400e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004012:	4690      	mov	r8, r2
 8004014:	4699      	mov	r9, r3
 8004016:	4623      	mov	r3, r4
 8004018:	eb18 0303 	adds.w	r3, r8, r3
 800401c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004020:	462b      	mov	r3, r5
 8004022:	eb49 0303 	adc.w	r3, r9, r3
 8004026:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800402a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	2200      	movs	r2, #0
 8004032:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004036:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800403a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800403e:	460b      	mov	r3, r1
 8004040:	18db      	adds	r3, r3, r3
 8004042:	653b      	str	r3, [r7, #80]	; 0x50
 8004044:	4613      	mov	r3, r2
 8004046:	eb42 0303 	adc.w	r3, r2, r3
 800404a:	657b      	str	r3, [r7, #84]	; 0x54
 800404c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004050:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004054:	f7fc fd3a 	bl	8000acc <__aeabi_uldivmod>
 8004058:	4602      	mov	r2, r0
 800405a:	460b      	mov	r3, r1
 800405c:	4b61      	ldr	r3, [pc, #388]	; (80041e4 <UART_SetConfig+0x2d4>)
 800405e:	fba3 2302 	umull	r2, r3, r3, r2
 8004062:	095b      	lsrs	r3, r3, #5
 8004064:	011c      	lsls	r4, r3, #4
 8004066:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800406a:	2200      	movs	r2, #0
 800406c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004070:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004074:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004078:	4642      	mov	r2, r8
 800407a:	464b      	mov	r3, r9
 800407c:	1891      	adds	r1, r2, r2
 800407e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004080:	415b      	adcs	r3, r3
 8004082:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004084:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004088:	4641      	mov	r1, r8
 800408a:	eb12 0a01 	adds.w	sl, r2, r1
 800408e:	4649      	mov	r1, r9
 8004090:	eb43 0b01 	adc.w	fp, r3, r1
 8004094:	f04f 0200 	mov.w	r2, #0
 8004098:	f04f 0300 	mov.w	r3, #0
 800409c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80040a0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80040a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80040a8:	4692      	mov	sl, r2
 80040aa:	469b      	mov	fp, r3
 80040ac:	4643      	mov	r3, r8
 80040ae:	eb1a 0303 	adds.w	r3, sl, r3
 80040b2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80040b6:	464b      	mov	r3, r9
 80040b8:	eb4b 0303 	adc.w	r3, fp, r3
 80040bc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80040c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	2200      	movs	r2, #0
 80040c8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80040cc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80040d0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80040d4:	460b      	mov	r3, r1
 80040d6:	18db      	adds	r3, r3, r3
 80040d8:	643b      	str	r3, [r7, #64]	; 0x40
 80040da:	4613      	mov	r3, r2
 80040dc:	eb42 0303 	adc.w	r3, r2, r3
 80040e0:	647b      	str	r3, [r7, #68]	; 0x44
 80040e2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80040e6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80040ea:	f7fc fcef 	bl	8000acc <__aeabi_uldivmod>
 80040ee:	4602      	mov	r2, r0
 80040f0:	460b      	mov	r3, r1
 80040f2:	4611      	mov	r1, r2
 80040f4:	4b3b      	ldr	r3, [pc, #236]	; (80041e4 <UART_SetConfig+0x2d4>)
 80040f6:	fba3 2301 	umull	r2, r3, r3, r1
 80040fa:	095b      	lsrs	r3, r3, #5
 80040fc:	2264      	movs	r2, #100	; 0x64
 80040fe:	fb02 f303 	mul.w	r3, r2, r3
 8004102:	1acb      	subs	r3, r1, r3
 8004104:	00db      	lsls	r3, r3, #3
 8004106:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800410a:	4b36      	ldr	r3, [pc, #216]	; (80041e4 <UART_SetConfig+0x2d4>)
 800410c:	fba3 2302 	umull	r2, r3, r3, r2
 8004110:	095b      	lsrs	r3, r3, #5
 8004112:	005b      	lsls	r3, r3, #1
 8004114:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004118:	441c      	add	r4, r3
 800411a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800411e:	2200      	movs	r2, #0
 8004120:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004124:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004128:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800412c:	4642      	mov	r2, r8
 800412e:	464b      	mov	r3, r9
 8004130:	1891      	adds	r1, r2, r2
 8004132:	63b9      	str	r1, [r7, #56]	; 0x38
 8004134:	415b      	adcs	r3, r3
 8004136:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004138:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800413c:	4641      	mov	r1, r8
 800413e:	1851      	adds	r1, r2, r1
 8004140:	6339      	str	r1, [r7, #48]	; 0x30
 8004142:	4649      	mov	r1, r9
 8004144:	414b      	adcs	r3, r1
 8004146:	637b      	str	r3, [r7, #52]	; 0x34
 8004148:	f04f 0200 	mov.w	r2, #0
 800414c:	f04f 0300 	mov.w	r3, #0
 8004150:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004154:	4659      	mov	r1, fp
 8004156:	00cb      	lsls	r3, r1, #3
 8004158:	4651      	mov	r1, sl
 800415a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800415e:	4651      	mov	r1, sl
 8004160:	00ca      	lsls	r2, r1, #3
 8004162:	4610      	mov	r0, r2
 8004164:	4619      	mov	r1, r3
 8004166:	4603      	mov	r3, r0
 8004168:	4642      	mov	r2, r8
 800416a:	189b      	adds	r3, r3, r2
 800416c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004170:	464b      	mov	r3, r9
 8004172:	460a      	mov	r2, r1
 8004174:	eb42 0303 	adc.w	r3, r2, r3
 8004178:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800417c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	2200      	movs	r2, #0
 8004184:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004188:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800418c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004190:	460b      	mov	r3, r1
 8004192:	18db      	adds	r3, r3, r3
 8004194:	62bb      	str	r3, [r7, #40]	; 0x28
 8004196:	4613      	mov	r3, r2
 8004198:	eb42 0303 	adc.w	r3, r2, r3
 800419c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800419e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80041a2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80041a6:	f7fc fc91 	bl	8000acc <__aeabi_uldivmod>
 80041aa:	4602      	mov	r2, r0
 80041ac:	460b      	mov	r3, r1
 80041ae:	4b0d      	ldr	r3, [pc, #52]	; (80041e4 <UART_SetConfig+0x2d4>)
 80041b0:	fba3 1302 	umull	r1, r3, r3, r2
 80041b4:	095b      	lsrs	r3, r3, #5
 80041b6:	2164      	movs	r1, #100	; 0x64
 80041b8:	fb01 f303 	mul.w	r3, r1, r3
 80041bc:	1ad3      	subs	r3, r2, r3
 80041be:	00db      	lsls	r3, r3, #3
 80041c0:	3332      	adds	r3, #50	; 0x32
 80041c2:	4a08      	ldr	r2, [pc, #32]	; (80041e4 <UART_SetConfig+0x2d4>)
 80041c4:	fba2 2303 	umull	r2, r3, r2, r3
 80041c8:	095b      	lsrs	r3, r3, #5
 80041ca:	f003 0207 	and.w	r2, r3, #7
 80041ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4422      	add	r2, r4
 80041d6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80041d8:	e105      	b.n	80043e6 <UART_SetConfig+0x4d6>
 80041da:	bf00      	nop
 80041dc:	40011000 	.word	0x40011000
 80041e0:	40011400 	.word	0x40011400
 80041e4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80041e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041ec:	2200      	movs	r2, #0
 80041ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80041f2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80041f6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80041fa:	4642      	mov	r2, r8
 80041fc:	464b      	mov	r3, r9
 80041fe:	1891      	adds	r1, r2, r2
 8004200:	6239      	str	r1, [r7, #32]
 8004202:	415b      	adcs	r3, r3
 8004204:	627b      	str	r3, [r7, #36]	; 0x24
 8004206:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800420a:	4641      	mov	r1, r8
 800420c:	1854      	adds	r4, r2, r1
 800420e:	4649      	mov	r1, r9
 8004210:	eb43 0501 	adc.w	r5, r3, r1
 8004214:	f04f 0200 	mov.w	r2, #0
 8004218:	f04f 0300 	mov.w	r3, #0
 800421c:	00eb      	lsls	r3, r5, #3
 800421e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004222:	00e2      	lsls	r2, r4, #3
 8004224:	4614      	mov	r4, r2
 8004226:	461d      	mov	r5, r3
 8004228:	4643      	mov	r3, r8
 800422a:	18e3      	adds	r3, r4, r3
 800422c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004230:	464b      	mov	r3, r9
 8004232:	eb45 0303 	adc.w	r3, r5, r3
 8004236:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800423a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	2200      	movs	r2, #0
 8004242:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004246:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800424a:	f04f 0200 	mov.w	r2, #0
 800424e:	f04f 0300 	mov.w	r3, #0
 8004252:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004256:	4629      	mov	r1, r5
 8004258:	008b      	lsls	r3, r1, #2
 800425a:	4621      	mov	r1, r4
 800425c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004260:	4621      	mov	r1, r4
 8004262:	008a      	lsls	r2, r1, #2
 8004264:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004268:	f7fc fc30 	bl	8000acc <__aeabi_uldivmod>
 800426c:	4602      	mov	r2, r0
 800426e:	460b      	mov	r3, r1
 8004270:	4b60      	ldr	r3, [pc, #384]	; (80043f4 <UART_SetConfig+0x4e4>)
 8004272:	fba3 2302 	umull	r2, r3, r3, r2
 8004276:	095b      	lsrs	r3, r3, #5
 8004278:	011c      	lsls	r4, r3, #4
 800427a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800427e:	2200      	movs	r2, #0
 8004280:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004284:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004288:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800428c:	4642      	mov	r2, r8
 800428e:	464b      	mov	r3, r9
 8004290:	1891      	adds	r1, r2, r2
 8004292:	61b9      	str	r1, [r7, #24]
 8004294:	415b      	adcs	r3, r3
 8004296:	61fb      	str	r3, [r7, #28]
 8004298:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800429c:	4641      	mov	r1, r8
 800429e:	1851      	adds	r1, r2, r1
 80042a0:	6139      	str	r1, [r7, #16]
 80042a2:	4649      	mov	r1, r9
 80042a4:	414b      	adcs	r3, r1
 80042a6:	617b      	str	r3, [r7, #20]
 80042a8:	f04f 0200 	mov.w	r2, #0
 80042ac:	f04f 0300 	mov.w	r3, #0
 80042b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80042b4:	4659      	mov	r1, fp
 80042b6:	00cb      	lsls	r3, r1, #3
 80042b8:	4651      	mov	r1, sl
 80042ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80042be:	4651      	mov	r1, sl
 80042c0:	00ca      	lsls	r2, r1, #3
 80042c2:	4610      	mov	r0, r2
 80042c4:	4619      	mov	r1, r3
 80042c6:	4603      	mov	r3, r0
 80042c8:	4642      	mov	r2, r8
 80042ca:	189b      	adds	r3, r3, r2
 80042cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80042d0:	464b      	mov	r3, r9
 80042d2:	460a      	mov	r2, r1
 80042d4:	eb42 0303 	adc.w	r3, r2, r3
 80042d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80042dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	2200      	movs	r2, #0
 80042e4:	67bb      	str	r3, [r7, #120]	; 0x78
 80042e6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80042e8:	f04f 0200 	mov.w	r2, #0
 80042ec:	f04f 0300 	mov.w	r3, #0
 80042f0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80042f4:	4649      	mov	r1, r9
 80042f6:	008b      	lsls	r3, r1, #2
 80042f8:	4641      	mov	r1, r8
 80042fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80042fe:	4641      	mov	r1, r8
 8004300:	008a      	lsls	r2, r1, #2
 8004302:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004306:	f7fc fbe1 	bl	8000acc <__aeabi_uldivmod>
 800430a:	4602      	mov	r2, r0
 800430c:	460b      	mov	r3, r1
 800430e:	4b39      	ldr	r3, [pc, #228]	; (80043f4 <UART_SetConfig+0x4e4>)
 8004310:	fba3 1302 	umull	r1, r3, r3, r2
 8004314:	095b      	lsrs	r3, r3, #5
 8004316:	2164      	movs	r1, #100	; 0x64
 8004318:	fb01 f303 	mul.w	r3, r1, r3
 800431c:	1ad3      	subs	r3, r2, r3
 800431e:	011b      	lsls	r3, r3, #4
 8004320:	3332      	adds	r3, #50	; 0x32
 8004322:	4a34      	ldr	r2, [pc, #208]	; (80043f4 <UART_SetConfig+0x4e4>)
 8004324:	fba2 2303 	umull	r2, r3, r2, r3
 8004328:	095b      	lsrs	r3, r3, #5
 800432a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800432e:	441c      	add	r4, r3
 8004330:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004334:	2200      	movs	r2, #0
 8004336:	673b      	str	r3, [r7, #112]	; 0x70
 8004338:	677a      	str	r2, [r7, #116]	; 0x74
 800433a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800433e:	4642      	mov	r2, r8
 8004340:	464b      	mov	r3, r9
 8004342:	1891      	adds	r1, r2, r2
 8004344:	60b9      	str	r1, [r7, #8]
 8004346:	415b      	adcs	r3, r3
 8004348:	60fb      	str	r3, [r7, #12]
 800434a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800434e:	4641      	mov	r1, r8
 8004350:	1851      	adds	r1, r2, r1
 8004352:	6039      	str	r1, [r7, #0]
 8004354:	4649      	mov	r1, r9
 8004356:	414b      	adcs	r3, r1
 8004358:	607b      	str	r3, [r7, #4]
 800435a:	f04f 0200 	mov.w	r2, #0
 800435e:	f04f 0300 	mov.w	r3, #0
 8004362:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004366:	4659      	mov	r1, fp
 8004368:	00cb      	lsls	r3, r1, #3
 800436a:	4651      	mov	r1, sl
 800436c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004370:	4651      	mov	r1, sl
 8004372:	00ca      	lsls	r2, r1, #3
 8004374:	4610      	mov	r0, r2
 8004376:	4619      	mov	r1, r3
 8004378:	4603      	mov	r3, r0
 800437a:	4642      	mov	r2, r8
 800437c:	189b      	adds	r3, r3, r2
 800437e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004380:	464b      	mov	r3, r9
 8004382:	460a      	mov	r2, r1
 8004384:	eb42 0303 	adc.w	r3, r2, r3
 8004388:	66fb      	str	r3, [r7, #108]	; 0x6c
 800438a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	2200      	movs	r2, #0
 8004392:	663b      	str	r3, [r7, #96]	; 0x60
 8004394:	667a      	str	r2, [r7, #100]	; 0x64
 8004396:	f04f 0200 	mov.w	r2, #0
 800439a:	f04f 0300 	mov.w	r3, #0
 800439e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80043a2:	4649      	mov	r1, r9
 80043a4:	008b      	lsls	r3, r1, #2
 80043a6:	4641      	mov	r1, r8
 80043a8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80043ac:	4641      	mov	r1, r8
 80043ae:	008a      	lsls	r2, r1, #2
 80043b0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80043b4:	f7fc fb8a 	bl	8000acc <__aeabi_uldivmod>
 80043b8:	4602      	mov	r2, r0
 80043ba:	460b      	mov	r3, r1
 80043bc:	4b0d      	ldr	r3, [pc, #52]	; (80043f4 <UART_SetConfig+0x4e4>)
 80043be:	fba3 1302 	umull	r1, r3, r3, r2
 80043c2:	095b      	lsrs	r3, r3, #5
 80043c4:	2164      	movs	r1, #100	; 0x64
 80043c6:	fb01 f303 	mul.w	r3, r1, r3
 80043ca:	1ad3      	subs	r3, r2, r3
 80043cc:	011b      	lsls	r3, r3, #4
 80043ce:	3332      	adds	r3, #50	; 0x32
 80043d0:	4a08      	ldr	r2, [pc, #32]	; (80043f4 <UART_SetConfig+0x4e4>)
 80043d2:	fba2 2303 	umull	r2, r3, r2, r3
 80043d6:	095b      	lsrs	r3, r3, #5
 80043d8:	f003 020f 	and.w	r2, r3, #15
 80043dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4422      	add	r2, r4
 80043e4:	609a      	str	r2, [r3, #8]
}
 80043e6:	bf00      	nop
 80043e8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80043ec:	46bd      	mov	sp, r7
 80043ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043f2:	bf00      	nop
 80043f4:	51eb851f 	.word	0x51eb851f

080043f8 <__errno>:
 80043f8:	4b01      	ldr	r3, [pc, #4]	; (8004400 <__errno+0x8>)
 80043fa:	6818      	ldr	r0, [r3, #0]
 80043fc:	4770      	bx	lr
 80043fe:	bf00      	nop
 8004400:	20000018 	.word	0x20000018

08004404 <__libc_init_array>:
 8004404:	b570      	push	{r4, r5, r6, lr}
 8004406:	4d0d      	ldr	r5, [pc, #52]	; (800443c <__libc_init_array+0x38>)
 8004408:	4c0d      	ldr	r4, [pc, #52]	; (8004440 <__libc_init_array+0x3c>)
 800440a:	1b64      	subs	r4, r4, r5
 800440c:	10a4      	asrs	r4, r4, #2
 800440e:	2600      	movs	r6, #0
 8004410:	42a6      	cmp	r6, r4
 8004412:	d109      	bne.n	8004428 <__libc_init_array+0x24>
 8004414:	4d0b      	ldr	r5, [pc, #44]	; (8004444 <__libc_init_array+0x40>)
 8004416:	4c0c      	ldr	r4, [pc, #48]	; (8004448 <__libc_init_array+0x44>)
 8004418:	f000 fc8e 	bl	8004d38 <_init>
 800441c:	1b64      	subs	r4, r4, r5
 800441e:	10a4      	asrs	r4, r4, #2
 8004420:	2600      	movs	r6, #0
 8004422:	42a6      	cmp	r6, r4
 8004424:	d105      	bne.n	8004432 <__libc_init_array+0x2e>
 8004426:	bd70      	pop	{r4, r5, r6, pc}
 8004428:	f855 3b04 	ldr.w	r3, [r5], #4
 800442c:	4798      	blx	r3
 800442e:	3601      	adds	r6, #1
 8004430:	e7ee      	b.n	8004410 <__libc_init_array+0xc>
 8004432:	f855 3b04 	ldr.w	r3, [r5], #4
 8004436:	4798      	blx	r3
 8004438:	3601      	adds	r6, #1
 800443a:	e7f2      	b.n	8004422 <__libc_init_array+0x1e>
 800443c:	080050d4 	.word	0x080050d4
 8004440:	080050d4 	.word	0x080050d4
 8004444:	080050d4 	.word	0x080050d4
 8004448:	080050d8 	.word	0x080050d8

0800444c <memset>:
 800444c:	4402      	add	r2, r0
 800444e:	4603      	mov	r3, r0
 8004450:	4293      	cmp	r3, r2
 8004452:	d100      	bne.n	8004456 <memset+0xa>
 8004454:	4770      	bx	lr
 8004456:	f803 1b01 	strb.w	r1, [r3], #1
 800445a:	e7f9      	b.n	8004450 <memset+0x4>

0800445c <siprintf>:
 800445c:	b40e      	push	{r1, r2, r3}
 800445e:	b500      	push	{lr}
 8004460:	b09c      	sub	sp, #112	; 0x70
 8004462:	ab1d      	add	r3, sp, #116	; 0x74
 8004464:	9002      	str	r0, [sp, #8]
 8004466:	9006      	str	r0, [sp, #24]
 8004468:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800446c:	4809      	ldr	r0, [pc, #36]	; (8004494 <siprintf+0x38>)
 800446e:	9107      	str	r1, [sp, #28]
 8004470:	9104      	str	r1, [sp, #16]
 8004472:	4909      	ldr	r1, [pc, #36]	; (8004498 <siprintf+0x3c>)
 8004474:	f853 2b04 	ldr.w	r2, [r3], #4
 8004478:	9105      	str	r1, [sp, #20]
 800447a:	6800      	ldr	r0, [r0, #0]
 800447c:	9301      	str	r3, [sp, #4]
 800447e:	a902      	add	r1, sp, #8
 8004480:	f000 f868 	bl	8004554 <_svfiprintf_r>
 8004484:	9b02      	ldr	r3, [sp, #8]
 8004486:	2200      	movs	r2, #0
 8004488:	701a      	strb	r2, [r3, #0]
 800448a:	b01c      	add	sp, #112	; 0x70
 800448c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004490:	b003      	add	sp, #12
 8004492:	4770      	bx	lr
 8004494:	20000018 	.word	0x20000018
 8004498:	ffff0208 	.word	0xffff0208

0800449c <__ssputs_r>:
 800449c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044a0:	688e      	ldr	r6, [r1, #8]
 80044a2:	429e      	cmp	r6, r3
 80044a4:	4682      	mov	sl, r0
 80044a6:	460c      	mov	r4, r1
 80044a8:	4690      	mov	r8, r2
 80044aa:	461f      	mov	r7, r3
 80044ac:	d838      	bhi.n	8004520 <__ssputs_r+0x84>
 80044ae:	898a      	ldrh	r2, [r1, #12]
 80044b0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80044b4:	d032      	beq.n	800451c <__ssputs_r+0x80>
 80044b6:	6825      	ldr	r5, [r4, #0]
 80044b8:	6909      	ldr	r1, [r1, #16]
 80044ba:	eba5 0901 	sub.w	r9, r5, r1
 80044be:	6965      	ldr	r5, [r4, #20]
 80044c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80044c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80044c8:	3301      	adds	r3, #1
 80044ca:	444b      	add	r3, r9
 80044cc:	106d      	asrs	r5, r5, #1
 80044ce:	429d      	cmp	r5, r3
 80044d0:	bf38      	it	cc
 80044d2:	461d      	movcc	r5, r3
 80044d4:	0553      	lsls	r3, r2, #21
 80044d6:	d531      	bpl.n	800453c <__ssputs_r+0xa0>
 80044d8:	4629      	mov	r1, r5
 80044da:	f000 fb63 	bl	8004ba4 <_malloc_r>
 80044de:	4606      	mov	r6, r0
 80044e0:	b950      	cbnz	r0, 80044f8 <__ssputs_r+0x5c>
 80044e2:	230c      	movs	r3, #12
 80044e4:	f8ca 3000 	str.w	r3, [sl]
 80044e8:	89a3      	ldrh	r3, [r4, #12]
 80044ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044ee:	81a3      	strh	r3, [r4, #12]
 80044f0:	f04f 30ff 	mov.w	r0, #4294967295
 80044f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044f8:	6921      	ldr	r1, [r4, #16]
 80044fa:	464a      	mov	r2, r9
 80044fc:	f000 fabe 	bl	8004a7c <memcpy>
 8004500:	89a3      	ldrh	r3, [r4, #12]
 8004502:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004506:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800450a:	81a3      	strh	r3, [r4, #12]
 800450c:	6126      	str	r6, [r4, #16]
 800450e:	6165      	str	r5, [r4, #20]
 8004510:	444e      	add	r6, r9
 8004512:	eba5 0509 	sub.w	r5, r5, r9
 8004516:	6026      	str	r6, [r4, #0]
 8004518:	60a5      	str	r5, [r4, #8]
 800451a:	463e      	mov	r6, r7
 800451c:	42be      	cmp	r6, r7
 800451e:	d900      	bls.n	8004522 <__ssputs_r+0x86>
 8004520:	463e      	mov	r6, r7
 8004522:	6820      	ldr	r0, [r4, #0]
 8004524:	4632      	mov	r2, r6
 8004526:	4641      	mov	r1, r8
 8004528:	f000 fab6 	bl	8004a98 <memmove>
 800452c:	68a3      	ldr	r3, [r4, #8]
 800452e:	1b9b      	subs	r3, r3, r6
 8004530:	60a3      	str	r3, [r4, #8]
 8004532:	6823      	ldr	r3, [r4, #0]
 8004534:	4433      	add	r3, r6
 8004536:	6023      	str	r3, [r4, #0]
 8004538:	2000      	movs	r0, #0
 800453a:	e7db      	b.n	80044f4 <__ssputs_r+0x58>
 800453c:	462a      	mov	r2, r5
 800453e:	f000 fba5 	bl	8004c8c <_realloc_r>
 8004542:	4606      	mov	r6, r0
 8004544:	2800      	cmp	r0, #0
 8004546:	d1e1      	bne.n	800450c <__ssputs_r+0x70>
 8004548:	6921      	ldr	r1, [r4, #16]
 800454a:	4650      	mov	r0, sl
 800454c:	f000 fabe 	bl	8004acc <_free_r>
 8004550:	e7c7      	b.n	80044e2 <__ssputs_r+0x46>
	...

08004554 <_svfiprintf_r>:
 8004554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004558:	4698      	mov	r8, r3
 800455a:	898b      	ldrh	r3, [r1, #12]
 800455c:	061b      	lsls	r3, r3, #24
 800455e:	b09d      	sub	sp, #116	; 0x74
 8004560:	4607      	mov	r7, r0
 8004562:	460d      	mov	r5, r1
 8004564:	4614      	mov	r4, r2
 8004566:	d50e      	bpl.n	8004586 <_svfiprintf_r+0x32>
 8004568:	690b      	ldr	r3, [r1, #16]
 800456a:	b963      	cbnz	r3, 8004586 <_svfiprintf_r+0x32>
 800456c:	2140      	movs	r1, #64	; 0x40
 800456e:	f000 fb19 	bl	8004ba4 <_malloc_r>
 8004572:	6028      	str	r0, [r5, #0]
 8004574:	6128      	str	r0, [r5, #16]
 8004576:	b920      	cbnz	r0, 8004582 <_svfiprintf_r+0x2e>
 8004578:	230c      	movs	r3, #12
 800457a:	603b      	str	r3, [r7, #0]
 800457c:	f04f 30ff 	mov.w	r0, #4294967295
 8004580:	e0d1      	b.n	8004726 <_svfiprintf_r+0x1d2>
 8004582:	2340      	movs	r3, #64	; 0x40
 8004584:	616b      	str	r3, [r5, #20]
 8004586:	2300      	movs	r3, #0
 8004588:	9309      	str	r3, [sp, #36]	; 0x24
 800458a:	2320      	movs	r3, #32
 800458c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004590:	f8cd 800c 	str.w	r8, [sp, #12]
 8004594:	2330      	movs	r3, #48	; 0x30
 8004596:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004740 <_svfiprintf_r+0x1ec>
 800459a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800459e:	f04f 0901 	mov.w	r9, #1
 80045a2:	4623      	mov	r3, r4
 80045a4:	469a      	mov	sl, r3
 80045a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80045aa:	b10a      	cbz	r2, 80045b0 <_svfiprintf_r+0x5c>
 80045ac:	2a25      	cmp	r2, #37	; 0x25
 80045ae:	d1f9      	bne.n	80045a4 <_svfiprintf_r+0x50>
 80045b0:	ebba 0b04 	subs.w	fp, sl, r4
 80045b4:	d00b      	beq.n	80045ce <_svfiprintf_r+0x7a>
 80045b6:	465b      	mov	r3, fp
 80045b8:	4622      	mov	r2, r4
 80045ba:	4629      	mov	r1, r5
 80045bc:	4638      	mov	r0, r7
 80045be:	f7ff ff6d 	bl	800449c <__ssputs_r>
 80045c2:	3001      	adds	r0, #1
 80045c4:	f000 80aa 	beq.w	800471c <_svfiprintf_r+0x1c8>
 80045c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80045ca:	445a      	add	r2, fp
 80045cc:	9209      	str	r2, [sp, #36]	; 0x24
 80045ce:	f89a 3000 	ldrb.w	r3, [sl]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	f000 80a2 	beq.w	800471c <_svfiprintf_r+0x1c8>
 80045d8:	2300      	movs	r3, #0
 80045da:	f04f 32ff 	mov.w	r2, #4294967295
 80045de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80045e2:	f10a 0a01 	add.w	sl, sl, #1
 80045e6:	9304      	str	r3, [sp, #16]
 80045e8:	9307      	str	r3, [sp, #28]
 80045ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80045ee:	931a      	str	r3, [sp, #104]	; 0x68
 80045f0:	4654      	mov	r4, sl
 80045f2:	2205      	movs	r2, #5
 80045f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80045f8:	4851      	ldr	r0, [pc, #324]	; (8004740 <_svfiprintf_r+0x1ec>)
 80045fa:	f7fb fdf9 	bl	80001f0 <memchr>
 80045fe:	9a04      	ldr	r2, [sp, #16]
 8004600:	b9d8      	cbnz	r0, 800463a <_svfiprintf_r+0xe6>
 8004602:	06d0      	lsls	r0, r2, #27
 8004604:	bf44      	itt	mi
 8004606:	2320      	movmi	r3, #32
 8004608:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800460c:	0711      	lsls	r1, r2, #28
 800460e:	bf44      	itt	mi
 8004610:	232b      	movmi	r3, #43	; 0x2b
 8004612:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004616:	f89a 3000 	ldrb.w	r3, [sl]
 800461a:	2b2a      	cmp	r3, #42	; 0x2a
 800461c:	d015      	beq.n	800464a <_svfiprintf_r+0xf6>
 800461e:	9a07      	ldr	r2, [sp, #28]
 8004620:	4654      	mov	r4, sl
 8004622:	2000      	movs	r0, #0
 8004624:	f04f 0c0a 	mov.w	ip, #10
 8004628:	4621      	mov	r1, r4
 800462a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800462e:	3b30      	subs	r3, #48	; 0x30
 8004630:	2b09      	cmp	r3, #9
 8004632:	d94e      	bls.n	80046d2 <_svfiprintf_r+0x17e>
 8004634:	b1b0      	cbz	r0, 8004664 <_svfiprintf_r+0x110>
 8004636:	9207      	str	r2, [sp, #28]
 8004638:	e014      	b.n	8004664 <_svfiprintf_r+0x110>
 800463a:	eba0 0308 	sub.w	r3, r0, r8
 800463e:	fa09 f303 	lsl.w	r3, r9, r3
 8004642:	4313      	orrs	r3, r2
 8004644:	9304      	str	r3, [sp, #16]
 8004646:	46a2      	mov	sl, r4
 8004648:	e7d2      	b.n	80045f0 <_svfiprintf_r+0x9c>
 800464a:	9b03      	ldr	r3, [sp, #12]
 800464c:	1d19      	adds	r1, r3, #4
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	9103      	str	r1, [sp, #12]
 8004652:	2b00      	cmp	r3, #0
 8004654:	bfbb      	ittet	lt
 8004656:	425b      	neglt	r3, r3
 8004658:	f042 0202 	orrlt.w	r2, r2, #2
 800465c:	9307      	strge	r3, [sp, #28]
 800465e:	9307      	strlt	r3, [sp, #28]
 8004660:	bfb8      	it	lt
 8004662:	9204      	strlt	r2, [sp, #16]
 8004664:	7823      	ldrb	r3, [r4, #0]
 8004666:	2b2e      	cmp	r3, #46	; 0x2e
 8004668:	d10c      	bne.n	8004684 <_svfiprintf_r+0x130>
 800466a:	7863      	ldrb	r3, [r4, #1]
 800466c:	2b2a      	cmp	r3, #42	; 0x2a
 800466e:	d135      	bne.n	80046dc <_svfiprintf_r+0x188>
 8004670:	9b03      	ldr	r3, [sp, #12]
 8004672:	1d1a      	adds	r2, r3, #4
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	9203      	str	r2, [sp, #12]
 8004678:	2b00      	cmp	r3, #0
 800467a:	bfb8      	it	lt
 800467c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004680:	3402      	adds	r4, #2
 8004682:	9305      	str	r3, [sp, #20]
 8004684:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004750 <_svfiprintf_r+0x1fc>
 8004688:	7821      	ldrb	r1, [r4, #0]
 800468a:	2203      	movs	r2, #3
 800468c:	4650      	mov	r0, sl
 800468e:	f7fb fdaf 	bl	80001f0 <memchr>
 8004692:	b140      	cbz	r0, 80046a6 <_svfiprintf_r+0x152>
 8004694:	2340      	movs	r3, #64	; 0x40
 8004696:	eba0 000a 	sub.w	r0, r0, sl
 800469a:	fa03 f000 	lsl.w	r0, r3, r0
 800469e:	9b04      	ldr	r3, [sp, #16]
 80046a0:	4303      	orrs	r3, r0
 80046a2:	3401      	adds	r4, #1
 80046a4:	9304      	str	r3, [sp, #16]
 80046a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046aa:	4826      	ldr	r0, [pc, #152]	; (8004744 <_svfiprintf_r+0x1f0>)
 80046ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80046b0:	2206      	movs	r2, #6
 80046b2:	f7fb fd9d 	bl	80001f0 <memchr>
 80046b6:	2800      	cmp	r0, #0
 80046b8:	d038      	beq.n	800472c <_svfiprintf_r+0x1d8>
 80046ba:	4b23      	ldr	r3, [pc, #140]	; (8004748 <_svfiprintf_r+0x1f4>)
 80046bc:	bb1b      	cbnz	r3, 8004706 <_svfiprintf_r+0x1b2>
 80046be:	9b03      	ldr	r3, [sp, #12]
 80046c0:	3307      	adds	r3, #7
 80046c2:	f023 0307 	bic.w	r3, r3, #7
 80046c6:	3308      	adds	r3, #8
 80046c8:	9303      	str	r3, [sp, #12]
 80046ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046cc:	4433      	add	r3, r6
 80046ce:	9309      	str	r3, [sp, #36]	; 0x24
 80046d0:	e767      	b.n	80045a2 <_svfiprintf_r+0x4e>
 80046d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80046d6:	460c      	mov	r4, r1
 80046d8:	2001      	movs	r0, #1
 80046da:	e7a5      	b.n	8004628 <_svfiprintf_r+0xd4>
 80046dc:	2300      	movs	r3, #0
 80046de:	3401      	adds	r4, #1
 80046e0:	9305      	str	r3, [sp, #20]
 80046e2:	4619      	mov	r1, r3
 80046e4:	f04f 0c0a 	mov.w	ip, #10
 80046e8:	4620      	mov	r0, r4
 80046ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80046ee:	3a30      	subs	r2, #48	; 0x30
 80046f0:	2a09      	cmp	r2, #9
 80046f2:	d903      	bls.n	80046fc <_svfiprintf_r+0x1a8>
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d0c5      	beq.n	8004684 <_svfiprintf_r+0x130>
 80046f8:	9105      	str	r1, [sp, #20]
 80046fa:	e7c3      	b.n	8004684 <_svfiprintf_r+0x130>
 80046fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8004700:	4604      	mov	r4, r0
 8004702:	2301      	movs	r3, #1
 8004704:	e7f0      	b.n	80046e8 <_svfiprintf_r+0x194>
 8004706:	ab03      	add	r3, sp, #12
 8004708:	9300      	str	r3, [sp, #0]
 800470a:	462a      	mov	r2, r5
 800470c:	4b0f      	ldr	r3, [pc, #60]	; (800474c <_svfiprintf_r+0x1f8>)
 800470e:	a904      	add	r1, sp, #16
 8004710:	4638      	mov	r0, r7
 8004712:	f3af 8000 	nop.w
 8004716:	1c42      	adds	r2, r0, #1
 8004718:	4606      	mov	r6, r0
 800471a:	d1d6      	bne.n	80046ca <_svfiprintf_r+0x176>
 800471c:	89ab      	ldrh	r3, [r5, #12]
 800471e:	065b      	lsls	r3, r3, #25
 8004720:	f53f af2c 	bmi.w	800457c <_svfiprintf_r+0x28>
 8004724:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004726:	b01d      	add	sp, #116	; 0x74
 8004728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800472c:	ab03      	add	r3, sp, #12
 800472e:	9300      	str	r3, [sp, #0]
 8004730:	462a      	mov	r2, r5
 8004732:	4b06      	ldr	r3, [pc, #24]	; (800474c <_svfiprintf_r+0x1f8>)
 8004734:	a904      	add	r1, sp, #16
 8004736:	4638      	mov	r0, r7
 8004738:	f000 f87a 	bl	8004830 <_printf_i>
 800473c:	e7eb      	b.n	8004716 <_svfiprintf_r+0x1c2>
 800473e:	bf00      	nop
 8004740:	08005098 	.word	0x08005098
 8004744:	080050a2 	.word	0x080050a2
 8004748:	00000000 	.word	0x00000000
 800474c:	0800449d 	.word	0x0800449d
 8004750:	0800509e 	.word	0x0800509e

08004754 <_printf_common>:
 8004754:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004758:	4616      	mov	r6, r2
 800475a:	4699      	mov	r9, r3
 800475c:	688a      	ldr	r2, [r1, #8]
 800475e:	690b      	ldr	r3, [r1, #16]
 8004760:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004764:	4293      	cmp	r3, r2
 8004766:	bfb8      	it	lt
 8004768:	4613      	movlt	r3, r2
 800476a:	6033      	str	r3, [r6, #0]
 800476c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004770:	4607      	mov	r7, r0
 8004772:	460c      	mov	r4, r1
 8004774:	b10a      	cbz	r2, 800477a <_printf_common+0x26>
 8004776:	3301      	adds	r3, #1
 8004778:	6033      	str	r3, [r6, #0]
 800477a:	6823      	ldr	r3, [r4, #0]
 800477c:	0699      	lsls	r1, r3, #26
 800477e:	bf42      	ittt	mi
 8004780:	6833      	ldrmi	r3, [r6, #0]
 8004782:	3302      	addmi	r3, #2
 8004784:	6033      	strmi	r3, [r6, #0]
 8004786:	6825      	ldr	r5, [r4, #0]
 8004788:	f015 0506 	ands.w	r5, r5, #6
 800478c:	d106      	bne.n	800479c <_printf_common+0x48>
 800478e:	f104 0a19 	add.w	sl, r4, #25
 8004792:	68e3      	ldr	r3, [r4, #12]
 8004794:	6832      	ldr	r2, [r6, #0]
 8004796:	1a9b      	subs	r3, r3, r2
 8004798:	42ab      	cmp	r3, r5
 800479a:	dc26      	bgt.n	80047ea <_printf_common+0x96>
 800479c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80047a0:	1e13      	subs	r3, r2, #0
 80047a2:	6822      	ldr	r2, [r4, #0]
 80047a4:	bf18      	it	ne
 80047a6:	2301      	movne	r3, #1
 80047a8:	0692      	lsls	r2, r2, #26
 80047aa:	d42b      	bmi.n	8004804 <_printf_common+0xb0>
 80047ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80047b0:	4649      	mov	r1, r9
 80047b2:	4638      	mov	r0, r7
 80047b4:	47c0      	blx	r8
 80047b6:	3001      	adds	r0, #1
 80047b8:	d01e      	beq.n	80047f8 <_printf_common+0xa4>
 80047ba:	6823      	ldr	r3, [r4, #0]
 80047bc:	68e5      	ldr	r5, [r4, #12]
 80047be:	6832      	ldr	r2, [r6, #0]
 80047c0:	f003 0306 	and.w	r3, r3, #6
 80047c4:	2b04      	cmp	r3, #4
 80047c6:	bf08      	it	eq
 80047c8:	1aad      	subeq	r5, r5, r2
 80047ca:	68a3      	ldr	r3, [r4, #8]
 80047cc:	6922      	ldr	r2, [r4, #16]
 80047ce:	bf0c      	ite	eq
 80047d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80047d4:	2500      	movne	r5, #0
 80047d6:	4293      	cmp	r3, r2
 80047d8:	bfc4      	itt	gt
 80047da:	1a9b      	subgt	r3, r3, r2
 80047dc:	18ed      	addgt	r5, r5, r3
 80047de:	2600      	movs	r6, #0
 80047e0:	341a      	adds	r4, #26
 80047e2:	42b5      	cmp	r5, r6
 80047e4:	d11a      	bne.n	800481c <_printf_common+0xc8>
 80047e6:	2000      	movs	r0, #0
 80047e8:	e008      	b.n	80047fc <_printf_common+0xa8>
 80047ea:	2301      	movs	r3, #1
 80047ec:	4652      	mov	r2, sl
 80047ee:	4649      	mov	r1, r9
 80047f0:	4638      	mov	r0, r7
 80047f2:	47c0      	blx	r8
 80047f4:	3001      	adds	r0, #1
 80047f6:	d103      	bne.n	8004800 <_printf_common+0xac>
 80047f8:	f04f 30ff 	mov.w	r0, #4294967295
 80047fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004800:	3501      	adds	r5, #1
 8004802:	e7c6      	b.n	8004792 <_printf_common+0x3e>
 8004804:	18e1      	adds	r1, r4, r3
 8004806:	1c5a      	adds	r2, r3, #1
 8004808:	2030      	movs	r0, #48	; 0x30
 800480a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800480e:	4422      	add	r2, r4
 8004810:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004814:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004818:	3302      	adds	r3, #2
 800481a:	e7c7      	b.n	80047ac <_printf_common+0x58>
 800481c:	2301      	movs	r3, #1
 800481e:	4622      	mov	r2, r4
 8004820:	4649      	mov	r1, r9
 8004822:	4638      	mov	r0, r7
 8004824:	47c0      	blx	r8
 8004826:	3001      	adds	r0, #1
 8004828:	d0e6      	beq.n	80047f8 <_printf_common+0xa4>
 800482a:	3601      	adds	r6, #1
 800482c:	e7d9      	b.n	80047e2 <_printf_common+0x8e>
	...

08004830 <_printf_i>:
 8004830:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004834:	7e0f      	ldrb	r7, [r1, #24]
 8004836:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004838:	2f78      	cmp	r7, #120	; 0x78
 800483a:	4691      	mov	r9, r2
 800483c:	4680      	mov	r8, r0
 800483e:	460c      	mov	r4, r1
 8004840:	469a      	mov	sl, r3
 8004842:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004846:	d807      	bhi.n	8004858 <_printf_i+0x28>
 8004848:	2f62      	cmp	r7, #98	; 0x62
 800484a:	d80a      	bhi.n	8004862 <_printf_i+0x32>
 800484c:	2f00      	cmp	r7, #0
 800484e:	f000 80d8 	beq.w	8004a02 <_printf_i+0x1d2>
 8004852:	2f58      	cmp	r7, #88	; 0x58
 8004854:	f000 80a3 	beq.w	800499e <_printf_i+0x16e>
 8004858:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800485c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004860:	e03a      	b.n	80048d8 <_printf_i+0xa8>
 8004862:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004866:	2b15      	cmp	r3, #21
 8004868:	d8f6      	bhi.n	8004858 <_printf_i+0x28>
 800486a:	a101      	add	r1, pc, #4	; (adr r1, 8004870 <_printf_i+0x40>)
 800486c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004870:	080048c9 	.word	0x080048c9
 8004874:	080048dd 	.word	0x080048dd
 8004878:	08004859 	.word	0x08004859
 800487c:	08004859 	.word	0x08004859
 8004880:	08004859 	.word	0x08004859
 8004884:	08004859 	.word	0x08004859
 8004888:	080048dd 	.word	0x080048dd
 800488c:	08004859 	.word	0x08004859
 8004890:	08004859 	.word	0x08004859
 8004894:	08004859 	.word	0x08004859
 8004898:	08004859 	.word	0x08004859
 800489c:	080049e9 	.word	0x080049e9
 80048a0:	0800490d 	.word	0x0800490d
 80048a4:	080049cb 	.word	0x080049cb
 80048a8:	08004859 	.word	0x08004859
 80048ac:	08004859 	.word	0x08004859
 80048b0:	08004a0b 	.word	0x08004a0b
 80048b4:	08004859 	.word	0x08004859
 80048b8:	0800490d 	.word	0x0800490d
 80048bc:	08004859 	.word	0x08004859
 80048c0:	08004859 	.word	0x08004859
 80048c4:	080049d3 	.word	0x080049d3
 80048c8:	682b      	ldr	r3, [r5, #0]
 80048ca:	1d1a      	adds	r2, r3, #4
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	602a      	str	r2, [r5, #0]
 80048d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80048d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80048d8:	2301      	movs	r3, #1
 80048da:	e0a3      	b.n	8004a24 <_printf_i+0x1f4>
 80048dc:	6820      	ldr	r0, [r4, #0]
 80048de:	6829      	ldr	r1, [r5, #0]
 80048e0:	0606      	lsls	r6, r0, #24
 80048e2:	f101 0304 	add.w	r3, r1, #4
 80048e6:	d50a      	bpl.n	80048fe <_printf_i+0xce>
 80048e8:	680e      	ldr	r6, [r1, #0]
 80048ea:	602b      	str	r3, [r5, #0]
 80048ec:	2e00      	cmp	r6, #0
 80048ee:	da03      	bge.n	80048f8 <_printf_i+0xc8>
 80048f0:	232d      	movs	r3, #45	; 0x2d
 80048f2:	4276      	negs	r6, r6
 80048f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80048f8:	485e      	ldr	r0, [pc, #376]	; (8004a74 <_printf_i+0x244>)
 80048fa:	230a      	movs	r3, #10
 80048fc:	e019      	b.n	8004932 <_printf_i+0x102>
 80048fe:	680e      	ldr	r6, [r1, #0]
 8004900:	602b      	str	r3, [r5, #0]
 8004902:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004906:	bf18      	it	ne
 8004908:	b236      	sxthne	r6, r6
 800490a:	e7ef      	b.n	80048ec <_printf_i+0xbc>
 800490c:	682b      	ldr	r3, [r5, #0]
 800490e:	6820      	ldr	r0, [r4, #0]
 8004910:	1d19      	adds	r1, r3, #4
 8004912:	6029      	str	r1, [r5, #0]
 8004914:	0601      	lsls	r1, r0, #24
 8004916:	d501      	bpl.n	800491c <_printf_i+0xec>
 8004918:	681e      	ldr	r6, [r3, #0]
 800491a:	e002      	b.n	8004922 <_printf_i+0xf2>
 800491c:	0646      	lsls	r6, r0, #25
 800491e:	d5fb      	bpl.n	8004918 <_printf_i+0xe8>
 8004920:	881e      	ldrh	r6, [r3, #0]
 8004922:	4854      	ldr	r0, [pc, #336]	; (8004a74 <_printf_i+0x244>)
 8004924:	2f6f      	cmp	r7, #111	; 0x6f
 8004926:	bf0c      	ite	eq
 8004928:	2308      	moveq	r3, #8
 800492a:	230a      	movne	r3, #10
 800492c:	2100      	movs	r1, #0
 800492e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004932:	6865      	ldr	r5, [r4, #4]
 8004934:	60a5      	str	r5, [r4, #8]
 8004936:	2d00      	cmp	r5, #0
 8004938:	bfa2      	ittt	ge
 800493a:	6821      	ldrge	r1, [r4, #0]
 800493c:	f021 0104 	bicge.w	r1, r1, #4
 8004940:	6021      	strge	r1, [r4, #0]
 8004942:	b90e      	cbnz	r6, 8004948 <_printf_i+0x118>
 8004944:	2d00      	cmp	r5, #0
 8004946:	d04d      	beq.n	80049e4 <_printf_i+0x1b4>
 8004948:	4615      	mov	r5, r2
 800494a:	fbb6 f1f3 	udiv	r1, r6, r3
 800494e:	fb03 6711 	mls	r7, r3, r1, r6
 8004952:	5dc7      	ldrb	r7, [r0, r7]
 8004954:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004958:	4637      	mov	r7, r6
 800495a:	42bb      	cmp	r3, r7
 800495c:	460e      	mov	r6, r1
 800495e:	d9f4      	bls.n	800494a <_printf_i+0x11a>
 8004960:	2b08      	cmp	r3, #8
 8004962:	d10b      	bne.n	800497c <_printf_i+0x14c>
 8004964:	6823      	ldr	r3, [r4, #0]
 8004966:	07de      	lsls	r6, r3, #31
 8004968:	d508      	bpl.n	800497c <_printf_i+0x14c>
 800496a:	6923      	ldr	r3, [r4, #16]
 800496c:	6861      	ldr	r1, [r4, #4]
 800496e:	4299      	cmp	r1, r3
 8004970:	bfde      	ittt	le
 8004972:	2330      	movle	r3, #48	; 0x30
 8004974:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004978:	f105 35ff 	addle.w	r5, r5, #4294967295
 800497c:	1b52      	subs	r2, r2, r5
 800497e:	6122      	str	r2, [r4, #16]
 8004980:	f8cd a000 	str.w	sl, [sp]
 8004984:	464b      	mov	r3, r9
 8004986:	aa03      	add	r2, sp, #12
 8004988:	4621      	mov	r1, r4
 800498a:	4640      	mov	r0, r8
 800498c:	f7ff fee2 	bl	8004754 <_printf_common>
 8004990:	3001      	adds	r0, #1
 8004992:	d14c      	bne.n	8004a2e <_printf_i+0x1fe>
 8004994:	f04f 30ff 	mov.w	r0, #4294967295
 8004998:	b004      	add	sp, #16
 800499a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800499e:	4835      	ldr	r0, [pc, #212]	; (8004a74 <_printf_i+0x244>)
 80049a0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80049a4:	6829      	ldr	r1, [r5, #0]
 80049a6:	6823      	ldr	r3, [r4, #0]
 80049a8:	f851 6b04 	ldr.w	r6, [r1], #4
 80049ac:	6029      	str	r1, [r5, #0]
 80049ae:	061d      	lsls	r5, r3, #24
 80049b0:	d514      	bpl.n	80049dc <_printf_i+0x1ac>
 80049b2:	07df      	lsls	r7, r3, #31
 80049b4:	bf44      	itt	mi
 80049b6:	f043 0320 	orrmi.w	r3, r3, #32
 80049ba:	6023      	strmi	r3, [r4, #0]
 80049bc:	b91e      	cbnz	r6, 80049c6 <_printf_i+0x196>
 80049be:	6823      	ldr	r3, [r4, #0]
 80049c0:	f023 0320 	bic.w	r3, r3, #32
 80049c4:	6023      	str	r3, [r4, #0]
 80049c6:	2310      	movs	r3, #16
 80049c8:	e7b0      	b.n	800492c <_printf_i+0xfc>
 80049ca:	6823      	ldr	r3, [r4, #0]
 80049cc:	f043 0320 	orr.w	r3, r3, #32
 80049d0:	6023      	str	r3, [r4, #0]
 80049d2:	2378      	movs	r3, #120	; 0x78
 80049d4:	4828      	ldr	r0, [pc, #160]	; (8004a78 <_printf_i+0x248>)
 80049d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80049da:	e7e3      	b.n	80049a4 <_printf_i+0x174>
 80049dc:	0659      	lsls	r1, r3, #25
 80049de:	bf48      	it	mi
 80049e0:	b2b6      	uxthmi	r6, r6
 80049e2:	e7e6      	b.n	80049b2 <_printf_i+0x182>
 80049e4:	4615      	mov	r5, r2
 80049e6:	e7bb      	b.n	8004960 <_printf_i+0x130>
 80049e8:	682b      	ldr	r3, [r5, #0]
 80049ea:	6826      	ldr	r6, [r4, #0]
 80049ec:	6961      	ldr	r1, [r4, #20]
 80049ee:	1d18      	adds	r0, r3, #4
 80049f0:	6028      	str	r0, [r5, #0]
 80049f2:	0635      	lsls	r5, r6, #24
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	d501      	bpl.n	80049fc <_printf_i+0x1cc>
 80049f8:	6019      	str	r1, [r3, #0]
 80049fa:	e002      	b.n	8004a02 <_printf_i+0x1d2>
 80049fc:	0670      	lsls	r0, r6, #25
 80049fe:	d5fb      	bpl.n	80049f8 <_printf_i+0x1c8>
 8004a00:	8019      	strh	r1, [r3, #0]
 8004a02:	2300      	movs	r3, #0
 8004a04:	6123      	str	r3, [r4, #16]
 8004a06:	4615      	mov	r5, r2
 8004a08:	e7ba      	b.n	8004980 <_printf_i+0x150>
 8004a0a:	682b      	ldr	r3, [r5, #0]
 8004a0c:	1d1a      	adds	r2, r3, #4
 8004a0e:	602a      	str	r2, [r5, #0]
 8004a10:	681d      	ldr	r5, [r3, #0]
 8004a12:	6862      	ldr	r2, [r4, #4]
 8004a14:	2100      	movs	r1, #0
 8004a16:	4628      	mov	r0, r5
 8004a18:	f7fb fbea 	bl	80001f0 <memchr>
 8004a1c:	b108      	cbz	r0, 8004a22 <_printf_i+0x1f2>
 8004a1e:	1b40      	subs	r0, r0, r5
 8004a20:	6060      	str	r0, [r4, #4]
 8004a22:	6863      	ldr	r3, [r4, #4]
 8004a24:	6123      	str	r3, [r4, #16]
 8004a26:	2300      	movs	r3, #0
 8004a28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a2c:	e7a8      	b.n	8004980 <_printf_i+0x150>
 8004a2e:	6923      	ldr	r3, [r4, #16]
 8004a30:	462a      	mov	r2, r5
 8004a32:	4649      	mov	r1, r9
 8004a34:	4640      	mov	r0, r8
 8004a36:	47d0      	blx	sl
 8004a38:	3001      	adds	r0, #1
 8004a3a:	d0ab      	beq.n	8004994 <_printf_i+0x164>
 8004a3c:	6823      	ldr	r3, [r4, #0]
 8004a3e:	079b      	lsls	r3, r3, #30
 8004a40:	d413      	bmi.n	8004a6a <_printf_i+0x23a>
 8004a42:	68e0      	ldr	r0, [r4, #12]
 8004a44:	9b03      	ldr	r3, [sp, #12]
 8004a46:	4298      	cmp	r0, r3
 8004a48:	bfb8      	it	lt
 8004a4a:	4618      	movlt	r0, r3
 8004a4c:	e7a4      	b.n	8004998 <_printf_i+0x168>
 8004a4e:	2301      	movs	r3, #1
 8004a50:	4632      	mov	r2, r6
 8004a52:	4649      	mov	r1, r9
 8004a54:	4640      	mov	r0, r8
 8004a56:	47d0      	blx	sl
 8004a58:	3001      	adds	r0, #1
 8004a5a:	d09b      	beq.n	8004994 <_printf_i+0x164>
 8004a5c:	3501      	adds	r5, #1
 8004a5e:	68e3      	ldr	r3, [r4, #12]
 8004a60:	9903      	ldr	r1, [sp, #12]
 8004a62:	1a5b      	subs	r3, r3, r1
 8004a64:	42ab      	cmp	r3, r5
 8004a66:	dcf2      	bgt.n	8004a4e <_printf_i+0x21e>
 8004a68:	e7eb      	b.n	8004a42 <_printf_i+0x212>
 8004a6a:	2500      	movs	r5, #0
 8004a6c:	f104 0619 	add.w	r6, r4, #25
 8004a70:	e7f5      	b.n	8004a5e <_printf_i+0x22e>
 8004a72:	bf00      	nop
 8004a74:	080050a9 	.word	0x080050a9
 8004a78:	080050ba 	.word	0x080050ba

08004a7c <memcpy>:
 8004a7c:	440a      	add	r2, r1
 8004a7e:	4291      	cmp	r1, r2
 8004a80:	f100 33ff 	add.w	r3, r0, #4294967295
 8004a84:	d100      	bne.n	8004a88 <memcpy+0xc>
 8004a86:	4770      	bx	lr
 8004a88:	b510      	push	{r4, lr}
 8004a8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a8e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004a92:	4291      	cmp	r1, r2
 8004a94:	d1f9      	bne.n	8004a8a <memcpy+0xe>
 8004a96:	bd10      	pop	{r4, pc}

08004a98 <memmove>:
 8004a98:	4288      	cmp	r0, r1
 8004a9a:	b510      	push	{r4, lr}
 8004a9c:	eb01 0402 	add.w	r4, r1, r2
 8004aa0:	d902      	bls.n	8004aa8 <memmove+0x10>
 8004aa2:	4284      	cmp	r4, r0
 8004aa4:	4623      	mov	r3, r4
 8004aa6:	d807      	bhi.n	8004ab8 <memmove+0x20>
 8004aa8:	1e43      	subs	r3, r0, #1
 8004aaa:	42a1      	cmp	r1, r4
 8004aac:	d008      	beq.n	8004ac0 <memmove+0x28>
 8004aae:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004ab2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004ab6:	e7f8      	b.n	8004aaa <memmove+0x12>
 8004ab8:	4402      	add	r2, r0
 8004aba:	4601      	mov	r1, r0
 8004abc:	428a      	cmp	r2, r1
 8004abe:	d100      	bne.n	8004ac2 <memmove+0x2a>
 8004ac0:	bd10      	pop	{r4, pc}
 8004ac2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004ac6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004aca:	e7f7      	b.n	8004abc <memmove+0x24>

08004acc <_free_r>:
 8004acc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004ace:	2900      	cmp	r1, #0
 8004ad0:	d044      	beq.n	8004b5c <_free_r+0x90>
 8004ad2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ad6:	9001      	str	r0, [sp, #4]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	f1a1 0404 	sub.w	r4, r1, #4
 8004ade:	bfb8      	it	lt
 8004ae0:	18e4      	addlt	r4, r4, r3
 8004ae2:	f000 f913 	bl	8004d0c <__malloc_lock>
 8004ae6:	4a1e      	ldr	r2, [pc, #120]	; (8004b60 <_free_r+0x94>)
 8004ae8:	9801      	ldr	r0, [sp, #4]
 8004aea:	6813      	ldr	r3, [r2, #0]
 8004aec:	b933      	cbnz	r3, 8004afc <_free_r+0x30>
 8004aee:	6063      	str	r3, [r4, #4]
 8004af0:	6014      	str	r4, [r2, #0]
 8004af2:	b003      	add	sp, #12
 8004af4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004af8:	f000 b90e 	b.w	8004d18 <__malloc_unlock>
 8004afc:	42a3      	cmp	r3, r4
 8004afe:	d908      	bls.n	8004b12 <_free_r+0x46>
 8004b00:	6825      	ldr	r5, [r4, #0]
 8004b02:	1961      	adds	r1, r4, r5
 8004b04:	428b      	cmp	r3, r1
 8004b06:	bf01      	itttt	eq
 8004b08:	6819      	ldreq	r1, [r3, #0]
 8004b0a:	685b      	ldreq	r3, [r3, #4]
 8004b0c:	1949      	addeq	r1, r1, r5
 8004b0e:	6021      	streq	r1, [r4, #0]
 8004b10:	e7ed      	b.n	8004aee <_free_r+0x22>
 8004b12:	461a      	mov	r2, r3
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	b10b      	cbz	r3, 8004b1c <_free_r+0x50>
 8004b18:	42a3      	cmp	r3, r4
 8004b1a:	d9fa      	bls.n	8004b12 <_free_r+0x46>
 8004b1c:	6811      	ldr	r1, [r2, #0]
 8004b1e:	1855      	adds	r5, r2, r1
 8004b20:	42a5      	cmp	r5, r4
 8004b22:	d10b      	bne.n	8004b3c <_free_r+0x70>
 8004b24:	6824      	ldr	r4, [r4, #0]
 8004b26:	4421      	add	r1, r4
 8004b28:	1854      	adds	r4, r2, r1
 8004b2a:	42a3      	cmp	r3, r4
 8004b2c:	6011      	str	r1, [r2, #0]
 8004b2e:	d1e0      	bne.n	8004af2 <_free_r+0x26>
 8004b30:	681c      	ldr	r4, [r3, #0]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	6053      	str	r3, [r2, #4]
 8004b36:	4421      	add	r1, r4
 8004b38:	6011      	str	r1, [r2, #0]
 8004b3a:	e7da      	b.n	8004af2 <_free_r+0x26>
 8004b3c:	d902      	bls.n	8004b44 <_free_r+0x78>
 8004b3e:	230c      	movs	r3, #12
 8004b40:	6003      	str	r3, [r0, #0]
 8004b42:	e7d6      	b.n	8004af2 <_free_r+0x26>
 8004b44:	6825      	ldr	r5, [r4, #0]
 8004b46:	1961      	adds	r1, r4, r5
 8004b48:	428b      	cmp	r3, r1
 8004b4a:	bf04      	itt	eq
 8004b4c:	6819      	ldreq	r1, [r3, #0]
 8004b4e:	685b      	ldreq	r3, [r3, #4]
 8004b50:	6063      	str	r3, [r4, #4]
 8004b52:	bf04      	itt	eq
 8004b54:	1949      	addeq	r1, r1, r5
 8004b56:	6021      	streq	r1, [r4, #0]
 8004b58:	6054      	str	r4, [r2, #4]
 8004b5a:	e7ca      	b.n	8004af2 <_free_r+0x26>
 8004b5c:	b003      	add	sp, #12
 8004b5e:	bd30      	pop	{r4, r5, pc}
 8004b60:	2000040c 	.word	0x2000040c

08004b64 <sbrk_aligned>:
 8004b64:	b570      	push	{r4, r5, r6, lr}
 8004b66:	4e0e      	ldr	r6, [pc, #56]	; (8004ba0 <sbrk_aligned+0x3c>)
 8004b68:	460c      	mov	r4, r1
 8004b6a:	6831      	ldr	r1, [r6, #0]
 8004b6c:	4605      	mov	r5, r0
 8004b6e:	b911      	cbnz	r1, 8004b76 <sbrk_aligned+0x12>
 8004b70:	f000 f8bc 	bl	8004cec <_sbrk_r>
 8004b74:	6030      	str	r0, [r6, #0]
 8004b76:	4621      	mov	r1, r4
 8004b78:	4628      	mov	r0, r5
 8004b7a:	f000 f8b7 	bl	8004cec <_sbrk_r>
 8004b7e:	1c43      	adds	r3, r0, #1
 8004b80:	d00a      	beq.n	8004b98 <sbrk_aligned+0x34>
 8004b82:	1cc4      	adds	r4, r0, #3
 8004b84:	f024 0403 	bic.w	r4, r4, #3
 8004b88:	42a0      	cmp	r0, r4
 8004b8a:	d007      	beq.n	8004b9c <sbrk_aligned+0x38>
 8004b8c:	1a21      	subs	r1, r4, r0
 8004b8e:	4628      	mov	r0, r5
 8004b90:	f000 f8ac 	bl	8004cec <_sbrk_r>
 8004b94:	3001      	adds	r0, #1
 8004b96:	d101      	bne.n	8004b9c <sbrk_aligned+0x38>
 8004b98:	f04f 34ff 	mov.w	r4, #4294967295
 8004b9c:	4620      	mov	r0, r4
 8004b9e:	bd70      	pop	{r4, r5, r6, pc}
 8004ba0:	20000410 	.word	0x20000410

08004ba4 <_malloc_r>:
 8004ba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ba8:	1ccd      	adds	r5, r1, #3
 8004baa:	f025 0503 	bic.w	r5, r5, #3
 8004bae:	3508      	adds	r5, #8
 8004bb0:	2d0c      	cmp	r5, #12
 8004bb2:	bf38      	it	cc
 8004bb4:	250c      	movcc	r5, #12
 8004bb6:	2d00      	cmp	r5, #0
 8004bb8:	4607      	mov	r7, r0
 8004bba:	db01      	blt.n	8004bc0 <_malloc_r+0x1c>
 8004bbc:	42a9      	cmp	r1, r5
 8004bbe:	d905      	bls.n	8004bcc <_malloc_r+0x28>
 8004bc0:	230c      	movs	r3, #12
 8004bc2:	603b      	str	r3, [r7, #0]
 8004bc4:	2600      	movs	r6, #0
 8004bc6:	4630      	mov	r0, r6
 8004bc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004bcc:	4e2e      	ldr	r6, [pc, #184]	; (8004c88 <_malloc_r+0xe4>)
 8004bce:	f000 f89d 	bl	8004d0c <__malloc_lock>
 8004bd2:	6833      	ldr	r3, [r6, #0]
 8004bd4:	461c      	mov	r4, r3
 8004bd6:	bb34      	cbnz	r4, 8004c26 <_malloc_r+0x82>
 8004bd8:	4629      	mov	r1, r5
 8004bda:	4638      	mov	r0, r7
 8004bdc:	f7ff ffc2 	bl	8004b64 <sbrk_aligned>
 8004be0:	1c43      	adds	r3, r0, #1
 8004be2:	4604      	mov	r4, r0
 8004be4:	d14d      	bne.n	8004c82 <_malloc_r+0xde>
 8004be6:	6834      	ldr	r4, [r6, #0]
 8004be8:	4626      	mov	r6, r4
 8004bea:	2e00      	cmp	r6, #0
 8004bec:	d140      	bne.n	8004c70 <_malloc_r+0xcc>
 8004bee:	6823      	ldr	r3, [r4, #0]
 8004bf0:	4631      	mov	r1, r6
 8004bf2:	4638      	mov	r0, r7
 8004bf4:	eb04 0803 	add.w	r8, r4, r3
 8004bf8:	f000 f878 	bl	8004cec <_sbrk_r>
 8004bfc:	4580      	cmp	r8, r0
 8004bfe:	d13a      	bne.n	8004c76 <_malloc_r+0xd2>
 8004c00:	6821      	ldr	r1, [r4, #0]
 8004c02:	3503      	adds	r5, #3
 8004c04:	1a6d      	subs	r5, r5, r1
 8004c06:	f025 0503 	bic.w	r5, r5, #3
 8004c0a:	3508      	adds	r5, #8
 8004c0c:	2d0c      	cmp	r5, #12
 8004c0e:	bf38      	it	cc
 8004c10:	250c      	movcc	r5, #12
 8004c12:	4629      	mov	r1, r5
 8004c14:	4638      	mov	r0, r7
 8004c16:	f7ff ffa5 	bl	8004b64 <sbrk_aligned>
 8004c1a:	3001      	adds	r0, #1
 8004c1c:	d02b      	beq.n	8004c76 <_malloc_r+0xd2>
 8004c1e:	6823      	ldr	r3, [r4, #0]
 8004c20:	442b      	add	r3, r5
 8004c22:	6023      	str	r3, [r4, #0]
 8004c24:	e00e      	b.n	8004c44 <_malloc_r+0xa0>
 8004c26:	6822      	ldr	r2, [r4, #0]
 8004c28:	1b52      	subs	r2, r2, r5
 8004c2a:	d41e      	bmi.n	8004c6a <_malloc_r+0xc6>
 8004c2c:	2a0b      	cmp	r2, #11
 8004c2e:	d916      	bls.n	8004c5e <_malloc_r+0xba>
 8004c30:	1961      	adds	r1, r4, r5
 8004c32:	42a3      	cmp	r3, r4
 8004c34:	6025      	str	r5, [r4, #0]
 8004c36:	bf18      	it	ne
 8004c38:	6059      	strne	r1, [r3, #4]
 8004c3a:	6863      	ldr	r3, [r4, #4]
 8004c3c:	bf08      	it	eq
 8004c3e:	6031      	streq	r1, [r6, #0]
 8004c40:	5162      	str	r2, [r4, r5]
 8004c42:	604b      	str	r3, [r1, #4]
 8004c44:	4638      	mov	r0, r7
 8004c46:	f104 060b 	add.w	r6, r4, #11
 8004c4a:	f000 f865 	bl	8004d18 <__malloc_unlock>
 8004c4e:	f026 0607 	bic.w	r6, r6, #7
 8004c52:	1d23      	adds	r3, r4, #4
 8004c54:	1af2      	subs	r2, r6, r3
 8004c56:	d0b6      	beq.n	8004bc6 <_malloc_r+0x22>
 8004c58:	1b9b      	subs	r3, r3, r6
 8004c5a:	50a3      	str	r3, [r4, r2]
 8004c5c:	e7b3      	b.n	8004bc6 <_malloc_r+0x22>
 8004c5e:	6862      	ldr	r2, [r4, #4]
 8004c60:	42a3      	cmp	r3, r4
 8004c62:	bf0c      	ite	eq
 8004c64:	6032      	streq	r2, [r6, #0]
 8004c66:	605a      	strne	r2, [r3, #4]
 8004c68:	e7ec      	b.n	8004c44 <_malloc_r+0xa0>
 8004c6a:	4623      	mov	r3, r4
 8004c6c:	6864      	ldr	r4, [r4, #4]
 8004c6e:	e7b2      	b.n	8004bd6 <_malloc_r+0x32>
 8004c70:	4634      	mov	r4, r6
 8004c72:	6876      	ldr	r6, [r6, #4]
 8004c74:	e7b9      	b.n	8004bea <_malloc_r+0x46>
 8004c76:	230c      	movs	r3, #12
 8004c78:	603b      	str	r3, [r7, #0]
 8004c7a:	4638      	mov	r0, r7
 8004c7c:	f000 f84c 	bl	8004d18 <__malloc_unlock>
 8004c80:	e7a1      	b.n	8004bc6 <_malloc_r+0x22>
 8004c82:	6025      	str	r5, [r4, #0]
 8004c84:	e7de      	b.n	8004c44 <_malloc_r+0xa0>
 8004c86:	bf00      	nop
 8004c88:	2000040c 	.word	0x2000040c

08004c8c <_realloc_r>:
 8004c8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c90:	4680      	mov	r8, r0
 8004c92:	4614      	mov	r4, r2
 8004c94:	460e      	mov	r6, r1
 8004c96:	b921      	cbnz	r1, 8004ca2 <_realloc_r+0x16>
 8004c98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004c9c:	4611      	mov	r1, r2
 8004c9e:	f7ff bf81 	b.w	8004ba4 <_malloc_r>
 8004ca2:	b92a      	cbnz	r2, 8004cb0 <_realloc_r+0x24>
 8004ca4:	f7ff ff12 	bl	8004acc <_free_r>
 8004ca8:	4625      	mov	r5, r4
 8004caa:	4628      	mov	r0, r5
 8004cac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004cb0:	f000 f838 	bl	8004d24 <_malloc_usable_size_r>
 8004cb4:	4284      	cmp	r4, r0
 8004cb6:	4607      	mov	r7, r0
 8004cb8:	d802      	bhi.n	8004cc0 <_realloc_r+0x34>
 8004cba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004cbe:	d812      	bhi.n	8004ce6 <_realloc_r+0x5a>
 8004cc0:	4621      	mov	r1, r4
 8004cc2:	4640      	mov	r0, r8
 8004cc4:	f7ff ff6e 	bl	8004ba4 <_malloc_r>
 8004cc8:	4605      	mov	r5, r0
 8004cca:	2800      	cmp	r0, #0
 8004ccc:	d0ed      	beq.n	8004caa <_realloc_r+0x1e>
 8004cce:	42bc      	cmp	r4, r7
 8004cd0:	4622      	mov	r2, r4
 8004cd2:	4631      	mov	r1, r6
 8004cd4:	bf28      	it	cs
 8004cd6:	463a      	movcs	r2, r7
 8004cd8:	f7ff fed0 	bl	8004a7c <memcpy>
 8004cdc:	4631      	mov	r1, r6
 8004cde:	4640      	mov	r0, r8
 8004ce0:	f7ff fef4 	bl	8004acc <_free_r>
 8004ce4:	e7e1      	b.n	8004caa <_realloc_r+0x1e>
 8004ce6:	4635      	mov	r5, r6
 8004ce8:	e7df      	b.n	8004caa <_realloc_r+0x1e>
	...

08004cec <_sbrk_r>:
 8004cec:	b538      	push	{r3, r4, r5, lr}
 8004cee:	4d06      	ldr	r5, [pc, #24]	; (8004d08 <_sbrk_r+0x1c>)
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	4604      	mov	r4, r0
 8004cf4:	4608      	mov	r0, r1
 8004cf6:	602b      	str	r3, [r5, #0]
 8004cf8:	f7fc fdbe 	bl	8001878 <_sbrk>
 8004cfc:	1c43      	adds	r3, r0, #1
 8004cfe:	d102      	bne.n	8004d06 <_sbrk_r+0x1a>
 8004d00:	682b      	ldr	r3, [r5, #0]
 8004d02:	b103      	cbz	r3, 8004d06 <_sbrk_r+0x1a>
 8004d04:	6023      	str	r3, [r4, #0]
 8004d06:	bd38      	pop	{r3, r4, r5, pc}
 8004d08:	20000414 	.word	0x20000414

08004d0c <__malloc_lock>:
 8004d0c:	4801      	ldr	r0, [pc, #4]	; (8004d14 <__malloc_lock+0x8>)
 8004d0e:	f000 b811 	b.w	8004d34 <__retarget_lock_acquire_recursive>
 8004d12:	bf00      	nop
 8004d14:	20000418 	.word	0x20000418

08004d18 <__malloc_unlock>:
 8004d18:	4801      	ldr	r0, [pc, #4]	; (8004d20 <__malloc_unlock+0x8>)
 8004d1a:	f000 b80c 	b.w	8004d36 <__retarget_lock_release_recursive>
 8004d1e:	bf00      	nop
 8004d20:	20000418 	.word	0x20000418

08004d24 <_malloc_usable_size_r>:
 8004d24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d28:	1f18      	subs	r0, r3, #4
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	bfbc      	itt	lt
 8004d2e:	580b      	ldrlt	r3, [r1, r0]
 8004d30:	18c0      	addlt	r0, r0, r3
 8004d32:	4770      	bx	lr

08004d34 <__retarget_lock_acquire_recursive>:
 8004d34:	4770      	bx	lr

08004d36 <__retarget_lock_release_recursive>:
 8004d36:	4770      	bx	lr

08004d38 <_init>:
 8004d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d3a:	bf00      	nop
 8004d3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d3e:	bc08      	pop	{r3}
 8004d40:	469e      	mov	lr, r3
 8004d42:	4770      	bx	lr

08004d44 <_fini>:
 8004d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d46:	bf00      	nop
 8004d48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d4a:	bc08      	pop	{r3}
 8004d4c:	469e      	mov	lr, r3
 8004d4e:	4770      	bx	lr
